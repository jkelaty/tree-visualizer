{"version":3,"sources":["TreeVisualizer/NavigationBar/NavigationBar.jsx","TreeVisualizer/Additional/headerLogo.jsx","TreeVisualizer/Trees/BinarySearchTree/BinarySearchTreeTooltips/BinarySearchTreeTooltips.jsx","TreeVisualizer/Tooltips/Tooltips.jsx","TreeVisualizer/Additional/InputModal/InputModal.jsx","TreeVisualizer/Additional/ErrorMessage/ErrorMessage.jsx","TreeVisualizer/Additional/Queue.js","TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx","TreeVisualizer/Additional/Helpers.js","TreeVisualizer/TreeVisualizer.jsx","serviceWorker.js","index.js"],"names":["NavigationBar","props","visualizer","trees","BST","name","operations","traversals","state","active_tree","menu_key","id","className","href","this","Object","keys","map","key","idx","onClick","changeTree","operation","op_idx","traversal","tr_idx","performOperation","type","toggleTooltips","target","rel","newProps","React","Component","BinarySearchTreeTooltips","tooltip","SearchTooltips","InsertionTooltips1","InsertionTooltips2","RemovalTooltips1","RemovalTooltips2","RemovalTooltips3","RemovalTooltips4","TraversalTooltips","InitialTooltips","initialStateOperation","visibleClasses","appearDone","enterDone","exit","hiddenClasses","appearActive","enterActive","operationSteps","next","active","timeout","current","previous","CSSTransition","in","classNames","appear","getContent","getPreviousTooltips","getCurrentTooltips","getNextButton","InputModal","value","callback","updateInputValue","bind","confirm","cancel","e","parseInt","onChange","step","ErrorMessage","message","Queue","queue","length","val","push","shift","BinarySearchTreeNode","left","right","animations","initial","node","delay","line","visited","success","removed","moveAnimations","css","entering","entered","exiting","exited","BinarySearchTree","Initial","Generate","Reset","Insert","Remove","Search","root","removeValue","targetValue","targetNode","input","tooltipsStep","waiting","errorMessage","tooltips","destroy","receiveInput","advanceOperationStepFromTooltips","setState","nextProps","nextState","Date","getTime","performOperationStep","style","transform","getScaleFactor","Tree","advanceOperationStep","GenerateTree","ResetTree","InsertInTree","RemoveFromTree","SearchTree","TraverseTree","InitialTree","_this","setTimeout","elements","min","max","counter","i","Math","floor","random","insert","height","reset","remove","contains","curr","inOrderSuccessor","scale_factor","window","innerWidth","pow","tree_height","curr_height","pos","leftChild","rightChild","classes","join","node-value","rootWidth","width","Transition","node-height","getNodeHover","getCricle","getConnectingLine","xmlns","r","cx","cy","fill","x","y","textAnchor","dominantBaseline","searchNode","deleteNode","getLine","addClass","x1","y1","x2","y2","setHideTraversalAnimations","setHideMoveAnimations","document","querySelector","classList","setHideAnimations","insertNumElements","setGenerationAnimations","setInsertAnimations","setInsertionCompleteAnimations","setRemoveAnimations","setMoveSubtreeAnimations","add","setSearchAnimations","forceUpdate","setDFSTraversalAnimations","setBFSTraversalAnimations","empty","front","element","order","_delay","querySelectorAll","attributes","offsetWidth","setMoveSubtreeCompleteAnimations","setInOrderSuccessorAnimations","first","textContent","TreeVisualizer","tree","tree_key","new_key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c337aec.chunk.js","sourcesContent":["import React from 'react';\n\nimport getHeaderLogo from '../Additional/headerLogo.jsx'\n\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport './NavigationBar.scss';\n\nexport default class NavigationBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.visualizer = this.props.visualizer;\n        \n        this.trees = {\n            BST : {\n                name : 'Binary Search Tree',\n                operations : [\n                    'Insert',\n                    'Remove',\n                    'Search',\n                    'Traversals'\n                ]\n            },\n            // AVL : {\n            //     name : 'AVL Tree',\n            //     operations : [\n            //         'Insert',\n            //         'Remove',\n            //         'Search',\n            //         'Traversals'\n            //     ]\n            // },\n            // RBT : {\n            //     name : 'Red-Black Tree',\n            //     operations : [\n            //         'Insert',\n            //         'Remove',\n            //         'Search',\n            //         'Traversals'\n            //     ]\n            // },\n            // BHP : {\n            //     name : 'Binary Heap',\n            //     operations : [\n            //         'Pop',\n            //         'Push'\n            //     ]\n            // }\n        };\n\n        this.traversals = [\n            'Pre-Order',\n            'In-Order',\n            'Post-Order',\n            'Level Order'\n        ];\n\n        this.state = {\n            active_tree: this.visualizer.state.menu_key\n        };\n    }\n\n    static getDerivedStateFromProps(newProps, state) {\n        if ( state.active_tree !== newProps.visualizer.state.menu_key ) {\n            return { active_tree: newProps.visualizer.state.menu_key };\n        }\n        else {\n            return null;\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div id='navbar-wrapper'>\n\n                    <div className='navbar-logo'>\n                        <a href='/tree-visualizer'>\n                            { getHeaderLogo() }\n                        </a>\n                    </div>\n                    \n                    <div id='tree-dropdown' className='dropdown'>\n                        <a\n                            className='dropdown-toggle'\n                            href='# '>\n                            { this.state.active_tree ? this.trees[ this.state.active_tree ][ 'name' ] : 'Select..' }\n                            <i className='fa fa-caret-down'></i>\n                        </a>\n\n                        <ul className='dropdown-menu'>\n                            {Object.keys(this.trees).map((key, idx) => (\n                                <li className='dropdown-menu-option' key={idx}>\n                                    <a\n                                        href='# '\n                                        onClick={() => this.visualizer.changeTree(key)}>\n                                        {this.trees[ key ][ 'name' ]}\n                                    </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                    \n                    { this.state.active_tree && (\n                        <>\n                            <div id='operations-dropdown' className='dropdown'>\n                                <a\n                                    className='dropdown-toggle'\n                                    href='# '>\n                                    Operations\n                                    <i className='fa fa-caret-down' />\n                                </a>\n\n                                <ul className='dropdown-menu'>\n                                    {this.trees[ this.state.active_tree ][ 'operations' ].map((operation, op_idx) => (\n\n                                        (operation === 'Traversals') ? (\n                                            <li id='traversals-submenu' className='dropdown-menu-option submenu' key={op_idx}>\n                                                <a\n                                                    className='submenu-toggle'\n                                                    href='# '>\n                                                    {operation}\n                                                    <i className='fa fa-caret-down' />\n                                                </a>\n\n                                                <ul className='dropdown-menu submenu-dropdown'>\n                                                    {this.traversals.map((traversal, tr_idx) => (\n                                                        <li className='dropdown-menu-option' key={tr_idx}>\n                                                            <a\n                                                                href='# '\n                                                                onClick={() => this.visualizer.performOperation(traversal)}>\n                                                                {traversal}\n                                                            </a>\n                                                        </li>\n                                                    ))}\n                                                </ul>\n                                            </li>\n                                        ) : (\n                                            <li className='dropdown-menu-option' key={op_idx}>\n                                                <a\n                                                    href='# '\n                                                    onClick={() => this.visualizer.performOperation(operation)}>\n                                                    {operation}\n                                                </a>\n                                            </li>\n                                        )\n\n                                    ))}\n                                </ul>\n                            </div>\n                        \n                            <div id='generate-tree' className='navbar-button'>\n                                <button\n                                    onClick={() => this.visualizer.performOperation('Generate')}>\n                                    Generate\n                                </button>\n                            </div>\n\n                            <div id='reset-tree' className='navbar-button'>\n                                <button\n                                    onClick={() => this.visualizer.performOperation('Reset')}>\n                                    Reset\n                                </button>\n                            </div>\n\n                            <div id='tooltips-toggle'>\n                                <span className='tooltips-text'>Tooltips:</span>\n                                <label className='switch'>\n                                    <input type='checkbox' onClick={this.visualizer.toggleTooltips} />\n                                    <span className='slider round' />\n                                </label>\n                            </div>\n\n                            <div id=\"about-information\">\n                                <div className=\"info-icon-wrapper\">\n                                    <i className=\"fas fa-info\" />\n                                </div>\n\n                                <div className=\"about-dialogue\">\n                                    <p>Project repository can be found <a href='https://github.com/jkelaty/tree-visualizer' target='_blank' rel=\"noopener noreferrer\">here</a>\n                                    </p>\n                                    <p>Created by Jonathan Kelaty</p>\n                                </div>\n                            </div>\n                        </>\n                    )}\n\n                </div>\n            </>\n        );\n    }\n}","import React from 'react';\n\nexport default function getHeaderLogo() {\n\n    const ascii_logo = `                                                                                                                                                                       \n                                                                                                                                                                       \n                                                                                                                                                                       \n                                                                                            *****( *,/,*(/*                                                            \n                                                                    ,,   . */            (#(##/##/#/((/(,,,                                                            \n                                                                .*,*/(*/*((*/*#(((**    *////%%##/((/(#((%#* *                                                         \n                                                            .*#/(###/(/##%(#(#&%(*/*/((//(#*/(#((*(((/*/*(##(////                                                      \n                                                            ((#(((%/((((#(#(##(**(((#(#/*/#*#(((%%%//((#%(%#%(%%/(#(*   ,                                              \n                                                        ,(##(#%(###%%#&(%%&%/%(#%%#&%%%#(((#(*/%(&%&&%##(%(&&%%%(/#(%((/*,                                             \n                                                    ,** .*/#/((#%#&&%%&*(//(##&&%%&%((##/%#((((/&%//(*(/(&%%###%%%%&%///*.                                             \n                                                ,, *#(((/(%*#%%&%%%#@@@&%##(%(#/%#%&%#%&&&&@#%##//##(##/(/*&&&&#&%#&/(&//,*                                            \n                                            ./##%%%#%%%#((#&&&&&@@&@&/#(##%#%%(&@&%%%##&&%&&%#@%%%%%&(&(#(((#&&%@%#(#%&(#(&(/*                                         \n                                            /*(((%#&%(%#(((#((&%@&@@@&(#(#%%&%&&@&%###%&%/%##%@&@@&##((#/#(*%%%#%(%(/@@#%%(*                                           \n                                        **/((##%#(((%##((#(((##@@&&(#(%%&&%&@&%&%#&%&%#(%/&%%(&&&@/%&&&&&&%(%%&%#&&&&@%%&&%(/##,                                       \n                                        ./(%((###&&(@(/(#%%&&%%%#%(#%@%#&&@&@&@##(#%#%#%&(@%&&&&&&%%&(##&(#(&&@@&@@@&%%#,                                              \n                                        #((#&%%&%&&&&%%&%%&&&@&&&/#(%#%%&%@@%@%##%%%%(%&%%&@&%&%%%##%#%((##(#%(%&&((%@&&#%&(%#                                         \n                                        ,(#%%&&&&&&&&@&&@@@@&@&@&%(##&%@&%&&&@@#%%&%&&/(#(/#&&&@#((##(%#&&(/%&&(%#(#/#(&%%/(,                                          \n                                        ./#%#&&%&%#%@@@&&@&@&%&%#&&&@@@@@@@@@@(#/(#@(#(&&&&@@%&(%%#%#%#((%&%%/(###((%%(/#&%%%##,.                                      \n                                        .(*%#&&%@&&(/(%##%@@@&@&&&&@%##&&*#%(%%&&@&@@@(&%&&&&&/@&&&%@@&((#(#/&%%&&(%&&&(&/*/.                                          \n                                    (/(((#.((%%@%##&&(%%%(%&%&&%#((%###%%%&&@@@%%%@&&&@@&%&&&%#&@@@%&&&&&@&(%&&&%#%%(%%&&%#%%%%(#/#/*                                  \n                                    ,(%#/(##((#@@@@#&&&&%%&&&((###%&%%@@#&&%%%&&&%@@&@&%&&&&&@#&@@@@#,#%%&%&@%&%&&%###(&@&%@%*(*.                                      \n                                    (/#/((####%##&%&&@(&%&&%&%&%%/%(%%%(&&&@&&@&&&&&&&&@@&(@&&@&&@%%%&%&&@%%(&&%%###%#@&@/&(..                                         \n                                ,((/##@@#&&@@&%&%%%@%##&&&@((%/%%(%#%&%%%&&@&&&@@%@&&(&((@&&&@%&&&&%&&%&@%#%@%&@&@%%&&%(#&%%###%#&((((// ,                             \n                                    ###&&@/%%%&%@@&@@&&%&&&&%#%@&@&%##%%&@&&@@%#%#%%%&%(##%%%#%@@&&&&&&@%@%&&@@&&%%%%#%(//&%((((%((/(#%#/(#((.                         \n                        */,((%//(#(((%&@&%&@@&%&@@%&%#@@%%&&@@@@@@%&&%&&@&&%%#%&%##%%%&@&%%%&&@&&%&(&&&&&&&&&(&&&(&(&##%%(#(&((%(##(//#                                \n                        ,((#(((#%##((/&%&/((/###&@@&&&@@&@&&&&@&@&@@%@&@@@&%@##%%(%#%@&@@@&((%@&%&(((&&@&#%&%%%##@&&%#%&%/%&@&@%@&&%%%##(#((*                          \n                        (##&####%&@@&@(%#&&%(#%#%%@&@%&&@&@&&&&@@@&&%%&&&&%%@#%#@%%&@&%(&&%/%%%%&%%%@@&@&&&&%%&&%%&%@%@%&(%@&@%&&&&&(%#%%%%/                           \n                        . (%&%#%&&@%&&&@@@%#&&%%%&%((&%#%##&@@&@&&%@&&%%&&%&&%&&&%%&%##/(/%(#&&%#%(((&(&%&&@&@#(&@&%(#%((%((#&@&%%%#(/%%&//*                           \n                        #%#,%/#(&(%@/ (#%&@%%&&(&%##&%@&&%&%@&@@@##&&&%&%&&&&(%#(#(//((%#%@&@@%%&&&&@%&&&@&%%##&&%@&%(@%%%%%#%((#%/#&%*                                \n                                (#%&&&&&&%%%/(%@@&%%%%#/(&%%%&@&&@@&@%%%&&%&&&@####(&&%%%%%#@&@&(%%##@&@&&%%&&&&@@&&&%&&@&&@(@%%%%&&/%%&%#&&&(// /                     \n                                #%%(##%%/ %/(#%&&&.* /%(,(,%%,,(&./&%&@&@%@&&*  %&%/% % &%&&&%%%&(&%%#((.@%@&%.&@#,#&&&&&&%%#%#&&&&@%%###%(.                           \n                                ./ ,* *#  .  %(&(,%%,/.*#  &**@@@&,%&&&&&&%%%  ..&&&&.(#&@&%@%%%&%%#%%#*%%      *. ... %%(&*&%(&/%%#&&%&%&%.(                          \n                                    *,%       /       #%%%&%&&,#%#&&&%(# %%%%  %&&%&&&&,.*% %     .*        , %#.. (/%@%(%%&&&(/..&%%%#&%%#(*                          \n                                                            *# (#*    .      *%%%%&&%&%%.    %/      /           .(#,*(@@*#//#%%%,  (,/##*,                            \n                                                                %*                %%&&%%#   %#,                  /.%(##&,%%      .#%**                                 \n                                                                                    .%%%%##%#.                      %/ /  ,.        .                                  \n                                                                                    %%%&%(                                                                             \n                                                                                    %#%%%,                                                                             \n                                                                                    %##%%,                                                                             \n                                                                                    %##%#(                                                                             \n                                                                                    %#%%%(                                                                             \n                                                                                    (#%%%#                                                                             \n                                                                                    ###%%%%*                                                                           \n                                                                    ...,,,,**/(((((##%#%#%###(#(....                                                                    `;\n\n    return (\n        <>\n            <span className=\"logo-text\">Tree Visualizer</span>\n\n            <code className=\"ascii-logo\"><span>\n                {ascii_logo}    \n            </span></code>\n        </>\n    );\n}","import React from 'react'\nimport Tooltips from '../../../Tooltips/Tooltips.jsx'\n\nexport default class BinarySearchTreeTooltips extends Tooltips {\n    getContent(operation) {\n        var tooltip = '';\n\n        switch( operation ) {\n            case 'Search':      tooltip = this.SearchTooltips();     break;\n            case 'Insert':      tooltip = this.InsertionTooltips1(); break;\n            case 'Insert 2':    tooltip = this.InsertionTooltips2(); break;\n            case 'Remove 1':    tooltip = this.RemovalTooltips1();   break;\n            case 'Remove 2':    tooltip = this.RemovalTooltips2();   break;\n            case 'Remove 3':    tooltip = this.RemovalTooltips3();   break;\n            case 'Remove 4':    tooltip = this.RemovalTooltips4();   break;\n            case 'Pre-Order':\n            case 'In-Order':\n            case 'Post-Order':\n            case 'Level Order': tooltip = this.TraversalTooltips();  break;\n            case 'Initial':\n            default:            tooltip = this.InitialTooltips();    break;\n        }\n\n        return (\n            <>\n                <div className='tooltip'>\n                    <p>{tooltip}</p>\n                </div>\n            </>\n        );\n    }\n\n    InitialTooltips() {\n        return (\n            <>\n                {'A Binary Search Tree is a data structure for which every node\\'s value is greater than every node in its left subtree and less than every node in its right subtree.'}\n            </>\n        );\n    }\n\n    RemovalTooltips1() {\n        return (\n            <>\n                {'The first step in removing an element from a BST is to find the node to be deleted.'}\n            </>\n        );\n    }\n\n    RemovalTooltips2() {\n        return (\n            <>\n                {'If the target node is not a leaf node, we must then find its in-order successor place the node in place of our target node.'}\n            </>\n        );\n    }\n\n    RemovalTooltips3() {\n        return (\n            <>\n                {'We must then delete the in-order successor from the tree.'}\n            </>\n        );\n    }\n\n    RemovalTooltips4() {\n        return (\n            <>\n                {'Finally, we reassign the in-order successor\\'s subtree to complete our tree.'}\n            </>\n        );\n    }\n\n    InsertionTooltips1() {\n        return (\n            <>\n                {'To insert an element in our BST, we must first search through our tree as if we\\'re finding an element until we\\'ve found an open position to insert our new leaf node. The time complexity for finding the open position is O(n)'}\n            </>\n        );\n    }\n\n    InsertionTooltips2() {\n        return (\n            <>\n                {'Once we\\'ve found the open position, we can insert our new node. This operation has a time complexity of O(1)'}\n            </>\n        );\n    }\n\n    SearchTooltips() {\n        return (\n            <>\n                {'To search through our BST, we check if our current node matches our target value. If we have no found our target, we check if the target is greater than our current node, in which case we traverse to the right child, else we traverse to the left child. If the child is a null node, the target elelment is not in our tree. This operation has a time complexity of O(n)'}\n            </>\n        );\n    }\n\n    TraversalTooltips() {\n        return (\n            <>\n                {'We have 4 different traversals for out BST. Pre-order, in-order, post-order, and level order. The first three are most easily implmented as a recursive function call as follows:'}\n                <br />\n                {'Pre-order: Current node -> left subtree -> right subtree'}\n                <br />\n                {'In-order: Left Substree -> current node -> right subtree'}\n                <br />\n                {'Post-order: Left subtree -> right subtree -> current node'}\n                <br />\n                {'Level order traversal can be implemented using a queue, where we enqueue each node\\'s child nodes when we pop them from the queue. Each traveral operation has a time complexity of O(n)'}\n            </>\n        );\n    }\n}\n\n","import React from 'react'\nimport{ CSSTransition } from 'react-transition-group'\n\nimport './Tooltips.scss';\n\nexport default class Tooltips extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.initialStateOperation = 'Initial';\n\n        this.visibleClasses = {\n            appearDone: 'visible',\n            enterDone: 'visible',\n            exit: 'visible'\n        };\n\n        this.hiddenClasses = {\n            appearActive: 'hiding',\n            enterActive: 'hiding',\n            appearDone: 'hidden',\n            enterDone: 'hidden'\n        };\n\n        this.operationSteps = this.props.operationSteps;\n        this.next = this.props.next;\n\n        this.state = {\n            active: this.props.active,\n            timeout: this.props.timeout,\n            operation: {\n                current: this.props.operation,\n                previous: this.props.operation\n            }\n        };\n    }\n\n    static getDerivedStateFromProps(newProps, state) {\n        if ( (state.active !== newProps.active) || (state.operation.current !== newProps.operation) ) {\n            return {\n                active: newProps.active,\n                timeout: newProps.timeout,\n                operation: {\n                    current: newProps.operation,\n                    previous: state.operation.current\n                }\n            };\n        }\n        else {\n            return null;\n        }\n    }\n\n    getContent() {\n        return null;\n    }\n\n    getPreviousTooltips() {\n        return (\n            <>\n                <CSSTransition\n                    in={this.state.operation.current !== this.state.operation.previous}\n                    timeout={500}\n                    classNames={this.hiddenClasses}\n                    appear={true}\n                    key={this.state.operation.previous}>\n\n                    <div className='prev-tooltips'>\n                        { this.getContent(this.state.operation.previous) }\n                    </div>\n\n                </CSSTransition>\n            </>\n        );\n    }\n\n    getCurrentTooltips() {\n        return (\n            <>\n                <CSSTransition\n                    in={this.state.operation.current !== this.state.operation.previous}\n                    timeout={500}\n                    classNames={this.visibleClasses}\n                    appear={true}\n                    key={this.state.operation.current}>\n\n                    <div className='curr-tooltips'>\n                        { this.getContent(this.state.operation.current) }\n                    </div>\n\n                </CSSTransition>\n            </>\n        );\n    }\n\n    getNextButton() {\n        return (\n            <>\n                <CSSTransition\n                    in={this.state.operation.current !== this.initialStateOperation}\n                    timeout={this.state.timeout}\n                    classNames={this.visibleClasses}\n                    appear={true}\n                    key={this.state.operation.current}>\n\n                    <a\n                        className='tooltips-next'\n                        href='# '\n                        onClick={this.next}>\n                        Next step\n                        <i className=\"fas fa-arrow-right\" />\n                        <div className='next-underline' />\n                    </a>\n\n                </CSSTransition>\n            </>\n        );\n    }\n\n    render() {\n        return (\n            <>\n                <CSSTransition\n                    in={this.state.active}\n                    timeout={0}\n                    classNames={this.visibleClasses}\n                    appear={true}>\n\n                    <div id='tooltips'>\n                        { this.getPreviousTooltips() }\n                        { this.getCurrentTooltips() }\n                        { this.getNextButton() }\n                    </div>\n\n                </CSSTransition>\n            </>\n        );\n    }\n}","import React from 'react'\n\nimport './InputModal.scss'\n\nexport default class InputModal extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.value = null;\n\n        this.state = {\n            active: this.props.active,\n            operation: this.props.operation,\n            callback: this.props.callback\n        }\n\n        this.updateInputValue = this.updateInputValue.bind(this);\n        this.confirm = this.confirm.bind(this);\n        this.cancel = this.cancel.bind(this);\n    }\n\n    updateInputValue(e) {\n        this.value = parseInt( e.target.value );\n    }\n\n    confirm() {\n        this.state.callback(this.value);\n    }\n\n    cancel() {\n        this.state.callback(null);\n    }\n\n    render() {\n        if ( this.state.active ) {\n            return (\n                <>\n                    <div id='prompt-container'>\n\n                        <div id='input-container'>\n                            <div id='input-message'>Please select element:</div>\n\n                            <input id='input-number' onChange={this.updateInputValue} type='number' step='1' />\n\n                            <button\n                                id='input-confirm'\n                                className='input-prompt-button'\n                                onClick={this.confirm}>\n                                    \n                                { this.state.operation }    \n\n                            </button>\n\n                            <button\n                                id='input-cancel'\n                                className='input-prompt-button'\n                                onClick={this.cancel}>\n                                    \n                                Cancel\n                            </button>\n                        </div>\n\n                        <div id='prompt-background' onClick={this.cancel} />\n\n                    </div>\n                </>\n            );\n        }\n        else {\n            return null;\n        }\n    }\n}","import React from 'react'\n\nimport './ErrorMessage.scss'\n\nexport default function ErrorMessage(props) {\n    return (\n        <>\n            {props.message ?\n                <div id=\"error-message\">\n                    <p>{props.message}</p>\n                </div>\n            : null}\n        </>\n    );\n}","export default class Queue {\n    constructor () {\n        this.queue = [];\n    }\n\n    empty() {\n        return ! this.queue.length;\n    }\n\n    push(val) {\n        this.queue.push(val);\n    }\n\n    front() {\n        return this.queue.shift();\n    }\n\n    size() {\n        return this.queue.length;\n    }\n}","import React from 'react'\nimport{ Transition, CSSTransition } from 'react-transition-group'\n\nimport BinarySearchTreeTooltips from './BinarySearchTreeTooltips/BinarySearchTreeTooltips.jsx'\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\n\nimport Queue from '../../Additional/Queue.js'\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\n\nimport './BinarySearchTree.scss'\n\nclass BinarySearchTreeNode {\n    constructor(val) {\n        this.value = val;\n        this.left  = null;\n        this.right = null;\n\n        this.animations = {\n            initial: {\n                node: { active: false, delay: 0 },\n                line: { active: false, delay: 0 }\n            },\n            visited: {\n                node: { active: false, delay: 0 },\n                line: { active: false, delay: 0 }\n            },\n            success: {\n                node: { active: false, delay: 0 },\n                line: { active: false, delay: 0 }\n            },\n            removed: {\n                node: { active: false, delay: 0 },\n                line: { active: false, delay: 0 }\n            }\n        };\n\n        this.moveAnimations = {\n            active: false,\n            delay: 0,\n            css: {\n                entering: {},\n                entered:  {},\n                exiting:  {},\n                exited:   {}\n            }\n        };\n    }\n}\n\nexport default class BinarySearchTree extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.initialStateOperation = 'Initial';\n\n        this.visibleClasses = {\n            appearDone: 'visible',\n            enterDone: 'visible',\n            exit: 'visible'\n        };\n\n        this.operationSteps = {\n            Initial: [\n                'Initial'\n            ],\n            Generate: [\n                'Reset',\n                'Generate'\n            ],\n            Reset: [\n                'Hide',\n                'Reset'\n            ],\n            Insert: [\n                'Input',\n                'Insert',\n                'Complete'\n            ],\n            Remove: [\n                'Input',\n                'Remove 1',\n                'Remove 2',\n                'Remove 3',\n                'Remove 4',\n                'Complete'\n            ],\n            Search: [\n                'Input',\n                'Search'\n            ],\n            'Pre-Order': [\n                'Traverse'\n            ],\n            'In-Order': [\n                'Traverse'\n            ],\n            'Post-Order': [\n                'Traverse'\n            ],\n            'Level Order': [\n                'Traverse'\n            ]\n        };\n\n        this.name = 'BinarySearchTree';\n        this.key  = 'BST';\n        this.root = null;\n\n        this.removeValue = null;\n        this.targetValue = null;\n        this.targetNode = null;\n        this.timeout = 0;\n        this.input = false;\n        this.tooltipsStep = this.initialStateOperation;\n        this.waiting = false;\n        this.errorMessage = {\n            message: '',\n            key: null\n        };\n\n        this.state = {\n            operation: this.initialStateOperation,\n            step: 0,\n            tooltips: false,\n            destroy: false\n        };\n\n        this.receiveInput = this.receiveInput.bind(this);\n        this.advanceOperationStepFromTooltips = this.advanceOperationStepFromTooltips.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ operation: 'Generate', step: 0 });\n    }\n    \n    static getDerivedStateFromProps(newProps, state) {\n        const initialStateOperation = 'Initial';\n        const destroyStateOperation = 'Destroy';\n\n        if ( newProps.operation === destroyStateOperation ) {\n            return { operation: 'Reset', step: 0, destroy: true };\n        }\n        else if ( newProps.operation !== initialStateOperation ) {\n            if ( state.operation === initialStateOperation ) {\n                return { operation: newProps.operation, tooltips: newProps.tooltips };\n            }\n            else if ( newProps.tooltips !== state.tooltips ) {\n                return { tooltips: newProps.tooltips };\n            }\n        }\n        else if ( newProps.tooltips !== state.tooltips ) {\n            return { tooltips: newProps.tooltips };\n        }\n\n        return null;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if ( nextState.destroy ) {\n            return true;\n        }\n        else if ( this.waiting && (this.state.tooltips === nextState.tooltips) ) {\n            if ( nextProps.operation !== this.initialStateOperation && nextProps.operation !== this.state.operation ) {\n                this.errorMessage['message'] = 'Error: Tree performing operation';\n                this.errorMessage['key'] = new Date().getTime();\n                return true;\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    render() {\n        this.performOperationStep();\n\n        return (\n            <>\n                <InputModal\n                    active = {this.input}\n                    operation = {this.state.operation}\n                    callback = {this.receiveInput}\n                    key = {this.input}\n                />\n\n                <ErrorMessage\n                    message = {this.errorMessage['message']}\n                    key = {this.errorMessage['key']}\n                />\n\n                <div\n                    id={ this.name }\n                    className='tree'\n                    style={ {transform: this.getScaleFactor()} }>\n\n                    { this.Tree() }\n\n                </div>\n\n                <BinarySearchTreeTooltips\n                    active = {this.state.tooltips}\n                    operation = {this.tooltipsStep}\n                    next = {this.advanceOperationStepFromTooltips}\n                    timeout = {this.timeout}\n                />\n            </>\n        );\n    }\n\n    componentDidUpdate() {\n        this.advanceOperationStep();\n    }\n\n    /* Handle calling function to perform animations for a given operation */\n\n    performOperationStep() {\n        switch( this.state.operation ) {\n            case 'Generate':    this.GenerateTree();   break;\n            case 'Reset':       this.ResetTree();      break;\n            case 'Insert':      this.InsertInTree();   break;\n            case 'Remove':      this.RemoveFromTree(); break; \n            case 'Search':      this.SearchTree();     break;\n            case 'Pre-Order':\n            case 'In-Order':\n            case 'Post-Order':\n            case 'Level Order': this.TraverseTree();   break;\n            case 'Initial':\n            default:            this.InitialTree();    break;\n        }\n    }\n\n    /* Advances operation step asynchonously based on timeout set */\n    \n    advanceOperationStep() {\n        if ( this.state.operation !== this.initialStateOperation ) {\n            if ( this.state.step >= this.operationSteps[ this.state.operation ].length - 1 ) {\n                if ( ! this.waiting ) {\n                    let _this = this;\n                    _this.waiting = true;\n                    setTimeout(function() {\n                        _this.waiting = false;\n                        if ( ! _this.state.tooltips || (_this.timeout === 0) || (_this.state.operation === 'Generate') || (_this.state.operation === 'Reset') ) {\n                            _this.setState({ operation: 'Initial', step: 0 });\n                        }\n                    }, _this.timeout);\n                }\n            }\n            else {\n                if ( this.operationSteps[ this.state.operation ][ this.state.step ] === 'Input' ) return;\n\n                if ( ! this.waiting ) {\n                    let _this = this;\n                    _this.waiting = true;\n                    setTimeout(function() {\n                        _this.waiting = false;\n                        if ( ! _this.state.tooltips || (_this.timeout === 0) || (_this.state.operation === 'Generate') || (_this.state.operation === 'Reset') ) {\n                            _this.setState({ step: _this.state.step + 1 });\n                        }\n                    }, _this.timeout);\n                }\n            }\n        }\n    }\n\n    advanceOperationStepFromTooltips() {\n        if ( this.state.step >= this.operationSteps[ this.state.operation ].length - 1 ) {\n            this.setState({ operation: 'Initial', step: 0 });\n        }\n        else {\n            this.setState({ step: this.state.step + 1 });\n        }\n    }\n\n    /* Basic internal tree operations */\n\n    insertNumElements(elements) {\n        let counter = 0;\n\n        for (let i = 0; i < elements; ++i) {\n            let val = randomIntFromInverval(1, 150);\n            if ( this.insert( val ) ) {\n                if ( this.height() > 5 ) {\n                    if ( counter > 100 ) {\n                        this.reset();\n                        counter = 0;\n                        i = 0;\n                    }\n                    else {\n                        this.root = this.remove( val );\n                        --i;\n                    }\n                }\n                else {\n                    ++counter;\n                }\n            }\n            else {\n                --i;\n            }\n        }\n    }\n\n    reset() {\n        this.root = null;\n    }\n\n    height(node = this.root) {\n        if (node === null) return 0;\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\n    }\n\n    contains(val, node = this.root) {\n        if ( ! node ) return false;\n\n        if (val < node.value) {\n            return this.contains(val, node.left);\n        }\n        else if (val > node.value) {\n            return this.contains(val, node.right);\n        }\n        else {\n            return true;\n        }\n    }\n\n    insert(val) {\n        if (this.root === null) {\n            this.root = new BinarySearchTreeNode(val);\n            return true;\n        }\n        \n        let curr = this.root;\n\n        while (true) {\n            if (curr.value === val) {\n                //tree contains key already\n                return false;\n            }\n            else if (curr.value < val) {\n                if(curr.right === null) {\n                    curr.right = new BinarySearchTreeNode(val);\n                    return true;\n                }\n                curr = curr.right;\n            }\n            else {\n                if(curr.left === null) {\n                    curr.left = new BinarySearchTreeNode(val);\n                    return true;\n                }\n                curr = curr.left;\n            }\n        }\n    }\n\n    remove(val, node = this.root) {\n        if ( ! val ) return;\n\n        if ( node === null ) return node;\n\n        if ( val < node.value ) {\n            node.left = this.remove(val, node.left);\n        }\n        else if ( val > node.value ) {\n            node.right = this.remove(val, node.right);\n        }\n        else {\n            if ( node.left === null ) {\n                return node.right;\n            }\n            else if ( node.right === null ) {\n                return node.left;\n            }\n            else {\n                node.value = this.inOrderSuccessor(node.right);\n                node.right = this.remove(node.value, node.right);\n            }\n        }\n\n        return node;\n    }\n\n    inOrderSuccessor(node) {\n        if ( node.left !== null ) {\n            return this.inOrderSuccessor(node.left);\n        }\n        else {\n            return node.value;\n        }\n    }\n\n    getScaleFactor() {\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n    }\n\n    /* Handle creating Tree nodes and lines in DOM */\n\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n        if (curr_height === tree_height) return null;\n\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n        \n        const classes = ['node-wrapper', pos].join(' ');\n\n        if ( node === null ) {\n            return (\n                <>\n                    <div\n                        className={classes}\n                        node-value='null'>\n\n                        <div className='node-value' />\n\n                        {leftChild}\n                        {rightChild}\n                        \n                    </div>\n                </>\n            );\n        }\n        else {\n            const rootWidth = {\n                width: ( node === this.root ) ? Math.pow(2, tree_height - 1) * 70 + 'px' : null\n            };\n\n            return (\n                <>\n                    <Transition\n                        in={node.moveAnimations['active']}\n                        timeout={node.moveAnimations['delay']}\n                        appear={true}>\n\n                        {state => (\n\n                            <div\n                                className={classes}\n                                node-value={node.value}\n                                node-height={tree_height - curr_height}\n                                style={( node === this.root && ! node.moveAnimations['active'] ) ? rootWidth : node.moveAnimations['css'][state]}>\n\n                                <CSSTransition\n                                    in={node.animations['initial']['node']['active']}\n                                    timeout={node.animations['initial']['node']['delay']}\n                                    classNames={this.visibleClasses}\n                                    appear={true}>\n\n                                    <div className='node-value'>\n                                        {this.getNodeHover(node.value)}\n                                        {this.getCricle(node)}\n                                    </div>\n\n                                </CSSTransition>\n\n                                {leftChild}\n                                {rightChild}\n\n                                {this.getConnectingLine(node, pos)}\n\n                            </div>\n                        )}\n\n                    </Transition>\n                </>\n            );\n        }\n    }\n\n    getCricle(node) {\n        return (\n            <>\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\n\n                    <circle className='circle node-circle initial' r='24' cx='25' cy='25' fill='none' />\n\n                    <CSSTransition\n                        in={node.animations['visited']['node']['active']}\n                        timeout={node.animations['visited']['node']['delay']}\n                        classNames={this.visibleClasses}\n                        appear={true}>\n\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\n                            <circle className='circle node-circle-background visited' r='24' cx='25' cy='25' fill='none' />\n                            <circle className='circle node-circle visited' r='24' cx='25' cy='25' fill='none' />\n                        </svg>\n\n                    </CSSTransition>\n\n                    <CSSTransition\n                        in={node.animations['success']['node']['active']}\n                        timeout={node.animations['success']['node']['delay']}\n                        classNames={this.visibleClasses}\n                        appear={true}>\n\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\n                            <circle className='circle node-circle-background success' r='24' cx='25' cy='25' fill='none' />\n                            <circle className='circle node-circle success' r='24' cx='25' cy='25' fill='none' />\n                        </svg>\n\n                    </CSSTransition>\n\n                    <CSSTransition\n                        in={node.animations['removed']['node']['active']}\n                        timeout={node.animations['removed']['node']['delay']}\n                        classNames={this.visibleClasses}\n                        appear={true}>\n\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\n                            <circle className='circle node-circle-background removed' r='24' cx='25' cy='25' fill='none' />\n                            <circle className='circle node-circle removed' r='24' cx='25' cy='25' fill='none' />\n                        </svg>\n\n                    </CSSTransition>\n                    \n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\n                        {node.value}\n                    </text>\n\n                </svg>\n            </>\n        );\n    }\n\n    getNodeHover(val) {\n        return (\n            <>\n                <CSSTransition\n                    in={this.state.operation === this.initialStateOperation}\n                    timeout={300}\n                    classNames={this.visibleClasses}\n                    appear={true}>\n\n                    <span className='node-hover'>\n                        <i className='fas fa-search' onClick={() => this.searchNode(val)} />\n                        <span className='search'>\n                            <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\n                                <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\n                            </svg>\n                        </span>\n\n                        <i className='fas fa-trash' onClick={() => this.deleteNode(val)} />\n                        <span className='trash'>\n                            <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\n                                <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\n                            </svg>\n                        </span>\n                    </span>\n\n                </CSSTransition>\n            </>\n        );\n    }\n    \n    getConnectingLine(node, pos) {\n        if (pos === 'left' || pos === 'right') {\n            return (\n                <>\n                    <CSSTransition\n                        in={node.animations['initial']['line']['active']}\n                        timeout={node.animations['initial']['line']['delay']}\n                        classNames={this.visibleClasses}\n                        appear={true}>\n\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\n\n                            {this.getLine(pos, 'initial')}\n\n                            <CSSTransition\n                                in={node.animations['visited']['line']['active']}\n                                timeout={node.animations['visited']['line']['delay']}\n                                classNames={this.visibleClasses}\n                                appear={true}>\n\n                                {this.getLine(pos, 'visited')}\n\n                            </CSSTransition>\n\n                            <CSSTransition\n                                in={node.animations['success']['line']['active']}\n                                timeout={node.animations['success']['line']['delay']}\n                                classNames={this.visibleClasses}\n                                appear={true}>\n\n                                {this.getLine(pos, 'success')}\n\n                            </CSSTransition>\n\n                            <CSSTransition\n                                in={node.animations['removed']['line']['active']}\n                                timeout={node.animations['removed']['line']['delay']}\n                                classNames={this.visibleClasses}\n                                appear={true}>\n\n                                {this.getLine(pos, 'removed')}\n\n                            </CSSTransition>\n\n                        </svg>\n\n                    </CSSTransition>\n                </>\n            );\n        }\n        else {\n            return null;\n        }\n    }\n\n    getLine(pos, addClass) {\n        const classes = ['line', addClass].join(' ');\n\n        if (pos === 'left')\n            return ( <line className={classes} x1='0' y1='50' x2='100%' y2='0' /> );\n        else if (pos === 'right')\n            return ( <line className={classes} x1='0' y1='0' x2='100%' y2='50' /> );\n        else\n            return null;\n    }\n\n    /* Handle operation step animations */\n\n    InitialTree() {\n        this.removeValue = null;\n        this.targetValue = null;\n        this.targetNode = null;\n        this.timeout = 0;\n        this.input = false;\n        this.tooltipsStep = this.initialStateOperation;\n        this.waiting = false;\n\n        this.setHideTraversalAnimations();\n        this.setHideMoveAnimations();\n\n        setTimeout(function() {\n            if ( document.querySelector('.moved') ) {\n                document.querySelector('.moved').classList.remove('moved');\n            }\n        }, 100);\n    }\n\n    GenerateTree() {\n        this.tooltipsStep = this.initialStateOperation;\n\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\n            case 'Reset':\n                if (this.root) {\n                    this.setHideAnimations();\n                    this.timeout = 1000;\n                }\n                else {\n                    this.timeout = 0;\n                }\n                break;\n            case 'Generate':\n                this.reset();\n                this.insertNumElements(15);\n                this.setGenerationAnimations();\n                this.timeout = 0;\n                break;\n            default:\n                this.InitialTree();\n                break;\n        }\n    }\n    \n    ResetTree() {\n        this.tooltipsStep = this.initialStateOperation;\n\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\n            case 'Hide':\n                if (this.root) {\n                    this.setHideAnimations();\n                    this.timeout = 1000;\n                }\n                else {\n                    this.timeout = 0;\n                }\n                break;\n            case 'Reset':\n                this.reset();\n                this.timeout = 0;\n                break;\n            default:\n                this.InitialTree();\n                break;\n        }\n    }\n    \n    InsertInTree(val) {\n        this.tooltipsStep = this.initialStateOperation;\n\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\n            case 'Input':\n                this.input = true;\n                break;\n            case 'Insert':\n                if ( this.targetValue ) {\n                    if ( ! this.contains(this.targetValue) ) {\n                        this.insert(this.targetValue);\n                        this.timeout = this.setInsertAnimations();\n                        this.tooltipsStep = 'Insert';\n                    }\n                    else {\n                        this.targetValue = null;\n                        this.errorMessage['message'] = 'Error: Tree already contains element';\n                        this.errorMessage['key'] = new Date().getTime();\n                    }\n                }\n                break;\n            case 'Complete':\n                if ( this.targetValue ) {\n                    this.setInsertionCompleteAnimations();\n                    this.timeout = 5000;\n                    this.tooltipsStep = 'Insert 2';\n                }\n                break;\n            default:\n                this.InitialTree();\n                break;\n        }\n    }\n    \n    RemoveFromTree() {\n        this.tooltipsStep = this.initialStateOperation;\n\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\n            case 'Input':\n                if ( this.root ) {\n                    this.input = true;\n                }\n                else {\n                    this.errorMessage['message'] = 'Error: Tree is empty';\n                    this.errorMessage['key'] = new Date().getTime();\n                }\n                break;\n            case 'Remove 1':\n                if ( this.targetValue ) {\n                    if ( this.contains(this.targetValue) ) {\n                        this.timeout = this.setRemoveAnimations() + 3000;\n                        this.tooltipsStep = 'Remove 1';\n                    }\n                    else {\n                        this.targetValue = null;\n                        this.errorMessage['message'] = 'Error: Tree does not contain target element';\n                        this.errorMessage['key'] = new Date().getTime(); \n                    }\n                }\n                break;\n            case 'Remove 2':\n                if ( this.targetValue ) {\n                    this.tooltipsStep = 'Remove 2';\n                    this.timeout = this.setMoveSubtreeAnimations() + 3000;\n                }\n                break;\n            case 'Remove 3':\n                if ( this.targetValue && this.targetNode ) {\n                    this.tooltipsStep = 'Remove 3';\n                    this.timeout = this.setRemoveAnimations() + 3000;\n                }\n                else {\n                    this.timeout = 0;\n                }\n                break;\n            case 'Remove 4':\n                if ( this.targetValue && this.targetNode ) {\n                    this.tooltipsStep = 'Remove 4';\n                    this.timeout = this.setMoveSubtreeAnimations() + 3000;\n                }\n                else {\n                    this.timeout = 0;\n                }\n                break;\n            case 'Complete':\n                if ( this.targetValue ) {\n                    this.root = this.remove(this.removeValue);\n                    this.setHideMoveAnimations();\n                    this.setHideTraversalAnimations();\n                    document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]').classList.add('moved');\n                    this.timeout = 0;\n                }\n                break;\n            default:\n                this.InitialTree();\n                break;\n        }\n    }\n    \n    SearchTree() {\n        this.tooltipsStep = this.initialStateOperation;\n\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\n            case 'Input':\n                if ( this.root ) {\n                    this.input = true;\n                }\n                else {\n                    this.errorMessage['message'] = 'Error: Tree is empty';\n                    this.errorMessage['key'] = new Date().getTime();\n                }\n                break;\n            case 'Search':\n                if ( this.targetValue ) {\n                    this.timeout = this.setSearchAnimations() + 7000;\n                    this.tooltipsStep = 'Search';\n\n                    if ( ! this.contains(this.targetValue) ) {\n                        let _this = this;\n                        setTimeout(function() {\n                            _this.errorMessage['message'] = 'Tree does not contain target element';\n                            _this.errorMessage['key'] = new Date().getTime();\n                            _this.forceUpdate();\n                        }, _this.timeout - 6000);\n                    }\n                }\n                break;\n            default:\n                this.InitialTree();\n                break;\n        }\n    }\n\n    TraverseTree() {\n        this.tooltipsStep = this.initialStateOperation;\n        \n        if ( this.root ) {\n            this.tooltipsStep = this.state.operation;\n\n            switch( this.state.operation ) {\n                case 'Pre-Order':\n                case 'In-Order':\n                case 'Post-Order':\n                    this.timeout = this.setDFSTraversalAnimations( this.state.operation ) + 5000;\n                    break;\n                case 'Level Order':\n                    this.timeout = this.setBFSTraversalAnimations() + 5000;\n                    break;\n                default:\n                    this.InitialTree();\n                    break;\n            }\n        }\n        else {\n            this.errorMessage['message'] = 'Error: Tree is empty';\n            this.errorMessage['key'] = new Date().getTime();\n        }\n    }\n\n    /* Node hover operations and input dialog */\n\n    receiveInput(val) {\n        this.targetValue = val;\n        this.input = false;\n\n        if ( this.state.operation === 'Remove' ){\n            this.deleteNode(val);\n        }\n        else {\n            this.setState({ step: this.state.step + 1 });\n        }\n    }\n\n    searchNode(val) {\n        this.targetValue = val;\n        this.setState({ operation: 'Search', step: 1 });\n    }\n\n    deleteNode(val) {\n        this.targetValue = val;\n        this.removeValue = val;\n        this.targetNode = this.root;\n        this.setState({ operation: 'Remove', step: 1 });\n    }\n\n    /* Set animations for nodes for given operation step */\n\n    setGenerationAnimations() {\n        let queue = new Queue();\n        queue.push(this.root);\n\n        let delay = 150;\n\n        while ( ! queue.empty() ) {\n            let node = queue.front();\n\n            if (node) {\n                queue.push(node.left);\n                queue.push(node.right);\n\n                for (let key in node.animations['initial']) {\n                    node.animations['initial'][key]['active'] = true;\n                    node.animations['initial'][key]['delay'] = delay;\n                }\n                \n                delay += 200;\n            }\n        }\n    }\n\n    setHideAnimations(node = this.root) {\n        if (node === null) return;\n\n        for (let state in node.animations) {\n            for (let element in node.animations[state]) {\n                node.animations[state][element]['active'] = false;\n                node.animations[state][element]['delay'] = 150;\n            }\n        }\n\n        this.setHideAnimations(node.left);\n        this.setHideAnimations(node.right);\n    }\n\n    setHideTraversalAnimations(node = this.root) {\n        if (node === null) return;\n\n        for (let state in node.animations) {\n            for (let element in node.animations[state]) {\n                if (state === 'initial') {\n                    node.animations[state][element]['active'] = true;\n                    node.animations[state][element]['delay'] = 0;\n                }\n                else {\n                    node.animations[state][element]['active'] = false;\n                    node.animations[state][element]['delay'] = 150;\n                }\n            }\n        }\n\n        this.setHideTraversalAnimations(node.left);\n        this.setHideTraversalAnimations(node.right);\n    }\n\n    setHideMoveAnimations(node = this.root) {\n        if (node === null) return;\n\n        node.moveAnimations['active'] = false;\n        node.moveAnimations['delay'] = 0;\n        node.moveAnimations['css'] = {\n            entering: {},\n            entered:  {},\n            exiting:  {},\n            exited:   {}\n        };\n\n        this.setHideMoveAnimations(node.left);\n        this.setHideMoveAnimations(node.right);\n    }\n\n    setDFSTraversalAnimations(order, node = this.root, delay = 150) {\n        if (node === null) return delay;\n\n        let _delay = node === this.root ? delay : delay + 1000;\n\n        node.animations['visited']['node']['active'] = true;\n        node.animations['visited']['node']['delay'] = _delay + 500;\n        node.animations['visited']['line']['active'] = true;\n        node.animations['visited']['line']['delay'] = _delay;\n\n        if (order === 'Pre-Order') {\n            _delay += 1000;\n            node.animations['success']['node']['active'] = true;\n            node.animations['success']['node']['delay'] = _delay;\n        }\n\n        _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\n\n        if (order === 'In-Order') {\n            _delay += 1000;\n            node.animations['success']['node']['active'] = true;\n            node.animations['success']['node']['delay'] = _delay;\n        }\n\n        _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\n\n        if (order === 'Post-Order') {\n            _delay += 1000;\n            node.animations['success']['node']['active'] = true;\n            node.animations['success']['node']['delay'] = _delay;\n        }\n\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = _delay;\n\n        return _delay;\n    }\n\n    setBFSTraversalAnimations() {\n        let queue = new Queue();\n\n        let delay = 150;\n\n        if (this.root) {\n            queue.push(this.root);\n\n            this.root.animations['visited']['node']['active'] = true;\n            this.root.animations['visited']['node']['delay'] = delay;\n        }\n\n        while ( ! queue.empty() ) {\n            let node = queue.front();\n\n            if (node) {\n                if (node.left) {\n                    queue.push(node.left);\n\n                    delay += 1000;\n                    for (let element in node.left.animations['visited']) {\n                        node.left.animations['visited'][element]['active'] = true;\n                        node.left.animations['visited'][element]['delay'] = delay;\n                    }\n                }\n\n                if (node.right) {\n                    queue.push(node.right);\n\n                    delay += 1000;\n                    for (let element in node.right.animations['visited']) {\n                        node.right.animations['visited'][element]['active'] = true;\n                        node.right.animations['visited'][element]['delay'] = delay;\n                    }\n                }\n                \n                delay += 1000;\n                for (let element in node.animations['success']) {\n                    node.animations['success'][element]['active'] = true;\n                    node.animations['success'][element]['delay'] = delay;\n                }\n            }\n        }\n\n        return delay;\n    }\n\n    setSearchAnimations(node = this.root, delay = 150) {\n        if ( ! this.targetValue || ! node ) return delay;\n        else {\n            let _delay = delay;\n\n            if (this.targetValue === node.value) {\n                node.animations['success']['node']['active'] = true;\n                node.animations['success']['node']['delay'] = delay + 1250;\n            }\n            else if (this.targetValue < node.value)\n                _delay = this.setSearchAnimations(node.left, delay + 1000);\n            else\n                _delay = this.setSearchAnimations(node.right, delay + 1000);\n                \n            node.animations['visited']['node']['active'] = true;\n            node.animations['visited']['node']['delay'] = delay + 500;\n            node.animations['visited']['line']['active'] = true;\n            node.animations['visited']['line']['delay'] = delay;\n\n            return _delay;\n        }\n    }\n\n    setInsertAnimations(node = this.root, delay = 150) {\n        if ( ! this.targetValue || ! node ) return delay;\n        else {\n            let _delay = delay;\n\n            if (this.targetValue === node.value) {\n                this.targetNode = node;\n                return _delay;\n            }\n            else if (this.targetValue < node.value)\n                _delay = this.setInsertAnimations(node.left, delay + 1000);\n            else\n                _delay = this.setInsertAnimations(node.right, delay + 1000);\n                \n            node.animations['visited']['node']['active'] = true;\n            node.animations['visited']['node']['delay'] = delay + 500;\n            node.animations['visited']['line']['active'] = true;\n            node.animations['visited']['line']['delay'] = delay;\n\n            return _delay;\n        }\n    }\n\n    setInsertionCompleteAnimations() {\n        let node = this.targetNode;\n\n        if ( node ) {\n            node.animations['initial']['node']['active'] = true;\n            node.animations['initial']['node']['delay'] = 650;\n            node.animations['initial']['line']['active'] = true;\n            node.animations['initial']['line']['delay'] = 150;\n            node.animations['success']['node']['active'] = true;\n            node.animations['success']['node']['delay'] = 1250;\n        }\n    }\n\n    setRemoveAnimations(node = this.targetNode, delay = 150) {\n        if ( ! this.targetValue || ! node ) return delay;\n        else {    \n            node.animations['visited']['node']['active'] = true;\n            node.animations['visited']['node']['delay'] = delay + 500;\n            node.animations['visited']['line']['active'] = true;\n            node.animations['visited']['line']['delay'] = delay;\n\n            if (this.targetValue === node.value) {\n                node.animations['success']['node']['active'] = false;\n                node.animations['success']['node']['delay'] = delay;\n                node.animations['success']['line']['active'] = false;\n                node.animations['success']['line']['delay'] = delay;\n\n                node.animations['removed']['node']['active'] = true;\n                node.animations['removed']['node']['delay'] = delay + 1500;\n                node.animations['removed']['line']['active'] = true;\n                node.animations['removed']['line']['delay'] = delay + 1000;\n\n                node.animations['initial']['node']['active'] = false;\n                node.animations['initial']['node']['delay'] = delay + 1500;\n                node.animations['initial']['line']['active'] = false;\n                node.animations['initial']['line']['delay'] = delay + 1500;\n\n                this.targetNode = node;\n            }\n            else if (this.targetValue < node.value)\n                return this.setRemoveAnimations(node.left, delay + 1000);\n            else\n                return this.setRemoveAnimations(node.right, delay + 1000);\n\n            return delay;\n        }\n    }\n\n    setMoveSubtreeAnimations() {\n        let node = this.targetNode;\n        let _delay = 0;\n\n        if ( node ) {\n            if ( node.left === null || node.right === null ) {\n                node.animations['initial']['line']['active'] = true;\n                node.animations['initial']['line']['delay'] = 3000;\n    \n                node.animations['visited']['node']['active'] = false;\n                node.animations['visited']['node']['delay'] = 150;\n                node.animations['visited']['line']['active'] = false;\n                node.animations['visited']['line']['delay'] = 150;\n    \n                node.animations['removed']['node']['active'] = false;\n                node.animations['removed']['node']['delay'] = 150;\n                node.animations['removed']['line']['active'] = false;\n                node.animations['removed']['line']['delay'] = 150;\n    \n                node.animations['success']['line']['active'] = true;\n                node.animations['success']['line']['delay'] = 3500;\n\n                if ( node.left === null && node.right === null ) {\n                    node.animations['initial']['line']['active'] = false;\n                    node.animations['initial']['line']['delay'] = 0;\n\n                    node.animations['success']['line']['active'] = false;\n                    node.animations['success']['line']['delay'] = 0;\n\n                    if (\n                        ( document.querySelectorAll('.node-wrapper[node-height=\"1\"]').length === 1 ) && \n                        ( parseInt(document.querySelector('.node-wrapper[node-height=\"1\"]').attributes['node-value'].value) === node.value )\n                    ) {\n                        this.root.moveAnimations['active'] = true;\n                        this.root.moveAnimations['delay'] = 1000;\n                        this.root.moveAnimations['css']['entering'] = {\n                            'width': document.querySelector('.root').offsetWidth + 'px'\n                        };\n                        this.root.moveAnimations['css']['entered'] = {\n                            'width': document.querySelector('.root').offsetWidth / 2 + 'px'\n                        };\n                    }\n                }\n                else {\n                    if ( node.left === null ) {\n                        node.right.animations['initial']['line']['active'] = false;\n                        node.right.animations['initial']['line']['delay'] = 150;\n                        \n                        node.right.moveAnimations['active'] = true;\n                        node.right.moveAnimations['delay'] = 1000;\n                        node.right.moveAnimations['css']['entered'] = {\n                            'width': '100%',\n                            'zIndex': '1000',\n                            'transform': 'translate(-50%, -50px)'\n                        };\n                        \n                        _delay = this.setMoveSubtreeCompleteAnimations(node.right);\n                    }\n                    else if ( node.right === null ) {\n                        node.left.animations['initial']['line']['active'] = false;\n                        node.left.animations['initial']['line']['delay'] = 150;\n                        \n                        node.left.moveAnimations['active'] = true;\n                        node.left.moveAnimations['delay'] = 1000;\n                        node.left.moveAnimations['css']['entered'] = {\n                            'width': '100%',\n                            'zIndex': '1000',\n                            'transform': 'translate(0, -50px)'\n                        };\n        \n                        _delay = this.setMoveSubtreeCompleteAnimations(node.left);\n                    }\n\n                    if (\n                        document.querySelectorAll('.node-wrapper[node-value=\"' + node.value + '\"] .node-wrapper[node-height=\"1\"]').length\n                        === document.querySelectorAll('.node-wrapper[node-height=\"1\"]').length\n                    ) {\n                        this.root.moveAnimations['active'] = true;\n                        this.root.moveAnimations['delay'] = 1000;\n                        this.root.moveAnimations['css']['entering'] = {\n                            'width': document.querySelector('.root').offsetWidth + 'px'\n                        };\n                        this.root.moveAnimations['css']['entered'] = {\n                            'width': document.querySelector('.root').offsetWidth / 2 + 'px'\n                        };\n                    }\n                    \n                    this.targetValue = node.value;\n                }\n\n                this.targetNode = null;\n            }\n            else {\n                let delay = this.setInOrderSuccessorAnimations(node.right);\n\n                delay += 1000;\n\n                node.animations['visited']['node']['active'] = false;\n                node.animations['visited']['node']['delay'] = delay;\n                node.animations['visited']['line']['active'] = false;\n                node.animations['visited']['line']['delay'] = delay;\n\n                node.animations['removed']['node']['active'] = false;\n                node.animations['removed']['node']['delay'] = delay;\n                node.animations['removed']['line']['active'] = false;\n                node.animations['removed']['line']['delay'] = delay;\n\n                delay += 1000;\n\n                node.animations['initial']['node']['active'] = true;\n                node.animations['initial']['node']['delay'] = delay;\n                node.animations['initial']['line']['active'] = true;\n                node.animations['initial']['line']['delay'] = delay + 500;\n\n                delay += 1000;\n\n                node.animations['success']['node']['active'] = true;\n                node.animations['success']['node']['delay'] = delay + 500;\n                node.animations['success']['line']['active'] = true;\n                node.animations['success']['line']['delay'] = delay;\n\n                _delay = delay;\n            }\n        }\n\n        return _delay;\n    }\n\n    setMoveSubtreeCompleteAnimations(node, delay = 4000, first = true) {\n        let _delay = delay;\n\n        if (node) {\n            if (first) {\n                node.animations['success']['node']['active'] = true;\n                node.animations['success']['node']['delay'] = delay;\n            }\n            else {\n                node.animations['success']['node']['active'] = true;\n                node.animations['success']['node']['delay'] = delay;\n                node.animations['success']['line']['active'] = true;\n                node.animations['success']['line']['delay'] = delay;\n            }\n\n            _delay = Math.max(\n                this.setMoveSubtreeCompleteAnimations(node.left, delay + 300, false), \n                this.setMoveSubtreeCompleteAnimations(node.right, delay + 300, false)\n            );\n        }\n\n        return _delay;\n    }\n\n    setInOrderSuccessorAnimations(node, delay = 150) {\n        node.animations['visited']['node']['active'] = true;\n        node.animations['visited']['node']['delay'] = delay + 500;\n        node.animations['visited']['line']['active'] = true;\n        node.animations['visited']['line']['delay'] = delay;\n\n        if ( node.left ) {\n            return this.setInOrderSuccessorAnimations(node.left, delay + 1000);\n        }\n        else {\n            node.animations['success']['node']['active'] = true;\n            node.animations['success']['node']['delay'] = delay + 1500;\n            node.animations['success']['line']['active'] = true;\n            node.animations['success']['line']['delay'] = delay + 1000;\n\n            document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]>.node-value .node-value-text').textContent = node.value;\n\n            this.targetNode = node;\n            this.targetValue = node.value;\n\n            return delay + 1500;\n        }\n    }\n}","/* Taken from Stackoverflow */\nexport function randomIntFromInverval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\n\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\n\nimport './TreeVisualizer.scss';\n\n\nexport default class TreeVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.initialStateOperation = 'Initial';\n\n        this.state = {\n            tree: 'BST',\n            menu_key: 'BST',\n            operation: this.initialStateOperation,\n            tooltips: false,\n            key: null\n        };\n\n        this.performOperation = this.performOperation.bind(this);\n        this.toggleTooltips   = this.toggleTooltips.bind(this);\n        this.changeTree       = this.changeTree.bind(this);\n    }\n\n    performOperation(operation) {\n        this.setState({ operation: operation });\n    }\n\n    toggleTooltips() {\n        this.setState({ tooltips: ! this.state.tooltips });\n    }\n\n    changeTree(tree_key) {\n        if (tree_key !== this.state.tree) {\n            let _this = this;\n            let new_key = new Date().getTime();\n\n            this.setState({ operation: 'Destroy', menu_key: tree_key, key: new_key });\n\n            setTimeout(function() {\n                if ( _this.state.key === new_key ) {\n                    _this.setState({ tree: tree_key });\n                }\n            }, 1500);\n        }\n    }\n\n    Tree() {\n        return (\n            <>\n                { this.state.tree === 'BST' ?\n                    <BinarySearchTree operation = {this.state.operation} tooltips = {this.state.tooltips} />\n                : null }\n            </>\n        );\n    }\n\n    render() {\n        return (\n            <>\n                <NavigationBar visualizer = {this} />\n                \n                { this.Tree() }\n            </>\n        );\n    }\n\n    componentDidUpdate() {\n        if ( this.state.operation !== this.initialStateOperation ) {\n            this.setState({ operation: this.initialStateOperation });\n        }\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TreeVisualizer from './TreeVisualizer/TreeVisualizer.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TreeVisualizer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}