{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport DefaultTree from '../DefaultTree/DefaultTree.jsx';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinarySearchTree extends DefaultTree {\n  constructor(props) {\n    super(props);\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.state = {\n      operation: 'Initial',\n      tooltips: false\n    };\n  }\n\n  generate(elements = 5) {\n    this.reset();\n\n    for (let i = 0; i < elements; ++i) {\n      this.insert(randomIntFromInverval(1, 150));\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value < val) {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          break;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          break;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left');\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n    let classes = ['node-wrapper', pos].join(' ');\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, getCricle('null')), leftChild, rightChild));\n    } else if (node === this.root) {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: true,\n        timeout: 11500 * curr_height,\n        appear: true,\n        classNames: {\n          appearDone: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: {\n          width: Math.pow(2, tree_height - 1) * 70 + 'px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"node-hover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"HOVER\"), getCricle(node.value)), leftChild, rightChild), \"//\"));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: true,\n        timeout: 500 * curr_height,\n        appear: true,\n        classNames: {\n          appearDone: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"node-hover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"HOVER\"), getCricle(node.value)), leftChild, rightChild, getConnectingLine(pos))));\n    }\n  }\n\n  componentDidMount() {\n    this.generate();\n    this.setState({\n      operation: 'Generate'\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, this.Tree()));\n  }\n\n}\n\nfunction getCricle(val) {\n  return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n    className: \"circle node-value-circle\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"text\", {\n    className: \"text node-value-text\",\n    x: \"50%\",\n    y: \"50%\",\n    fill: \"black\",\n    textAnchor: \"middle\",\n    dominantBaseline: \"central\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, val), React.createElement(\"circle\", {\n    className: \"circle node-circle\",\n    r: \"24\",\n    cx: \"25\",\n    cy: \"25\",\n    stroke: \"black\",\n    fill: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  })));\n}\n\nfunction getConnectingLine(pos) {\n  if (pos === 'left') {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"line node-line\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"line\", {\n      className: \"line\",\n      x1: \"0\",\n      y1: \"50\",\n      x2: \"100%\",\n      y2: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })));\n  } else if (pos === 'right') {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"line node-line\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"line\", {\n      className: \"line\",\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"100%\",\n      y2: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })));\n  } else {\n    return null;\n  }\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","CSSTransition","DefaultTree","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","BinarySearchTree","props","name","key","root","state","operation","tooltips","generate","elements","reset","i","insert","height","node","Math","max","curr","getScaleFactor","scale_factor","window","innerWidth","pow","Tree","tree_height","curr_height","pos","leftChild","rightChild","classes","join","getCricle","appearDone","width","getConnectingLine","componentDidMount","setState","render","transform"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nimport DefaultTree from '../DefaultTree/DefaultTree.jsx'\r\n\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends DefaultTree {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.state = {\r\n            operation: 'Initial',\r\n            tooltips: false\r\n        };\r\n    }\r\n\r\n    generate(elements = 5) {\r\n        this.reset();\r\n        \r\n        for (let i = 0; i < elements; ++i) {\r\n            this.insert( randomIntFromInverval(1, 150) );\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value < val) {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    break;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    break;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left' );\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        let classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    \r\n                        <div\r\n                            className={classes}\r\n                            node-value='null'\r\n                            node-layer={tree_height - curr_height}>\r\n\r\n                                <div className='node-value'>\r\n                                    {getCricle('null')}\r\n                                </div>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n                        </div>\r\n                </>\r\n            );\r\n        }\r\n        else if ( node === this.root ) {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={true}\r\n                        timeout={11500 * curr_height}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible'\r\n                        }}>\r\n                        <div\r\n                            className={classes}\r\n                            node-value={node.value}\r\n                            node-layer={tree_height - curr_height}\r\n                            style={ {width: Math.pow(2, tree_height - 1) * 70 + 'px'} }>\r\n\r\n                                <div className='node-value'>\r\n                                    <span className='node-hover'>HOVER</span>\r\n                                    {getCricle(node.value)}\r\n                                </div>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n\r\n                        </div>\r\n                    //</CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={true}\r\n                        timeout={500 * curr_height}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible'\r\n                        }}>\r\n                        <div\r\n                            className={classes}\r\n                            node-value={node.value}\r\n                            node-layer={tree_height - curr_height}>\r\n\r\n                                <div className='node-value'>\r\n                                    <span className='node-hover'>HOVER</span>\r\n                                    {getCricle(node.value)}\r\n                                </div>\r\n                                \r\n                                {leftChild}\r\n                                {rightChild}\r\n                                {getConnectingLine(pos)}\r\n                                \r\n                        </div>\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generate();\r\n        this.setState({ operation: 'Generate' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getCricle(val) {\r\n    return (\r\n        <>\r\n            <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n                <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                    {val}\r\n                </text>\r\n                <circle className='circle node-circle' r='24' cx='25' cy='25' stroke='black' fill='none' />\r\n            </svg>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction getConnectingLine(pos) {\r\n    if (pos === 'left') {\r\n        return (\r\n            <>\r\n                <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                    <line className='line' x1='0' y1='50' x2='100%' y2='0'></line>\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n    else if (pos === 'right') {\r\n        return (\r\n            <>\r\n                <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                    <line className='line' x1='0' y1='0' x2='100%' y2='50'></line>\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}