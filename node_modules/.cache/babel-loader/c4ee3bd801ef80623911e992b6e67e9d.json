{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport InputPrompt from '../../Additional/InputPrompt/InputPrompt.jsx';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinarySearchTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.state = {\n      operation: this.props.operation,\n      input: false\n    };\n  }\n\n  componentDidMount() {\n    this.generate();\n    this.setState({\n      operation: 'Generate'\n    });\n  }\n\n  static getDerivedStateFromProps(newProps, prevState) {\n    console.log(\"BST::getDerivedStateFromProps: \" + newProps.operation);\n\n    if (prevState.operation !== newProps.operation) {\n      return {\n        operation: newProps.operation\n      };\n    } else {\n      return null;\n    }\n  }\n\n  generate(elements = 5) {\n    this.reset();\n    this.insertNumElements(elements);\n  }\n\n  insertNumElements(elements) {\n    for (let i = 0; i < elements; ++i) {\n      let val = randomIntFromInverval(1, 150);\n\n      if (this.insert(val)) {\n        if (this.height() > 5) {\n          this.root = this.remove(val);\n          --i;\n        }\n      } else {\n        --i;\n      }\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value === val) {\n        //tree contains key already\n        return false;\n      } else if (curr.value < val) {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  remove(val, node = this.root) {\n    if (node === null) return node;\n\n    if (val < node.value) {\n      node.left = this.remove(val, node.left);\n    } else if (val > node.value) {\n      node.right = this.remove(val, node.right);\n    } else {\n      if (node.left === null) {\n        return node.right;\n      } else if (node.right === null) {\n        return node.left;\n      } else {\n        node.value = this.inOrderSuccessor(node.right);\n        node.right = this.remove(node.value, node.right);\n      }\n    }\n\n    return node;\n  }\n\n  inOrderSuccessor(node) {\n    if (node === null) {\n      return node;\n    } else if (node.left !== null) {\n      return this.inOrderSuccessor(node.left);\n    } else {\n      return node.value;\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root', time = 300) {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left', time + 500);\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right', time + 700);\n    const classes = ['node-wrapper', pos].join(' ');\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, getCricle('null')), leftChild, rightChild));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: true,\n        timeout: time,\n        appear: true,\n        classNames: {\n          appearDone: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: node === this.root ? {\n          width: Math.pow(2, tree_height - 1) * 70 + 'px'\n        } : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"node-hover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"search\",\n        onClick: () => this.searchForNode(node.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        className: \"trash\",\n        onClick: () => this.trashNode(node.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-trash\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }))), getCricle(node.value)), leftChild, rightChild, getConnectingLine(pos))));\n    }\n  }\n\n  render() {\n    console.log(\"BST::render: \" + this.state.operation);\n    return React.createElement(React.Fragment, null, this.state.input ? React.createElement(InputPrompt, {\n      tree: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, this.Tree()));\n  }\n\n  componentDidUpdate() {\n    console.log(\"BST::componentDidUpdate: \" + this.state.operation);\n\n    if (this.state.operation === 'Generate') {\n      console.log('nice');\n      this.setState({\n        operation: 'Reset'\n      });\n    }\n  }\n\n}\n\nfunction getCricle(val) {\n  return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n    className: \"circle node-value-circle\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(\"text\", {\n    className: \"text node-value-text\",\n    x: \"50%\",\n    y: \"50%\",\n    fill: \"black\",\n    textAnchor: \"middle\",\n    dominantBaseline: \"central\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, val), React.createElement(\"circle\", {\n    className: \"circle node-circle\",\n    r: \"24\",\n    cx: \"25\",\n    cy: \"25\",\n    stroke: \"black\",\n    fill: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  })));\n}\n\nfunction getConnectingLine(pos) {\n  if (pos === 'left') {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"line node-line\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"line\", {\n      className: \"line\",\n      x1: \"0\",\n      y1: \"50\",\n      x2: \"100%\",\n      y2: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    })));\n  } else if (pos === 'right') {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"line node-line\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"line\", {\n      className: \"line\",\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"100%\",\n      y2: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    })));\n  } else {\n    return null;\n  }\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","CSSTransition","InputPrompt","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","BinarySearchTree","Component","props","name","key","root","state","operation","input","componentDidMount","generate","setState","getDerivedStateFromProps","newProps","prevState","console","log","elements","reset","insertNumElements","i","insert","height","remove","node","Math","max","curr","inOrderSuccessor","getScaleFactor","scale_factor","window","innerWidth","pow","Tree","tree_height","curr_height","pos","time","leftChild","rightChild","classes","join","getCricle","appearDone","width","searchForNode","trashNode","getConnectingLine","render","transform","componentDidUpdate"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nimport InputPrompt from '../../Additional/InputPrompt/InputPrompt.jsx'\r\n\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.state = {\r\n            operation: this.props.operation,\r\n            input: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.generate();\r\n        this.setState({ operation: 'Generate' });\r\n    }\r\n\r\n    static getDerivedStateFromProps(newProps, prevState) {\r\n        console.log(\"BST::getDerivedStateFromProps: \" + newProps.operation);\r\n        if ( prevState.operation !== newProps.operation ) {\r\n            return { operation: newProps.operation };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    generate(elements = 5) {\r\n        this.reset();\r\n        this.insertNumElements(elements);\r\n    }\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node === null ) {\r\n            return node;\r\n        }\r\n        else if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root', time = 300) {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left', time + 500 );\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right', time + 700 );\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className='node-value'>\r\n                                {getCricle('null')}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={true}\r\n                        timeout={time}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible'\r\n                        }}>\r\n\r\n                        <div\r\n                            className={classes}\r\n                            node-value={node.value}\r\n                            node-layer={tree_height - curr_height}\r\n                            style={ ( node === this.root ) ? {width: Math.pow(2, tree_height - 1) * 70 + 'px'} : null }>\r\n\r\n                                <div className='node-value'>\r\n                                    \r\n                                    <span className='node-hover'>\r\n                                        <span className='search' onClick={() => this.searchForNode(node.value)}>\r\n                                            <i className=\"fas fa-search\" />\r\n                                        </span>\r\n\r\n                                        <span className='trash' onClick={() => this.trashNode(node.value)}>\r\n                                            <i className=\"fas fa-trash\" />\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    {getCricle(node.value)}\r\n\r\n                                </div>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n\r\n                                {getConnectingLine(pos)}\r\n\r\n                        </div>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(\"BST::render: \" + this.state.operation);\r\n        return (\r\n            <>\r\n                { this.state.input ? <InputPrompt tree = {this} /> : null }\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n        if ( this.state.operation === 'Generate' ) {\r\n            console.log('nice');\r\n            this.setState({operation: 'Reset'});\r\n        }\r\n    }\r\n}\r\n\r\nfunction getCricle(val) {\r\n    return (\r\n        <>\r\n            <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n                <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                    {val}\r\n                </text>\r\n                <circle className='circle node-circle' r='24' cx='25' cy='25' stroke='black' fill='none' />\r\n            </svg>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction getConnectingLine(pos) {\r\n    if (pos === 'left') {\r\n        return (\r\n            <>\r\n                <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                    <line className='line' x1='0' y1='50' x2='100%' y2='0'></line>\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n    else if (pos === 'right') {\r\n        return (\r\n            <>\r\n                <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                    <line className='line' x1='0' y1='0' x2='100%' y2='50'></line>\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}