{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\tree-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\tree-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\tree-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\tree-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\tree-visualizer\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import getHeaderLogo from'../Additional/headerLogo.jsx';import'../../../node_modules/font-awesome/css/font-awesome.min.css';import'./NavigationBar.scss';var NavigationBar=/*#__PURE__*/function(_React$Component){_inherits(NavigationBar,_React$Component);function NavigationBar(props){var _this;_classCallCheck(this,NavigationBar);_this=_possibleConstructorReturn(this,_getPrototypeOf(NavigationBar).call(this,props));_this.visualizer=_this.props.visualizer;_this.trees={BST:{name:'Binary Search Tree',operations:['Insert','Remove','Search','Traversals']},AVL:{name:'AVL Tree',operations:['Insert','Remove','Search']},RBT:{name:'Red-Black Tree',operations:['Insert','Remove','Search']},BHP:{name:'Binary Heap',operations:['Insert','Top']}};_this.traversals=['Pre-Order','In-Order','Post-Order','Level Order'];_this.state={active_tree:_this.visualizer.state.menu_key};return _this;}_createClass(NavigationBar,[{key:\"render\",value:function render(){var _this2=this;return React.createElement(React.Fragment,null,React.createElement(\"div\",{id:\"navbar-wrapper\"},React.createElement(\"div\",{className:\"navbar-logo\"},React.createElement(\"a\",{href:\"/\"},getHeaderLogo())),React.createElement(\"div\",{id:\"tree-dropdown\",className:\"dropdown\"},React.createElement(\"a\",{className:\"dropdown-toggle\",href:\"# \"},this.state.active_tree?this.trees[this.state.active_tree]['name']:'Select..',React.createElement(\"i\",{className:\"fa fa-caret-down\"})),React.createElement(\"ul\",{className:\"dropdown-menu\"},Object.keys(this.trees).map(function(key,idx){return React.createElement(\"li\",{className:\"dropdown-menu-option\",key:idx},React.createElement(\"a\",{href:\"# \",onClick:function onClick(){return _this2.visualizer.changeTree(key);}},_this2.trees[key]['name']));}))),this.state.active_tree&&React.createElement(React.Fragment,null,React.createElement(\"div\",{id:\"operations-dropdown\",className:\"dropdown\"},React.createElement(\"a\",{className:\"dropdown-toggle\",href:\"# \"},\"Operations\",React.createElement(\"i\",{className:\"fa fa-caret-down\"})),React.createElement(\"ul\",{className:\"dropdown-menu\"},this.trees[this.state.active_tree]['operations'].map(function(operation,op_idx){return operation==='Traversals'?React.createElement(\"li\",{id:\"traversals-submenu\",className:\"dropdown-menu-option submenu\",key:op_idx},React.createElement(\"a\",{className:\"submenu-toggle\",href:\"# \"},operation,React.createElement(\"i\",{className:\"fa fa-caret-down\"})),React.createElement(\"ul\",{className:\"dropdown-menu submenu-dropdown\"},_this2.traversals.map(function(traversal,tr_idx){return React.createElement(\"li\",{className:\"dropdown-menu-option\",key:tr_idx},React.createElement(\"a\",{href:\"# \",onClick:function onClick(){return _this2.visualizer.performOperation(traversal);}},traversal));}))):React.createElement(\"li\",{className:\"dropdown-menu-option\",key:op_idx},React.createElement(\"a\",{href:\"# \",onClick:function onClick(){return _this2.visualizer.performOperation(operation);}},operation));}))),React.createElement(\"div\",{id:\"generate-tree\",className:\"navbar-button\"},React.createElement(\"button\",{onClick:function onClick(){return _this2.visualizer.performOperation('Generate');}},\"Generate\")),React.createElement(\"div\",{id:\"reset-tree\",className:\"navbar-button\"},React.createElement(\"button\",{onClick:function onClick(){return _this2.visualizer.performOperation('Reset');}},\"Reset\")),React.createElement(\"div\",{id:\"tooltips-toggle\"},React.createElement(\"span\",{className:\"tooltips-text\"},\"Tooltips:\"),React.createElement(\"label\",{className:\"switch\"},React.createElement(\"input\",{type:\"checkbox\",onClick:this.visualizer.toggleTooltips}),React.createElement(\"span\",{className:\"slider round\"}))),React.createElement(\"div\",{id:\"about-information\"},React.createElement(\"div\",{className:\"info-icon-wrapper\"},React.createElement(\"i\",{className:\"fas fa-info\"})),React.createElement(\"div\",{className:\"about-dialogue\"},React.createElement(\"p\",null,\"Project repository can be found \",React.createElement(\"a\",{href:\"https://github.com/jkelaty/tree-visualizer\",target:\"_blank\",rel:\"noopener noreferrer\"},\"here\")),React.createElement(\"p\",null,\"Created by Jonathan Kelaty\"))))));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(newProps,state){if(state.active_tree!==newProps.visualizer.state.menu_key){return{active_tree:newProps.visualizer.state.menu_key};}else{return null;}}}]);return NavigationBar;}(React.Component);export{NavigationBar as default};","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/tree-visualizer/src/TreeVisualizer/NavigationBar/NavigationBar.jsx"],"names":["React","getHeaderLogo","NavigationBar","props","visualizer","trees","BST","name","operations","AVL","RBT","BHP","traversals","state","active_tree","menu_key","Object","keys","map","key","idx","changeTree","operation","op_idx","traversal","tr_idx","performOperation","toggleTooltips","newProps","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport getHeaderLogo from '../Additional/headerLogo.jsx'\r\n\r\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './NavigationBar.scss';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.visualizer = this.props.visualizer;\r\n        \r\n        this.trees = {\r\n            BST : {\r\n                name : 'Binary Search Tree',\r\n                operations : [\r\n                    'Insert',\r\n                    'Remove',\r\n                    'Search',\r\n                    'Traversals'\r\n                ]\r\n            },\r\n            AVL : {\r\n                name : 'AVL Tree',\r\n                operations : [\r\n                    'Insert',\r\n                    'Remove',\r\n                    'Search'\r\n                ]\r\n            },\r\n            RBT : {\r\n                name : 'Red-Black Tree',\r\n                operations : [\r\n                    'Insert',\r\n                    'Remove',\r\n                    'Search'\r\n                ]\r\n            },\r\n            BHP : {\r\n                name : 'Binary Heap',\r\n                operations : [\r\n                    'Insert',\r\n                    'Top'\r\n                ]\r\n            },\r\n        };\r\n\r\n        this.traversals = [\r\n            'Pre-Order',\r\n            'In-Order',\r\n            'Post-Order',\r\n            'Level Order'\r\n        ];\r\n\r\n        this.state = {\r\n            active_tree: this.visualizer.state.menu_key\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(newProps, state) {\r\n        if ( state.active_tree !== newProps.visualizer.state.menu_key ) {\r\n            return { active_tree: newProps.visualizer.state.menu_key };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id='navbar-wrapper'>\r\n\r\n                    <div className='navbar-logo'>\r\n                        <a href='/'>\r\n                            {getHeaderLogo()}\r\n                        </a>\r\n                    </div>\r\n                    \r\n                    <div id='tree-dropdown' className='dropdown'>\r\n                        <a\r\n                            className='dropdown-toggle'\r\n                            href='# '>\r\n                            { this.state.active_tree ? this.trees[ this.state.active_tree ][ 'name' ] : 'Select..' }\r\n                            <i className='fa fa-caret-down'></i>\r\n                        </a>\r\n\r\n                        <ul className='dropdown-menu'>\r\n                            {Object.keys(this.trees).map((key, idx) => (\r\n                                <li className='dropdown-menu-option' key={idx}>\r\n                                    <a\r\n                                        href='# '\r\n                                        onClick={() => this.visualizer.changeTree(key)}>\r\n                                        {this.trees[ key ][ 'name' ]}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    \r\n                    { this.state.active_tree && (\r\n                        <>\r\n                            <div id='operations-dropdown' className='dropdown'>\r\n                                <a\r\n                                    className='dropdown-toggle'\r\n                                    href='# '>\r\n                                    Operations\r\n                                    <i className='fa fa-caret-down' />\r\n                                </a>\r\n\r\n                                <ul className='dropdown-menu'>\r\n                                    {this.trees[ this.state.active_tree ][ 'operations' ].map((operation, op_idx) => (\r\n\r\n                                        (operation === 'Traversals') ? (\r\n                                            <li id='traversals-submenu' className='dropdown-menu-option submenu' key={op_idx}>\r\n                                                <a\r\n                                                    className='submenu-toggle'\r\n                                                    href='# '>\r\n                                                    {operation}\r\n                                                    <i className='fa fa-caret-down' />\r\n                                                </a>\r\n\r\n                                                <ul className='dropdown-menu submenu-dropdown'>\r\n                                                    {this.traversals.map((traversal, tr_idx) => (\r\n                                                        <li className='dropdown-menu-option' key={tr_idx}>\r\n                                                            <a\r\n                                                                href='# '\r\n                                                                onClick={() => this.visualizer.performOperation(traversal)}>\r\n                                                                {traversal}\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            </li>\r\n                                        ) : (\r\n                                            <li className='dropdown-menu-option' key={op_idx}>\r\n                                                <a\r\n                                                    href='# '\r\n                                                    onClick={() => this.visualizer.performOperation(operation)}>\r\n                                                    {operation}\r\n                                                </a>\r\n                                            </li>\r\n                                        )\r\n\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        \r\n                            <div id='generate-tree' className='navbar-button'>\r\n                                <button\r\n                                    onClick={() => this.visualizer.performOperation('Generate')}>\r\n                                    Generate\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id='reset-tree' className='navbar-button'>\r\n                                <button\r\n                                    onClick={() => this.visualizer.performOperation('Reset')}>\r\n                                    Reset\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id='tooltips-toggle'>\r\n                                <span className='tooltips-text'>Tooltips:</span>\r\n                                <label className='switch'>\r\n                                    <input type='checkbox' onClick={this.visualizer.toggleTooltips} />\r\n                                    <span className='slider round' />\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div id=\"about-information\">\r\n                                <div className=\"info-icon-wrapper\">\r\n                                    <i className=\"fas fa-info\" />\r\n                                </div>\r\n\r\n                                <div className=\"about-dialogue\">\r\n                                    <p>Project repository can be found <a href='https://github.com/jkelaty/tree-visualizer' target='_blank' rel=\"noopener noreferrer\">here</a>\r\n                                    </p>\r\n                                    <p>Created by Jonathan Kelaty</p>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}