{"ast":null,"code":"import Queue from './Queue.jsx';\n\nclass BinaryNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinaryTree {\n  constructor() {\n    this.root = null;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinaryNode(val);\n      return;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (val < curr.value) {\n        if (curr.left == null) {\n          curr.left = new BinaryNode(val);\n          return;\n        }\n\n        curr = curr.left;\n      } else {\n        if (curr.right == null) {\n          curr.right = new BinaryNode(val);\n          return;\n        }\n\n        curr = curr.right;\n      }\n    }\n  }\n\n  levelOrder() {\n    const array = [];\n    let queue = new Queue();\n    let layer_size = 1;\n    let layer_curr = 0;\n    let layer_temp = [];\n    queue.push(this.root);\n\n    while (!queue.empty()) {\n      let curr = queue.front();\n      array.push(curr);\n    }\n\n    return array;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/BinaryTree.jsx"],"names":["Queue","BinaryNode","constructor","val","value","left","right","BinaryTree","root","insert","curr","levelOrder","array","queue","layer_size","layer_curr","layer_temp","push","empty","front"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKC,KAAL,GAAaD,GAAb;AACA,SAAKE,IAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,IAAb;AACH;;AALY;;AAQjB,eAAe,MAAMC,UAAN,CAAiB;AAC5BL,EAAAA,WAAW,GAAG;AACV,SAAKM,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,MAAM,CAACN,GAAD,EAAM;AACR,QAAI,KAAKK,IAAL,IAAa,IAAjB,EAAuB;AACnB,WAAKA,IAAL,GAAY,IAAIP,UAAJ,CAAeE,GAAf,CAAZ;AACA;AACH;;AAED,QAAIO,IAAI,GAAG,KAAKF,IAAhB;;AAEA,WAAO,IAAP,EAAa;AACT,UAAIL,GAAG,GAAGO,IAAI,CAACN,KAAf,EAAsB;AAClB,YAAGM,IAAI,CAACL,IAAL,IAAa,IAAhB,EAAsB;AAClBK,UAAAA,IAAI,CAACL,IAAL,GAAY,IAAIJ,UAAJ,CAAeE,GAAf,CAAZ;AACA;AACH;;AACDO,QAAAA,IAAI,GAAGA,IAAI,CAACL,IAAZ;AACH,OAND,MAOK;AACD,YAAGK,IAAI,CAACJ,KAAL,IAAc,IAAjB,EAAuB;AACnBI,UAAAA,IAAI,CAACJ,KAAL,GAAa,IAAIL,UAAJ,CAAeE,GAAf,CAAb;AACA;AACH;;AACDO,QAAAA,IAAI,GAAGA,IAAI,CAACJ,KAAZ;AACH;AACJ;AACJ;;AAEDK,EAAAA,UAAU,GAAG;AACT,UAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,KAAK,GAAG,IAAIb,KAAJ,EAAZ;AAEA,QAAIc,UAAU,GAAG,CAAjB;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,UAAU,GAAG,EAAjB;AAEAH,IAAAA,KAAK,CAACI,IAAN,CAAW,KAAKT,IAAhB;;AAEA,WAAO,CAACK,KAAK,CAACK,KAAN,EAAR,EAAwB;AACpB,UAAIR,IAAI,GAAGG,KAAK,CAACM,KAAN,EAAX;AACAP,MAAAA,KAAK,CAACK,IAAN,CAAWP,IAAX;AAEH;;AAED,WAAOE,KAAP;AACH;;AAhD2B","sourcesContent":["import Queue from './Queue.jsx'\r\n\r\nclass BinaryNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinaryTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinaryNode(val);\r\n            return;\r\n        }\r\n\r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (val < curr.value) {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinaryNode(val);\r\n                    return;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n            else {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinaryNode(val);\r\n                    return;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    levelOrder() {\r\n        const array = [];\r\n        let queue = new Queue();\r\n\r\n        let layer_size = 1;\r\n        let layer_curr = 0;\r\n        let layer_temp = [];\r\n\r\n        queue.push(this.root);\r\n\r\n        while( !queue.empty() ) {\r\n            let curr = queue.front();\r\n            array.push(curr);\r\n            \r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}