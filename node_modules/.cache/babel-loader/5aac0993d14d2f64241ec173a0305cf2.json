{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport $ from 'jquery';\nimport NavigationBar from './NavigationBar/NavigationBar.jsx';\nimport Tooltips from './Tooltips/Tooltips.jsx';\nimport DefaultTree from './Trees/DefaultTree/DefaultTree.jsx';\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx';\nimport './TreeVisualizer.scss';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: 'BST',\n      operation: 'Initial',\n      tooltips: false\n    };\n    this.performOperation = this.performOperation.bind(this);\n    this.toggleTooltips = this.toggleTooltips.bind(this);\n    this.changeTree = this.changeTree.bind(this);\n  }\n\n  componentDidMount() {\n    let _this = this;\n\n    $(document).on('Render', '.tree', function (e, operation) {\n      _this.state.tree.performOperation(operation);\n\n      _this.setState({\n        operation: operation\n      });\n    });\n  }\n\n  performOperation(operation) {\n    //$('#' + this.state.tree.name).trigger('preRender', operation);\n    switch (operation) {\n      case 'Generate':\n        this.state.tree.generate();\n        this.setState({\n          operation: operation\n        });\n        break;\n\n      case 'Reset':\n        this.state.tree.reset();\n        this.setState({\n          operation: operation\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  toggleTooltips() {\n    this.setState({\n      tooltips: !this.state.tooltips\n    });\n  }\n\n  changeTree(tree_key) {}\n\n  Tree() {\n    return React.createElement(React.Fragment, null, this.state.tree === 'DEF' ? React.createElement(DefaultTree, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }) : this.state.tree === 'DEF' ? React.createElement(BinarySearchTree, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      id: this.state.tree.name,\n      className: \"tree\",\n      style: {\n        transform: this.state.tree.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.state.tree.Tree()));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(NavigationBar, {\n      visualizer: this,\n      key: this.state.tree.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), this.Tree(), React.createElement(Tooltips, {\n      active: this.state.tooltips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }\n\n  componentDidUpdate() {//$('#' + this.state.tree.name).trigger('postRender', [ this.state.operation ]);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","$","NavigationBar","Tooltips","DefaultTree","BinarySearchTree","TreeVisualizer","Component","constructor","props","state","tree","operation","tooltips","performOperation","bind","toggleTooltips","changeTree","componentDidMount","_this","document","on","e","setState","generate","reset","tree_key","Tree","name","transform","getScaleFactor","render","key","componentDidUpdate"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery'\r\n\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\nimport Tooltips from './Tooltips/Tooltips.jsx'\r\n\r\nimport DefaultTree from './Trees/DefaultTree/DefaultTree.jsx'\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\n\r\nimport './TreeVisualizer.scss';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: 'BST',\r\n            operation: 'Initial',\r\n            tooltips: false\r\n        };\r\n\r\n        this.performOperation = this.performOperation.bind(this);\r\n        this.toggleTooltips   = this.toggleTooltips.bind(this);\r\n        this.changeTree       = this.changeTree.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let _this = this;\r\n\r\n        $(document).on('Render', '.tree', function(e, operation) {\r\n            _this.state.tree.performOperation(operation);\r\n            _this.setState({ operation: operation });\r\n        });\r\n    }\r\n\r\n    performOperation(operation) {\r\n        //$('#' + this.state.tree.name).trigger('preRender', operation);\r\n\r\n\r\n        switch ( operation ) {\r\n            case 'Generate':\r\n                this.state.tree.generate();\r\n                this.setState({ operation: operation });\r\n                break;\r\n            case 'Reset':\r\n                this.state.tree.reset();\r\n                this.setState({ operation: operation });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    toggleTooltips() {\r\n        this.setState({ tooltips: ! this.state.tooltips });\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n    }\r\n\r\n    Tree() {\r\n        return (\r\n            <>\r\n\r\n                { this.state.tree === 'DEF' ?\r\n                    <DefaultTree />\r\n                : this.state.tree === 'DEF' ?\r\n                    <BinarySearchTree />\r\n                : null }\r\n\r\n                <div\r\n                    id={ this.state.tree.name }\r\n                    className='tree'\r\n                    style={ {transform: this.state.tree.getScaleFactor()} }>\r\n\r\n                    { this.state.tree.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} key = {this.state.tree.key} />\r\n                \r\n                { this.Tree() }\r\n\r\n                <Tooltips active = {this.state.tooltips} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //$('#' + this.state.tree.name).trigger('postRender', [ this.state.operation ]);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}