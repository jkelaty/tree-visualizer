{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport NavigationBar from './NavigationBar/NavigationBar.jsx';\nimport Tooltips from './Tooltips/Tooltips.jsx';\nimport DefaultTree from './Trees/DefaultTree/DefaultTree.jsx';\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx';\nimport './TreeVisualizer.scss';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: 'BST',\n      operation: 'Initial',\n      tooltips: false\n    };\n    this.performOperation = this.performOperation.bind(this);\n    this.toggleTooltips = this.toggleTooltips.bind(this);\n    this.changeTree = this.changeTree.bind(this);\n  }\n\n  componentDidMount() {}\n\n  performOperation(operation) {\n    switch (operation) {\n      case 'Generate':\n        this.setState({\n          operation: operation\n        });\n        break;\n\n      case 'Reset':\n        this.setState({\n          operation: operation\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  toggleTooltips() {\n    this.setState({\n      tooltips: !this.state.tooltips\n    });\n  }\n\n  changeTree(tree_key) {\n    //this.setState({ operation: 'reset' });\n    this.setState({\n      tree: tree_key\n    });\n  }\n\n  Tree() {\n    return React.createElement(React.Fragment, null, this.state.tree === 'DEF' ? React.createElement(DefaultTree, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }) : this.state.tree === 'BST' ? React.createElement(BinarySearchTree, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }) : null);\n    /*<div\r\n        id={ this.state.tree.name }\r\n        className='tree'\r\n        style={ {transform: this.state.tree.getScaleFactor()} }>\r\n    \r\n        { this.state.tree.Tree() }\r\n    \r\n    </div>*/\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(NavigationBar, {\n      visualizer: this,\n      key: this.state.tree,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), this.Tree(), React.createElement(Tooltips, {\n      active: this.state.tooltips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n  componentDidUpdate() {}\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","NavigationBar","Tooltips","DefaultTree","BinarySearchTree","TreeVisualizer","Component","constructor","props","state","tree","operation","tooltips","performOperation","bind","toggleTooltips","changeTree","componentDidMount","setState","tree_key","Tree","render","componentDidUpdate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,gBAAP,MAA6B,+CAA7B;AAEA,OAAO,uBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BL,KAAK,CAACM,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,KADG;AAETC,MAAAA,SAAS,EAAE,SAFF;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAMA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,cAAL,GAAwB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAxB;AACA,SAAKE,UAAL,GAAwB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAxB;AACH;;AAEDG,EAAAA,iBAAiB,GAAG,CACnB;;AAEDJ,EAAAA,gBAAgB,CAACF,SAAD,EAAY;AACxB,YAASA,SAAT;AACI,WAAK,UAAL;AACI,aAAKO,QAAL,CAAc;AAAEP,UAAAA,SAAS,EAAEA;AAAb,SAAd;AACA;;AACJ,WAAK,OAAL;AACI,aAAKO,QAAL,CAAc;AAAEP,UAAAA,SAAS,EAAEA;AAAb,SAAd;AACA;;AACJ;AACI;AARR;AAUH;;AAEDI,EAAAA,cAAc,GAAG;AACb,SAAKG,QAAL,CAAc;AAAEN,MAAAA,QAAQ,EAAE,CAAE,KAAKH,KAAL,CAAWG;AAAzB,KAAd;AACH;;AAEDI,EAAAA,UAAU,CAACG,QAAD,EAAW;AACjB;AACA,SAAKD,QAAL,CAAc;AAAER,MAAAA,IAAI,EAAES;AAAR,KAAd;AACH;;AAEDC,EAAAA,IAAI,GAAG;AACH,WACI,0CACM,KAAKX,KAAL,CAAWC,IAAX,KAAoB,KAApB,GACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAEA,KAAKD,KAAL,CAAWC,IAAX,KAAoB,KAApB,GACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAEA,IALN,CADJ;AAYR;;;;;;;;AAQK;;AAEDW,EAAAA,MAAM,GAAG;AACL,WACI,0CACI,oBAAC,aAAD;AAAe,MAAA,UAAU,EAAI,IAA7B;AAAmC,MAAA,GAAG,EAAI,KAAKZ,KAAL,CAAWC,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGM,KAAKU,IAAL,EAHN,EAKI,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAI,KAAKX,KAAL,CAAWG,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAEDU,EAAAA,kBAAkB,GAAG,CACpB;;AA5EuD","sourcesContent":["import React from 'react';\r\n\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\nimport Tooltips from './Tooltips/Tooltips.jsx'\r\n\r\nimport DefaultTree from './Trees/DefaultTree/DefaultTree.jsx'\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\n\r\nimport './TreeVisualizer.scss';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: 'BST',\r\n            operation: 'Initial',\r\n            tooltips: false\r\n        };\r\n\r\n        this.performOperation = this.performOperation.bind(this);\r\n        this.toggleTooltips   = this.toggleTooltips.bind(this);\r\n        this.changeTree       = this.changeTree.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    performOperation(operation) {\r\n        switch ( operation ) {\r\n            case 'Generate':\r\n                this.setState({ operation: operation });\r\n                break;\r\n            case 'Reset':\r\n                this.setState({ operation: operation });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    toggleTooltips() {\r\n        this.setState({ tooltips: ! this.state.tooltips });\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        //this.setState({ operation: 'reset' });\r\n        this.setState({ tree: tree_key });\r\n    }\r\n\r\n    Tree() {\r\n        return (\r\n            <>\r\n                { this.state.tree === 'DEF' ?\r\n                    <DefaultTree />\r\n                : this.state.tree === 'BST' ?\r\n                    <BinarySearchTree />\r\n                : null }\r\n            </>\r\n        );\r\n\r\n        \r\n\r\n/*<div\r\n    id={ this.state.tree.name }\r\n    className='tree'\r\n    style={ {transform: this.state.tree.getScaleFactor()} }>\r\n\r\n    { this.state.tree.Tree() }\r\n\r\n</div>*/\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} key = {this.state.tree} />\r\n                \r\n                { this.Tree() }\r\n\r\n                <Tooltips active = {this.state.tooltips} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}