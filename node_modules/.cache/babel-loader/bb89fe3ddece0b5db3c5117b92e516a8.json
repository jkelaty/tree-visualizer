{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport NavigationBar from './NavigationBar/NavigationBar.jsx';\nimport Tooltips from './Tooltips/Tooltips.jsx';\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx';\nimport './TreeVisualizer.scss';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.state = {\n      tree: 'BST',\n      menu_key: 'BST',\n      operation: this.initialStateOperation,\n      tooltips: false\n    };\n    this.performOperation = this.performOperation.bind(this);\n    this.toggleTooltips = this.toggleTooltips.bind(this);\n    this.changeTree = this.changeTree.bind(this);\n  }\n\n  performOperation(operation) {\n    this.setState({\n      operation: operation\n    });\n  }\n\n  toggleTooltips() {\n    this.setState({\n      tooltips: !this.state.tooltips\n    });\n  }\n\n  changeTree(tree_key) {\n    /* To-Do\r\n     * Step 1. reset tree and change menu key\r\n     * Step 2. change tree key\r\n     */\n    this.setState({\n      menu_key: tree_key\n    }); // Step 0.5\n\n    this.setState({\n      tree: tree_key\n    }); // Step 2\n  }\n\n  Tree() {\n    return React.createElement(React.Fragment, null, this.state.tree === 'BST' ? React.createElement(BinarySearchTree, {\n      operation: this.state.operation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }) : null);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(NavigationBar, {\n      visualizer: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), this.Tree(), React.createElement(Tooltips, {\n      active: tooltips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  }\n\n  componentDidUpdate() {\n    if (this.state.operation !== this.initialStateOperation) {\n      this.setState({\n        operation: this.initialStateOperation\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","NavigationBar","Tooltips","BinarySearchTree","TreeVisualizer","Component","constructor","props","initialStateOperation","state","tree","menu_key","operation","tooltips","performOperation","bind","toggleTooltips","changeTree","setState","tree_key","Tree","render","componentDidUpdate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,OAAOC,gBAAP,MAA6B,+CAA7B;AAEA,OAAO,uBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,qBAAL,GAA6B,SAA7B;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,KADG;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,SAAS,EAAE,KAAKJ,qBAHP;AAITK,MAAAA,QAAQ,EAAE;AAJD,KAAb;AAOA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,cAAL,GAAwB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAxB;AACA,SAAKE,UAAL,GAAwB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAxB;AACH;;AAEDD,EAAAA,gBAAgB,CAACF,SAAD,EAAY;AACxB,SAAKM,QAAL,CAAc;AAAEN,MAAAA,SAAS,EAAEA;AAAb,KAAd;AACH;;AAEDI,EAAAA,cAAc,GAAG;AACb,SAAKE,QAAL,CAAc;AAAEL,MAAAA,QAAQ,EAAE,CAAE,KAAKJ,KAAL,CAAWI;AAAzB,KAAd;AACH;;AAEDI,EAAAA,UAAU,CAACE,QAAD,EAAW;AACjB;;;;AAIA,SAAKD,QAAL,CAAc;AAAEP,MAAAA,QAAQ,EAAEQ;AAAZ,KAAd,EALiB,CAKsB;;AACvC,SAAKD,QAAL,CAAc;AAAER,MAAAA,IAAI,EAAES;AAAR,KAAd,EANiB,CAMkB;AACtC;;AAEDC,EAAAA,IAAI,GAAG;AACH,WACI,0CACM,KAAKX,KAAL,CAAWC,IAAX,KAAoB,KAApB,GACE,oBAAC,gBAAD;AAAkB,MAAA,SAAS,EAAI,KAAKD,KAAL,CAAWG,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAEA,IAHN,CADJ;AAOH;;AAEDS,EAAAA,MAAM,GAAG;AACL,WACI,0CACI,oBAAC,aAAD;AAAe,MAAA,UAAU,EAAI,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGM,KAAKD,IAAL,EAHN,EAKI,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAIP,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAEDS,EAAAA,kBAAkB,GAAG;AACjB,QAAK,KAAKb,KAAL,CAAWG,SAAX,KAAyB,KAAKJ,qBAAnC,EAA2D;AACvD,WAAKU,QAAL,CAAc;AAAEN,QAAAA,SAAS,EAAE,KAAKJ;AAAlB,OAAd;AACH;AACJ;;AA7DuD","sourcesContent":["import React from 'react';\r\n\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\nimport Tooltips from './Tooltips/Tooltips.jsx'\r\n\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\n\r\nimport './TreeVisualizer.scss';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.state = {\r\n            tree: 'BST',\r\n            menu_key: 'BST',\r\n            operation: this.initialStateOperation,\r\n            tooltips: false\r\n        };\r\n\r\n        this.performOperation = this.performOperation.bind(this);\r\n        this.toggleTooltips   = this.toggleTooltips.bind(this);\r\n        this.changeTree       = this.changeTree.bind(this);\r\n    }\r\n\r\n    performOperation(operation) {\r\n        this.setState({ operation: operation });\r\n    }\r\n\r\n    toggleTooltips() {\r\n        this.setState({ tooltips: ! this.state.tooltips });\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        /* To-Do\r\n         * Step 1. reset tree and change menu key\r\n         * Step 2. change tree key\r\n         */\r\n        this.setState({ menu_key: tree_key }); // Step 0.5\r\n        this.setState({ tree: tree_key }); // Step 2\r\n    }\r\n\r\n    Tree() {\r\n        return (\r\n            <>\r\n                { this.state.tree === 'BST' ?\r\n                    <BinarySearchTree operation = {this.state.operation} />\r\n                : null }\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} />\r\n                \r\n                { this.Tree() }\r\n\r\n                <Tooltips active = {tooltips} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            this.setState({ operation: this.initialStateOperation });\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}