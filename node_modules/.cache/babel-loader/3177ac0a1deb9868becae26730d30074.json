{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTreeNew\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport Queue from '../../Queue.jsx';\nimport $ from 'jquery';\nimport { randomIntFromInverval } from '../../Helpers.js';\nimport { myMax } from '../../Helpers.js';\nimport './BinarySearchTree.css';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinarySearchTree {\n  constructor() {\n    this.name = \"BinarySearchTree\";\n    this.root = null;\n  }\n\n  generateNewTree(elements = 5) {\n    this.root = null;\n    $('.node-value').removeClass('visible');\n\n    for (let i = 0; i < elements; ++i) {\n      this.insert(randomIntFromInverval(1, 200));\n    }\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return myMax(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (val < curr.value) {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          break;\n        }\n\n        curr = curr.left;\n      } else {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          break;\n        }\n\n        curr = curr.right;\n      }\n    }\n  }\n\n  animateNodes() {\n    let queue = new Queue();\n    queue.push($('.node:not([node-value=\"null\"])>.node-value:not(.visible)').first());\n    animateHelper(queue);\n  }\n\n  paint(node = this.root, tree_height = this.height(), curr_height = 0) {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.paint(node ? node.left : null, tree_height, curr_height + 1);\n    const rightChild = this.paint(node ? node.right : null, tree_height, curr_height + 1);\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"node-wrapper\",\n        \"node-value\": \"null\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"null\"), leftChild, rightChild));\n    } else if (node === this.root) {\n      let scale_factor = window.innerWidth / (Math.pow(2, tree_height - 1) * 70);\n      scale_factor = scale_factor > 1 ? 1 : scale_factor;\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"node-wrapper root\",\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: ({\n          width: Math.pow(2, tree_height - 1) * 70 + 'px'\n        }, {\n          transform: \"scale(\" + scale_factor + \")\"\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, node.value), leftChild, rightChild));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"node-wrapper\",\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, node.value, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"line\", {\n        class: \"line\",\n        x1: \"0\",\n        y1: \"0\",\n        x2: \"50\",\n        y2: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }))), leftChild, rightChild));\n    }\n  }\n\n}\n\nfunction animateHelper(queue) {\n  if (!queue.empty()) {\n    let $_node = queue.front();\n    $_node.addClass('visible');\n    $_node.siblings('.node-wrapper:not([node-value=\"null\"])').children('.node-value').each(function () {\n      queue.push($(this));\n    });\n    setTimeout(function () {\n      animateHelper(queue);\n    }, 300);\n  }\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTreeNew/BinarySearchTree.jsx"],"names":["React","Queue","$","randomIntFromInverval","myMax","BinarySearchTreeNode","constructor","val","value","left","right","BinarySearchTree","name","root","generateNewTree","elements","removeClass","i","insert","height","node","curr","animateNodes","queue","push","first","animateHelper","paint","tree_height","curr_height","leftChild","rightChild","scale_factor","window","innerWidth","Math","pow","width","transform","empty","$_node","front","addClass","siblings","children","each","setTimeout"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Queue from '../../Queue.jsx'\r\nimport $ from 'jquery'\r\nimport { randomIntFromInverval } from '../../Helpers.js'\r\nimport { myMax } from '../../Helpers.js'\r\nimport './BinarySearchTree.css'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree {\r\n    constructor() {\r\n        this.name = \"BinarySearchTree\";\r\n        this.root = null;\r\n    }\r\n\r\n    generateNewTree(elements = 5) {\r\n        this.root = null;\r\n        $('.node-value').removeClass('visible');\r\n        \r\n        for (let i = 0; i < elements; ++i) {\r\n            this.insert( randomIntFromInverval(1, 200) );\r\n        }\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return myMax( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (val < curr.value) {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    break;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n            else {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    break;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    animateNodes() {\r\n        let queue = new Queue();\r\n        queue.push( $('.node:not([node-value=\"null\"])>.node-value:not(.visible)').first() );\r\n        animateHelper(queue);\r\n    }\r\n\r\n    paint(node = this.root, tree_height = this.height(), curr_height = 0) {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild = this.paint(node ? node.left : null, tree_height, curr_height + 1);\r\n        const rightChild = this.paint(node ? node.right : null, tree_height, curr_height + 1);\r\n        \r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div className=\"node-wrapper\" node-value=\"null\">\r\n                        <div className=\"node-value\">null</div>\r\n                        {leftChild}\r\n                        {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else if ( node === this.root ) {\r\n            let scale_factor = window.innerWidth / ( Math.pow(2, tree_height - 1) * 70 );\r\n            scale_factor = scale_factor > 1 ? 1 : scale_factor;\r\n\r\n            return (\r\n                <>\r\n                    <div\r\n                        className=\"node-wrapper root\"\r\n                        node-value={node.value}\r\n                        node-layer={tree_height - curr_height}\r\n                        style={\r\n                            {width: Math.pow(2, tree_height - 1) * 70 + 'px'},\r\n                            {transform: \"scale(\" + scale_factor + \")\"}\r\n                        }>\r\n                            <div className=\"node-value\">{node.value}</div>\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className=\"node-wrapper\"\r\n                        node-value={node.value}\r\n                        node-layer={tree_height - curr_height}>\r\n                            <div className=\"node-value\">\r\n                                {node.value}\r\n\r\n                                <svg className=\"line node-line\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <line class=\"line\" x1=\"0\" y1=\"0\" x2=\"50\" y2=\"50\" />\r\n                                </svg>\r\n\r\n                            </div>\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nfunction animateHelper(queue) {\r\n    if ( !queue.empty() ) {\r\n        let $_node = queue.front();\r\n        $_node.addClass('visible');\r\n        $_node.siblings('.node-wrapper:not([node-value=\"null\"])').children('.node-value').each(function() {\r\n           queue.push( $(this) ); \r\n        });\r\n        setTimeout(function(){animateHelper(queue);}, 300);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}