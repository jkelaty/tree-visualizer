{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\NavigationBar\\\\NavigationBar.jsx\";\nimport React from 'react';\nimport logo from './logo.png';\nimport $ from 'jquery';\nimport { forEach } from '../Helpers.js';\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport './NavigationBar.css';\nexport default class NavigationBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.visualizer = this.props.visualizer;\n    this.trees = {\n      \"BST\": \"Binary Search Tree\",\n      \"AVL\": \"AVL Tree\",\n      \"RBT\": \"Red-Black Tree\",\n      \"BHP\": \"Binary Heap\"\n    };\n    this.operations = {\n      \"BST\": [\"Insert\", \"Remove\", \"Search\"],\n      \"AVL\": [\"Insert\", \"Remove\", \"Search\"],\n      \"RBT\": [\"Insert\", \"Remove\", \"Search\"],\n      \"BHP\": [\"Insert\", \"Top\"]\n    };\n    this.state = {\n      active: \"BST\"\n    };\n  }\n\n  changeTree(tree_key, visualizer) {\n    this.setState({\n      active: tree_key\n    });\n    this.closeAllDropdowns();\n    visualizer.changeTree(tree_key);\n  }\n\n  generateTree(visualizer) {\n    visualizer.initialize();\n  }\n\n  performOperation(operation, visualizer) {\n    this.closeAllDropdowns();\n\n    if (this.operations[this.state.active].contains(operation)) {\n      switch (operation) {\n        case \"Insert\":\n          visualizer.insert();\n          break;\n\n        case \"Remove\":\n          visualizer.remove();\n          break;\n\n        case \"Find\":\n          visualizer.find();\n          break;\n\n        case \"Top\":\n          visualizer.top();\n          break;\n      }\n    } else {//state error.. force update?\n    }\n  }\n\n  openDropdown(selector) {\n    this.closeAllDropdowns();\n    document.getElementById(selector).getElementsByClassName('dropdown-menu')[0].classList.add('visible');\n  }\n\n  closeAllDropdowns() {\n    forEach(document.getElementsByClassName('dropdown-menu'), function (x) {\n      x.classList.remove('visible');\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"navbar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navbar-logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"tree-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"#\",\n      onClick: () => this.openDropdown(\"tree-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.trees[this.state.active], React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, Object.keys(this.trees).map((key, idx) => React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: e => this.changeTree(key, this.visualizer),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.trees[key]))))), React.createElement(\"div\", {\n      id: \"operations-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"#\",\n      onClick: () => this.openDropdown(\"operations-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Operations\", React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.operations[this.state.active].map((value, idx) => React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"onClick=\", () => this.performOperation(value, this.visualizer), value))))), React.createElement(\"div\", {\n      id: \"generate-tree\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.generateTree(this.visualizer),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Generate\"))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/NavigationBar/NavigationBar.jsx"],"names":["React","logo","$","forEach","NavigationBar","Component","constructor","props","visualizer","trees","operations","state","active","changeTree","tree_key","setState","closeAllDropdowns","generateTree","initialize","performOperation","operation","contains","insert","remove","find","top","openDropdown","selector","document","getElementById","getElementsByClassName","classList","add","x","render","Object","keys","map","key","idx","e","value"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from './logo.png'\r\nimport $ from 'jquery'\r\nimport { forEach } from '../Helpers.js'\r\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './NavigationBar.css';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.visualizer = this.props.visualizer;\r\n        \r\n        this.trees = {\r\n            \"BST\" : \"Binary Search Tree\",\r\n            \"AVL\" : \"AVL Tree\",\r\n            \"RBT\" : \"Red-Black Tree\",\r\n            \"BHP\" : \"Binary Heap\"\r\n        };\r\n\r\n        this.operations = {\r\n            \"BST\" : [ \"Insert\",\r\n                      \"Remove\",\r\n                      \"Search\"\r\n                    ],\r\n            \"AVL\" : [ \"Insert\",\r\n                      \"Remove\",\r\n                      \"Search\"\r\n                    ],\r\n            \"RBT\" : [ \"Insert\",\r\n                      \"Remove\",\r\n                      \"Search\"\r\n                    ],\r\n            \"BHP\" : [ \"Insert\",\r\n                      \"Top\"\r\n                    ]\r\n        };\r\n\r\n        this.state = {\r\n            active: \"BST\"\r\n        };\r\n    }\r\n\r\n    changeTree(tree_key, visualizer) {\r\n        this.setState(\r\n            { active: tree_key }\r\n        );\r\n\r\n        this.closeAllDropdowns();\r\n\r\n        visualizer.changeTree(tree_key);\r\n    }\r\n\r\n    generateTree(visualizer) {\r\n        visualizer.initialize();\r\n    }\r\n\r\n    performOperation(operation, visualizer) {\r\n        this.closeAllDropdowns();\r\n\r\n        if ( this.operations[ this.state.active ].contains(operation) ) {\r\n            switch( operation ) {\r\n                case \"Insert\":\r\n                    visualizer.insert();\r\n                    break;\r\n                case \"Remove\":\r\n                    visualizer.remove();\r\n                    break;\r\n                case \"Find\":\r\n                    visualizer.find();\r\n                    break;\r\n                case \"Top\":\r\n                    visualizer.top();\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            //state error.. force update?\r\n        }\r\n    }\r\n\r\n    openDropdown(selector) {\r\n        this.closeAllDropdowns();\r\n        document.getElementById(selector).getElementsByClassName('dropdown-menu')[0].classList.add('visible');\r\n    }\r\n\r\n    closeAllDropdowns() {\r\n        forEach(\r\n            document.getElementsByClassName('dropdown-menu'),\r\n            function(x) {x.classList.remove('visible');}\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id=\"navbar-wrapper\">\r\n                    <div className=\"navbar-logo\">\r\n                        <img src={logo} alt=\"logo\" />\r\n                    </div>\r\n                    \r\n                    <div id=\"tree-dropdown\" className=\"dropdown\">\r\n                        <a\r\n                            className=\"dropdown-toggle\"\r\n                            href=\"#\"\r\n                            onClick={() => this.openDropdown(\"tree-dropdown\")}>\r\n                            {this.trees[ this.state.active ]}\r\n                            <i className=\"fa fa-caret-down\"></i>\r\n                        </a>\r\n\r\n                        <ul className=\"dropdown-menu\">\r\n                            {Object.keys(this.trees).map((key, idx) => (\r\n                                <li className=\"dropdown-menu-option\">\r\n                                    <a\r\n                                        href=\"#\"\r\n                                        onClick={(e) => this.changeTree(key, this.visualizer)}>\r\n                                        {this.trees[key]}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div id=\"operations-dropdown\" className=\"dropdown\">\r\n                        <a\r\n                            className=\"dropdown-toggle\"\r\n                            href=\"#\"\r\n                            onClick={() => this.openDropdown(\"operations-dropdown\")}>\r\n                            Operations\r\n                            <i className=\"fa fa-caret-down\"></i>\r\n                        </a>\r\n\r\n                        <ul className=\"dropdown-menu\">\r\n                            {this.operations[ this.state.active ].map((value, idx) => (\r\n                                <li className=\"dropdown-menu-option\">\r\n                                    <a\r\n                                        href=\"#\">\r\n                                        onClick={() => this.performOperation(value, this.visualizer)}\r\n                                        {value}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div id=\"generate-tree\">\r\n                        <button\r\n                            onClick={() => this.generateTree(this.visualizer)}>\r\n                            Generate\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}