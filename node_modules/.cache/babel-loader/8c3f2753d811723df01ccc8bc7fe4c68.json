{"ast":null,"code":"import React from 'react';\nimport BinaryTree from './BinaryTree.jsx';\nimport './TreeVisualizer.css';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: new BinaryTree()\n    }; //this.state.tree.insert(1);\n    //this.state.tree.insert(3);\n    //this.state.tree.insert(5);\n    //this.state.tree.insert(7);\n  }\n\n  render() {\n    return this.state.tree.createDOM();\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    this.state.tree.resetTree();\n  }\n\n}\n/* test js\r\nvar $node = $('.node').eq(1);\r\nvar element = $('.node').eq(0).clone();\r\nelement.appendTo( $node );\r\nelement = element.clone();\r\nelement.appendTo( $node );\r\n$node.siblings('.node').css( 'width', $node.css('width') );\r\n*/","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","BinaryTree","TreeVisualizer","Component","constructor","props","state","tree","render","createDOM","componentDidMount","resetArray","resetTree"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,sBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,IAAIN,UAAJ;AADG,KAAb,CAHe,CAOf;AACA;AACA;AACA;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKF,KAAL,CAAWC,IAAX,CAAgBE,SAAhB,EAAP;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,SAAKL,KAAL,CAAWC,IAAX,CAAgBK,SAAhB;AACH;;AAxBuD;AA2B5D","sourcesContent":["import React from 'react';\r\nimport BinaryTree from './BinaryTree.jsx'\r\nimport './TreeVisualizer.css';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: new BinaryTree()           \r\n        };\r\n\r\n        //this.state.tree.insert(1);\r\n        //this.state.tree.insert(3);\r\n        //this.state.tree.insert(5);\r\n        //this.state.tree.insert(7);\r\n    }\r\n\r\n    render() {\r\n        return this.state.tree.createDOM();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        this.state.tree.resetTree();\r\n    }\r\n}\r\n\r\n/* test js\r\nvar $node = $('.node').eq(1);\r\nvar element = $('.node').eq(0).clone();\r\nelement.appendTo( $node );\r\nelement = element.clone();\r\nelement.appendTo( $node );\r\n$node.siblings('.node').css( 'width', $node.css('width') );\r\n*/"]},"metadata":{},"sourceType":"module"}