{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport Queue from '../../Queue.jsx';\nimport $ from 'jquery';\nimport { randomIntFromInverval } from '../../Helpers.js';\nimport { myMax } from '../../Helpers.js';\nimport './BinarySearchTree.css';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinarySearchTree {\n  constructor() {\n    this.root = null;\n  }\n\n  initialize(elements = 5) {\n    this.root = null;\n\n    for (let i = 0; i < elements; ++i) {\n      this.insert(randomIntFromInverval(1, 20));\n    }\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return myMax(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (val < curr.value) {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      } else {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      }\n    }\n  }\n\n  animateNodes(node = null) {\n    queue = new Queue();\n\n    if (node == null) {\n      $('.node');\n    }\n  }\n\n  paint(node = this.root, tree_height = this.height(), curr_height = 0) {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.paint(node ? node.left : null, tree_height, curr_height + 1);\n    const rightChild = this.paint(node ? node.right : null, tree_height, curr_height + 1);\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"node\",\n        \"node-value\": \"null\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"null\"), leftChild, rightChild));\n    } else if (node === this.root) return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"node root\",\n      \"node-value\": node.value,\n      \"node-layer\": tree_height - curr_height,\n      style: {\n        width: Math.pow(2, tree_height - 1) * 70 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"node-value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, node.value), leftChild, rightChild));else return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"node\",\n      \"node-value\": node.value,\n      \"node-layer\": tree_height - curr_height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"node-value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, node.value), leftChild, rightChild));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","Queue","$","randomIntFromInverval","myMax","BinarySearchTreeNode","constructor","val","value","left","right","BinarySearchTree","root","initialize","elements","i","insert","height","node","curr","animateNodes","queue","paint","tree_height","curr_height","leftChild","rightChild","width","Math","pow"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Queue from '../../Queue.jsx'\r\nimport $ from 'jquery'\r\nimport { randomIntFromInverval } from '../../Helpers.js'\r\nimport { myMax } from '../../Helpers.js'\r\nimport './BinarySearchTree.css'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    initialize(elements = 5) {\r\n        this.root = null;\r\n        \r\n        for (let i = 0; i < elements; ++i) {\r\n            this.insert( randomIntFromInverval(1, 20) );\r\n        }\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return myMax( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n\r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (val < curr.value) {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n            else {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    animateNodes(node = null) {\r\n        queue = new Queue();\r\n        if (node == null) {\r\n            $('.node');\r\n        }\r\n    }\r\n\r\n    paint(node = this.root, tree_height = this.height(), curr_height = 0) {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild = this.paint(node ? node.left : null, tree_height, curr_height + 1);\r\n        const rightChild = this.paint(node ? node.right : null, tree_height, curr_height + 1);\r\n        \r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div className=\"node\" node-value=\"null\">\r\n                        <div className=\"node-value\">null</div>\r\n                        {leftChild}\r\n                        {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else if ( node === this.root )\r\n            return (\r\n                <>\r\n                    <div\r\n                        className=\"node root\"\r\n                        node-value={node.value}\r\n                        node-layer={tree_height - curr_height}\r\n                        style={{width: Math.pow(2,tree_height - 1) * 70 + 'px'}}\r\n                    >\r\n                            <div className=\"node-value\">{node.value}</div>\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        else\r\n            return (\r\n                <>\r\n                    <div\r\n                        className=\"node\"\r\n                        node-value={node.value}\r\n                        node-layer={tree_height - curr_height}\r\n                    >\r\n                            <div className=\"node-value\">{node.value}</div>\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}