{"ast":null,"code":"class BinaryNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinaryTree {\n  constructor() {\n    this.root = null;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinaryNode(val);\n      return;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (val < curr.value) {\n        if (curr.left == null) {\n          curr.left = new BinaryNode(val);\n          return;\n        }\n\n        curr = curr.left;\n      } else {\n        if (curr.right == null) {\n          curr.right = new BinaryNode(val);\n          return;\n        }\n\n        curr = curr.right;\n      }\n    }\n  }\n\n  inOrderArray() {\n    const obj = {\n      array: []\n    };\n    this.inOrder(this.root, obj);\n    return obj;\n  }\n\n  inOrder(node, obj) {\n    if (node == null) {\n      return;\n    }\n\n    this.inOrder(node.left, obj);\n    obj.array.push(node.value);\n    this.inOrder(node.right, obj);\n    return;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/BinaryTree.jsx"],"names":["BinaryNode","constructor","val","value","left","right","BinaryTree","root","insert","curr","inOrderArray","obj","array","inOrder","node","push"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKC,KAAL,GAAaD,GAAb;AACA,SAAKE,IAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,IAAb;AACH;;AALY;;AAQjB,eAAe,MAAMC,UAAN,CAAiB;AAC5BL,EAAAA,WAAW,GAAG;AACV,SAAKM,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,MAAM,CAACN,GAAD,EAAM;AACR,QAAI,KAAKK,IAAL,IAAa,IAAjB,EAAuB;AACnB,WAAKA,IAAL,GAAY,IAAIP,UAAJ,CAAeE,GAAf,CAAZ;AACA;AACH;;AAED,QAAIO,IAAI,GAAG,KAAKF,IAAhB;;AAEA,WAAO,IAAP,EAAa;AACT,UAAIL,GAAG,GAAGO,IAAI,CAACN,KAAf,EAAsB;AAClB,YAAGM,IAAI,CAACL,IAAL,IAAa,IAAhB,EAAsB;AAClBK,UAAAA,IAAI,CAACL,IAAL,GAAY,IAAIJ,UAAJ,CAAeE,GAAf,CAAZ;AACA;AACH;;AACDO,QAAAA,IAAI,GAAGA,IAAI,CAACL,IAAZ;AACH,OAND,MAOK;AACD,YAAGK,IAAI,CAACJ,KAAL,IAAc,IAAjB,EAAuB;AACnBI,UAAAA,IAAI,CAACJ,KAAL,GAAa,IAAIL,UAAJ,CAAeE,GAAf,CAAb;AACA;AACH;;AACDO,QAAAA,IAAI,GAAGA,IAAI,CAACJ,KAAZ;AACH;AACJ;AACJ;;AAEDK,EAAAA,YAAY,GAAG;AACX,UAAMC,GAAG,GAAG;AAACC,MAAAA,KAAK,EAAC;AAAP,KAAZ;AACA,SAAKC,OAAL,CAAa,KAAKN,IAAlB,EAAwBI,GAAxB;AACA,WAAOA,GAAP;AACH;;AAEDE,EAAAA,OAAO,CAACC,IAAD,EAAOH,GAAP,EAAY;AACf,QAAGG,IAAI,IAAI,IAAX,EAAiB;AACb;AACH;;AAED,SAAKD,OAAL,CAAaC,IAAI,CAACV,IAAlB,EAAwBO,GAAxB;AACAA,IAAAA,GAAG,CAACC,KAAJ,CAAUG,IAAV,CAAeD,IAAI,CAACX,KAApB;AACA,SAAKU,OAAL,CAAaC,IAAI,CAACT,KAAlB,EAAyBM,GAAzB;AAEA;AACH;;AA/C2B","sourcesContent":["class BinaryNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinaryTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinaryNode(val);\r\n            return;\r\n        }\r\n\r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (val < curr.value) {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinaryNode(val);\r\n                    return;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n            else {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinaryNode(val);\r\n                    return;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    inOrderArray() {\r\n        const obj = {array:[]};\r\n        this.inOrder(this.root, obj);\r\n        return obj;\r\n    }\r\n\r\n    inOrder(node, obj) {\r\n        if(node == null) {\r\n            return;\r\n        }\r\n\r\n        this.inOrder(node.left, obj);\r\n        obj.array.push(node.value);\r\n        this.inOrder(node.right, obj);\r\n\r\n        return;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}