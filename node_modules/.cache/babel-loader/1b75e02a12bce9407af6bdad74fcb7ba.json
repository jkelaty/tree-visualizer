{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport $ from 'jquery';\nimport NavigationBar from './NavigationBar/NavigationBar.jsx';\nimport BinarySearchTree from './Trees/BinarySearchTreeNew/BinarySearchTree.jsx';\nimport './TreeVisualizer.css';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: new BinarySearchTree()\n    };\n  }\n\n  changeTree(tree_key) {\n    switch (tree_key) {\n      case \"BST\":\n        this.setState({\n          tree: new BinarySearchTree()\n        });\n        break;\n\n      case \"AVL\":\n      case \"RBT\":\n      case \"BHP\":\n      default: //show error, invalid tree\n\n    }\n  }\n\n  generateNewTree() {\n    this.state.tree.generateNewTree();\n    this.forceUpdate();\n  }\n\n  insert(element) {\n    this.state.tree.insert(element);\n    this.forceUpdate();\n  }\n\n  remove(element) {\n    this.forceUpdate();\n  }\n\n  find(element) {\n    this.forceUpdate();\n  }\n\n  top() {}\n\n  Tree() {\n    return this.state.tree.drawTree();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(NavigationBar, {\n      visualizer: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: this.state.tree.name,\n      style: {\n        transform: \"scale(\" + this.state.tree.getScaleFactor() + \")\"\n      },\n      className: \"tree\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.Tree()));\n  }\n\n  componentDidUpdate() {\n    this.state.tree.animateNodes();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","$","NavigationBar","BinarySearchTree","TreeVisualizer","Component","constructor","props","state","tree","changeTree","tree_key","setState","generateNewTree","forceUpdate","insert","element","remove","find","top","Tree","drawTree","render","name","transform","getScaleFactor","componentDidUpdate","animateNodes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,gBAAP,MAA6B,kDAA7B;AACA,OAAO,sBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,IAAIN,gBAAJ;AADG,KAAb;AAGH;;AAEDO,EAAAA,UAAU,CAACC,QAAD,EAAW;AACjB,YAAOA,QAAP;AACI,WAAK,KAAL;AAAY,aAAKC,QAAL,CAAe;AAAEH,UAAAA,IAAI,EAAE,IAAIN,gBAAJ;AAAR,SAAf;AACR;;AACJ,WAAK,KAAL;AACA,WAAK,KAAL;AACA,WAAK,KAAL;AACA,cANJ,CAOQ;;AAPR;AASH;;AAEDU,EAAAA,eAAe,GAAG;AACd,SAAKL,KAAL,CAAWC,IAAX,CAAgBI,eAAhB;AACA,SAAKC,WAAL;AACH;;AAEDC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,SAAKR,KAAL,CAAWC,IAAX,CAAgBM,MAAhB,CAAuBC,OAAvB;AACA,SAAKF,WAAL;AACH;;AAEDG,EAAAA,MAAM,CAACD,OAAD,EAAU;AACZ,SAAKF,WAAL;AACH;;AAEDI,EAAAA,IAAI,CAACF,OAAD,EAAU;AACV,SAAKF,WAAL;AACH;;AAEDK,EAAAA,GAAG,GAAG,CAEL;;AAEDC,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKZ,KAAL,CAAWC,IAAX,CAAgBY,QAAhB,EAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI,0CACI,oBAAC,aAAD;AAAe,MAAA,UAAU,EAAI,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI;AACI,MAAA,EAAE,EAAG,KAAKd,KAAL,CAAWC,IAAX,CAAgBc,IADzB;AAEI,MAAA,KAAK,EAAG;AAACC,QAAAA,SAAS,EAAE,WAAW,KAAKhB,KAAL,CAAWC,IAAX,CAAgBgB,cAAhB,EAAX,GAA8C;AAA1D,OAFZ;AAGI,MAAA,SAAS,EAAC,MAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKM,KAAKL,IAAL,EALN,CAHJ,CADJ;AAcH;;AAEDM,EAAAA,kBAAkB,GAAG;AACjB,SAAKlB,KAAL,CAAWC,IAAX,CAAgBkB,YAAhB;AACH;;AAlEuD","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery'\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\nimport BinarySearchTree from './Trees/BinarySearchTreeNew/BinarySearchTree.jsx'\r\nimport './TreeVisualizer.css';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: new BinarySearchTree()         \r\n        };\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        switch(tree_key) {\r\n            case \"BST\": this.setState( { tree: new BinarySearchTree() } );\r\n                break;\r\n            case \"AVL\":\r\n            case \"RBT\":\r\n            case \"BHP\":\r\n            default:\r\n                //show error, invalid tree\r\n        }\r\n    }\r\n\r\n    generateNewTree() {\r\n        this.state.tree.generateNewTree();\r\n        this.forceUpdate();\r\n    }\r\n\r\n    insert(element) {\r\n        this.state.tree.insert(element)\r\n        this.forceUpdate();\r\n    }\r\n\r\n    remove(element) {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    find(element) {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    top() {\r\n\r\n    }\r\n\r\n    Tree() {\r\n        return this.state.tree.drawTree();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} />\r\n                \r\n                <div\r\n                    id={ this.state.tree.name }\r\n                    style={ {transform: \"scale(\" + this.state.tree.getScaleFactor() + \")\"} }\r\n                    className=\"tree\">\r\n\r\n                    { this.Tree() }\r\n                    \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.state.tree.animateNodes();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}