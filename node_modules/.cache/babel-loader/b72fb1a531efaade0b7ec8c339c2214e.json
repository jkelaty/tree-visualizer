{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\NavigationBar\\\\NavigationBar.jsx\";\nimport React from 'react';\nimport logo from './logo.png';\nimport $ from 'jquery';\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport './NavigationBar.css';\nexport default class NavigationBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.visualizer = this.props.visualizer;\n    this.changeTree = this.changeTree.bind(this);\n    this.toggleTooltips = this.toggleTooltips.bind(this);\n    this.trees = {\n      BST: {\n        name: \"Binary Search Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\", \"Traversals\"]\n      },\n      AVL: {\n        name: \"AVL Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      RBT: {\n        name: \"Red-Black Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      BHP: {\n        name: \"Binary Heap\",\n        operations: [\"Insert\", \"Top\"]\n      }\n    };\n    this.traversals = [{\n      name: \"Pre-Order\",\n      callback: \"PreOrder\"\n    }, {\n      name: \"In-Order\",\n      callback: \"InOrder\"\n    }, {\n      name: \"Post-Order\",\n      callback: \"PostOrder\"\n    }, {\n      name: \"Level Order\",\n      callback: \"LevelOrder\"\n    }];\n    this.operations = {\n      Insert: this.visualizer.insert,\n      Remove: this.visualizer.remove,\n      Search: this.visualizer.search,\n      Top: this.visualizer.top,\n      PreOrder: this.visualizer.preOrder,\n      InOrder: this.visualizer.inOrder,\n      PostOrder: this.visualizer.postOrder,\n      LevelOrder: this.visualizer.levelOrder\n    };\n    this.state = {\n      active_tree: this.visualizer.state.tree.key,\n      tooltips: false\n    };\n    $(document).click(function (e) {\n      if (!e.target.classList.contains('dropdown-toggle')) {\n        closeAllDropdowns();\n      }\n    });\n  }\n\n  changeTree(tree_key) {\n    this.setState({\n      active_tree: tree_key\n    });\n    this.visualizer.changeTree(tree_key);\n  }\n\n  toggleTooltips() {\n    this.setState({\n      tooltips: !this.state.tooltips\n    });\n  }\n\n  render() {\n    const treeActive = this.state.active_tree;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"navbar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navbar-logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"tree-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"# \",\n      onClick: () => openDropdown(\"tree-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, treeActive ? this.trees[this.state.active_tree][\"name\"] : \"Select..\", React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, Object.keys(this.trees).map((key, idx) => React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"# \",\n      onClick: () => this.changeTree(key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.trees[key][\"name\"]))))), treeActive ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"operations-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"# \",\n      onClick: () => openDropdown(\"operations-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Operations\", React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.trees[this.state.active_tree][\"operations\"].map((operation, idx) => operation === \"Traversals\" ? React.createElement(React.Fragment, null, React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"# \",\n      onClick: this.operations[operation],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, operation))) : React.createElement(React.Fragment, null, React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"# \",\n      onClick: () => openDropdown(\"traversals-submenu\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, operation)))))), React.createElement(\"div\", {\n      id: \"generate-tree\",\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.visualizer.generateTree,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Generate\")), React.createElement(\"div\", {\n      id: \"reset-tree\",\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.visualizer.resetTree,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(\"div\", {\n      id: \"tooltips-toggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"tooltips-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Tooltips:\"), React.createElement(\"label\", {\n      className: \"switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      onClick: this.toggleTooltips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"slider round\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })))) : null), this.state.tooltips ? React.createElement(React.Fragment, null) : null);\n  }\n\n}\n\nfunction openDropdown(selector) {\n  if ($('#' + selector).hasClass('visible')) {\n    closeAllDropdowns();\n    return;\n  } else {\n    closeAllDropdowns();\n    $('#' + selector).addClass('visible');\n  }\n}\n\nfunction closeAllDropdowns() {\n  $('.dropdown.visible').removeClass('visible');\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/NavigationBar/NavigationBar.jsx"],"names":["React","logo","$","NavigationBar","Component","constructor","props","visualizer","changeTree","bind","toggleTooltips","trees","BST","name","operations","AVL","RBT","BHP","traversals","callback","Insert","insert","Remove","remove","Search","search","Top","top","PreOrder","preOrder","InOrder","inOrder","PostOrder","postOrder","LevelOrder","levelOrder","state","active_tree","tree","key","tooltips","document","click","e","target","classList","contains","closeAllDropdowns","tree_key","setState","render","treeActive","openDropdown","Object","keys","map","idx","operation","generateTree","resetTree","selector","hasClass","addClass","removeClass"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from './logo.png'\r\nimport $ from 'jquery'\r\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './NavigationBar.css';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.visualizer     = this.props.visualizer;\r\n        this.changeTree     = this.changeTree.bind(this);\r\n        this.toggleTooltips = this.toggleTooltips.bind(this);\r\n        \r\n        this.trees = {\r\n            BST : {\r\n                name : \"Binary Search Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\",\r\n                    \"Traversals\"\r\n                ]\r\n            },\r\n            AVL : {\r\n                name : \"AVL Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\"\r\n                ]\r\n            },\r\n            RBT : {\r\n                name : \"Red-Black Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\"\r\n                ]\r\n            },\r\n            BHP : {\r\n                name : \"Binary Heap\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Top\"\r\n                ]\r\n            },\r\n        };\r\n\r\n        this.traversals = [\r\n            { name: \"Pre-Order\",   callback: \"PreOrder\" },\r\n            { name: \"In-Order\",    callback: \"InOrder\" },\r\n            { name: \"Post-Order\",  callback: \"PostOrder\" },\r\n            { name: \"Level Order\", callback: \"LevelOrder\" }\r\n        ];\r\n\r\n        this.operations = {\r\n            Insert     : this.visualizer.insert,\r\n            Remove     : this.visualizer.remove,\r\n            Search     : this.visualizer.search,\r\n            Top        : this.visualizer.top,\r\n            PreOrder   : this.visualizer.preOrder,\r\n            InOrder    : this.visualizer.inOrder,\r\n            PostOrder  : this.visualizer.postOrder,\r\n            LevelOrder : this.visualizer.levelOrder\r\n        };\r\n\r\n        this.state = {\r\n            active_tree: this.visualizer.state.tree.key,\r\n            tooltips: false\r\n        };\r\n\r\n        $(document).click(function(e) {\r\n            if ( ! e.target.classList.contains('dropdown-toggle') ) {\r\n                closeAllDropdowns();\r\n            }\r\n        });\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        this.setState( { active_tree: tree_key } );\r\n        this.visualizer.changeTree(tree_key);\r\n    }\r\n\r\n    toggleTooltips() {\r\n        this.setState( { tooltips: ! this.state.tooltips } );\r\n    }\r\n\r\n    render() {\r\n        const treeActive = this.state.active_tree;\r\n\r\n        return (\r\n            <>\r\n                <div id=\"navbar-wrapper\">\r\n                    <div className=\"navbar-logo\">\r\n                        <img src={logo} alt=\"logo\" />\r\n                    </div>\r\n                    \r\n                    <div id=\"tree-dropdown\" className=\"dropdown\">\r\n                        <a\r\n                            className=\"dropdown-toggle\"\r\n                            href=\"# \"\r\n                            onClick={() => openDropdown(\"tree-dropdown\")}>\r\n                            { treeActive ? this.trees[ this.state.active_tree ][ \"name\" ] : \"Select..\" }\r\n                            <i className=\"fa fa-caret-down\"></i>\r\n                        </a>\r\n\r\n                        <ul className=\"dropdown-menu\">\r\n                            {Object.keys(this.trees).map((key, idx) => (\r\n                                <li className=\"dropdown-menu-option\" key={idx}>\r\n                                    <a\r\n                                        href=\"# \"\r\n                                        onClick={() => this.changeTree(key)}>\r\n                                        {this.trees[ key ][ \"name\" ]}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    \r\n                    { treeActive ? (\r\n                        <>\r\n                            <div id=\"operations-dropdown\" className=\"dropdown\">\r\n                                <a\r\n                                    className=\"dropdown-toggle\"\r\n                                    href=\"# \"\r\n                                    onClick={() => openDropdown(\"operations-dropdown\")}>\r\n                                    Operations\r\n                                    <i className=\"fa fa-caret-down\"></i>\r\n                                </a>\r\n\r\n                                <ul className=\"dropdown-menu\">\r\n                                    {this.trees[ this.state.active_tree ][ \"operations\" ].map((operation, idx) => (\r\n\r\n                                        operation === \"Traversals\" ? (\r\n                                            <>\r\n                                                <li className=\"dropdown-menu-option\" key={idx}>\r\n                                                    <a\r\n                                                        href=\"# \"\r\n                                                        onClick={this.operations[ operation ]}>\r\n                                                        {operation}\r\n                                                    </a>\r\n                                                </li>\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                <li className=\"dropdown-menu-option\" key={idx}>\r\n                                                    <a\r\n                                                        href=\"# \"\r\n                                                        onClick={() => openDropdown(\"traversals-submenu\")}>\r\n                                                        {operation}\r\n                                                    </a>\r\n                                                </li>\r\n                                            </>\r\n                                        )\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        \r\n                            <div id=\"generate-tree\" className=\"navbar-button\">\r\n                                <button\r\n                                    onClick={this.visualizer.generateTree}>\r\n                                    Generate\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id=\"reset-tree\" className=\"navbar-button\">\r\n                                <button\r\n                                    onClick={this.visualizer.resetTree}>\r\n                                    Reset\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id=\"tooltips-toggle\">\r\n                                <span className=\"tooltips-text\">Tooltips:</span>\r\n                                <label className=\"switch\">\r\n                                    <input type=\"checkbox\" onClick={this.toggleTooltips} />\r\n                                    <span className=\"slider round\" />\r\n                                </label>\r\n                            </div>\r\n                        </>\r\n                    ) : ( null ) }\r\n                </div>\r\n\r\n                { this.state.tooltips ? (\r\n                    <>\r\n                    </>\r\n                ) : ( null ) }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction openDropdown(selector) {\r\n    if ( $('#' + selector).hasClass('visible') ) {\r\n        closeAllDropdowns();\r\n        return;\r\n    }\r\n    else {\r\n        closeAllDropdowns();\r\n        $('#' + selector).addClass('visible');\r\n    }\r\n}\r\n\r\nfunction closeAllDropdowns() {\r\n    $('.dropdown.visible').removeClass('visible');\r\n}"]},"metadata":{},"sourceType":"module"}