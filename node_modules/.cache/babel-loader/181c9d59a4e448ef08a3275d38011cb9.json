{"ast":null,"code":"import React from 'react';\n\nclass BinaryNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n  left() {\n    return this.left;\n  }\n\n  right() {\n    return this.right;\n  }\n\n}\n\nexport default class BinaryTree {\n  constructor() {\n    this.root = null;\n  }\n\n  insert(val) {\n    let curr = this.root;\n\n    while (curr != null) {\n      if (val < curr.value) {\n        curr = curr.left();\n      } else {\n        curr = curr.right();\n      }\n    }\n\n    curr = new BinaryNode(val);\n  }\n\n  inOrder() {\n    const array = [];\n    let curr = this.root;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/BinaryTree.jsx"],"names":["React","BinaryNode","constructor","val","value","left","right","BinaryTree","root","insert","curr","inOrder","array"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKC,KAAL,GAAaD,GAAb;AACA,SAAKE,IAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,IAAb;AACH;;AAEDD,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKA,IAAZ;AACH;;AAEDC,EAAAA,KAAK,GAAG;AACJ,WAAO,KAAKA,KAAZ;AACH;;AAbY;;AAiBjB,eAAe,MAAMC,UAAN,CAAiB;AAC5BL,EAAAA,WAAW,GAAG;AACV,SAAKM,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,MAAM,CAACN,GAAD,EAAM;AACR,QAAIO,IAAI,GAAG,KAAKF,IAAhB;;AAEA,WAAOE,IAAI,IAAI,IAAf,EAAqB;AACjB,UAAIP,GAAG,GAAGO,IAAI,CAACN,KAAf,EAAsB;AAClBM,QAAAA,IAAI,GAAGA,IAAI,CAACL,IAAL,EAAP;AACH,OAFD,MAGK;AACDK,QAAAA,IAAI,GAAGA,IAAI,CAACJ,KAAL,EAAP;AACH;AACJ;;AAEDI,IAAAA,IAAI,GAAG,IAAIT,UAAJ,CAAeE,GAAf,CAAP;AACH;;AAEDQ,EAAAA,OAAO,GAAG;AACN,UAAMC,KAAK,GAAG,EAAd;AAEA,QAAIF,IAAI,GAAG,KAAKF,IAAhB;AAGH;;AA1B2B","sourcesContent":["import React from 'react';\r\n\r\nclass BinaryNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n\r\n    left() {\r\n        return this.left;\r\n    }\r\n\r\n    right() {\r\n        return this.right;\r\n    }\r\n\r\n}\r\n\r\nexport default class BinaryTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    insert(val) {\r\n        let curr = this.root;\r\n\r\n        while (curr != null) {\r\n            if (val < curr.value) {\r\n                curr = curr.left();\r\n            }\r\n            else {\r\n                curr = curr.right();\r\n            }\r\n        }\r\n\r\n        curr = new BinaryNode(val);\r\n    }\r\n\r\n    inOrder() {\r\n        const array = [];\r\n\r\n        let curr = this.root;\r\n\r\n\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}