{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport $ from 'jquery';\nimport NavigationBar from './NavigationBar/NavigationBar.jsx';\nimport Tooltips from './Tooltips/Tooltips.jsx';\nimport DefaultTree from './Trees/DefaultTree/DefaultTree.jsx';\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx';\nimport './TreeVisualizer.scss';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: new BinarySearchTree(),\n      operation: 'initial',\n      tooltips: false\n    };\n    this.toggleTooltips = this.toggleTooltips.bind(this);\n    this.changeTree = this.changeTree.bind(this);\n    this.performOperation = this.performOperation.bind(this);\n  }\n\n  toggleTooltips() {\n    this.setState({\n      tooltips: !this.state.tooltips\n    });\n  }\n\n  changeTree(tree_key) {\n    switch (tree_key) {\n      case 'BST':\n        this.setState({\n          tree: new BinarySearchTree()\n        });\n        break;\n\n      case 'AVL':\n        this.setState({\n          tree: new DefaultTree()\n        });\n        break;\n\n      case 'RBT':\n        this.setState({\n          tree: new DefaultTree()\n        });\n        break;\n\n      case 'BHP':\n        this.setState({\n          tree: new DefaultTree()\n        });\n        break;\n\n      default:\n        this.setState({\n          tree: new DefaultTree()\n        }); //show error?, invalid tree\n\n        break;\n    }\n  }\n\n  performOperation(operation) {\n    alert(operation);\n  }\n\n  generateTree() {\n    this.state.tree.generateTree();\n    this.setState({\n      operation: 'generate'\n    });\n  }\n\n  resetTree() {\n    this.state.tree.reset();\n    this.setState({\n      operation: 'reset'\n    });\n  }\n\n  insert() {\n    this.state.tree.insert(4);\n    this.setState({\n      operation: 'insert'\n    });\n  }\n\n  remove() {\n    alert('remove');\n  }\n\n  search() {\n    alert('search');\n  }\n\n  top() {\n    alert('top');\n  }\n\n  preOrder() {\n    alert('preOrder');\n  }\n\n  inOrder() {\n    alert('inOrder');\n  }\n\n  postOrder() {\n    alert('postOrder');\n  }\n\n  levelOrder() {\n    alert('levelOrder');\n  }\n\n  Tree() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: this.state.tree.name,\n      className: \"tree\",\n      style: {\n        transform: this.state.tree.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.tree.Tree()));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(NavigationBar, {\n      visualizer: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), this.Tree(), React.createElement(Tooltips, {\n      active: this.state.tooltips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  }\n\n  componentDidUpdate() {\n    this.state.tree.animateNodes();\n    $();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","$","NavigationBar","Tooltips","DefaultTree","BinarySearchTree","TreeVisualizer","Component","constructor","props","state","tree","operation","tooltips","toggleTooltips","bind","changeTree","performOperation","setState","tree_key","alert","generateTree","resetTree","reset","insert","remove","search","top","preOrder","inOrder","postOrder","levelOrder","Tree","name","transform","getScaleFactor","render","componentDidUpdate","animateNodes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery'\r\n\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\nimport Tooltips from './Tooltips/Tooltips.jsx'\r\n\r\nimport DefaultTree from './Trees/DefaultTree/DefaultTree.jsx'\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\n\r\nimport './TreeVisualizer.scss';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: new BinarySearchTree(),\r\n            operation: 'initial',\r\n            tooltips: false\r\n        };\r\n\r\n        this.toggleTooltips = this.toggleTooltips.bind(this);\r\n        this.changeTree     = this.changeTree.bind(this);\r\n        this.performOperation = this.performOperation.bind(this);\r\n    }\r\n\r\n    toggleTooltips() {\r\n        this.setState( { tooltips: ! this.state.tooltips } );\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        switch(tree_key) {\r\n            case 'BST': this.setState( { tree: new BinarySearchTree() } );\r\n                break;\r\n            case 'AVL': this.setState( { tree: new DefaultTree() } );\r\n                break;\r\n            case 'RBT': this.setState( { tree: new DefaultTree() } );\r\n                break;\r\n            case 'BHP': this.setState( { tree: new DefaultTree() } );\r\n                break;\r\n            default: this.setState( { tree: new DefaultTree() } );  //show error?, invalid tree\r\n                break;\r\n        }\r\n    }\r\n\r\n    performOperation(operation) {\r\n        alert(operation);\r\n    }\r\n\r\n    generateTree() {\r\n        this.state.tree.generateTree();\r\n        this.setState( { operation: 'generate' } );\r\n    }\r\n\r\n    resetTree() {\r\n        this.state.tree.reset();\r\n        this.setState( { operation: 'reset' } );\r\n    }\r\n\r\n    insert() {\r\n        this.state.tree.insert(4);\r\n        this.setState( { operation: 'insert' } );\r\n    }\r\n\r\n    remove() {\r\n        alert('remove');\r\n    }\r\n\r\n    search() {\r\n        alert('search');\r\n    }\r\n\r\n    top() {\r\n        alert('top');\r\n    }\r\n\r\n    preOrder() {\r\n        alert('preOrder');\r\n    }\r\n\r\n    inOrder() {\r\n        alert('inOrder');\r\n    }\r\n\r\n    postOrder() {\r\n        alert('postOrder');\r\n    }\r\n\r\n    levelOrder() {\r\n        alert('levelOrder');\r\n    }\r\n\r\n    Tree() {\r\n        return (\r\n            <>\r\n                <div\r\n                    id={ this.state.tree.name }\r\n                    className='tree'\r\n                    style={ {transform: this.state.tree.getScaleFactor()} }>\r\n\r\n                    { this.state.tree.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} />\r\n                \r\n                { this.Tree() }\r\n\r\n                <Tooltips active = {this.state.tooltips} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.state.tree.animateNodes();\r\n        $();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}