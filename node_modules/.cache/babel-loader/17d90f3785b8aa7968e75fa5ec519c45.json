{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport Queue from '../../Queue.jsx';\nimport $ from 'jquery';\nimport { randomIntFromInverval } from '../../Helpers.js';\nimport './BinarySearchTree.css';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinarySearchTree {\n  constructor() {\n    this.name = \"BinarySearchTree\";\n    this.root = null;\n  }\n\n  generateTree(elements = 10) {\n    this.root = null;\n    $('.node-wrapper').removeClass('visible');\n\n    for (let i = 0; i < elements; ++i) {\n      this.insert(randomIntFromInverval(1, 200));\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value < val) {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          break;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          break;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  animateNodes() {\n    let queue = new Queue();\n    queue.push($('.node-wrapper:not([node-value=\"null\"]):not(.visible)').first());\n    setTimeout(function () {\n      animateHelper(queue);\n    }, 300);\n  }\n\n  getScaleFactor() {\n    let scale_factor = window.innerWidth / (Math.pow(2, this.height() - 1) * 70);\n    return scale_factor > 1 ? 1 : scale_factor;\n  }\n\n  drawTree(node = this.root, tree_height = this.height(), curr_height = 0, pos = \"root\") {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.drawTree(node ? node.left : null, tree_height, curr_height + 1, \"left\");\n    const rightChild = this.drawTree(node ? node.right : null, tree_height, curr_height + 1, \"right\");\n    let classes = [\"node-wrapper\", pos].join(' ');\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, getCricle(\"null\")), leftChild, rightChild));\n    } else if (node === this.root) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: {\n          width: Math.pow(2, tree_height - 1) * 70 + 'px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, getCricle(node.value)), leftChild, rightChild));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, getCricle(node.value)), leftChild, rightChild, getConnectingLine(pos)));\n    }\n  }\n\n}\n\nfunction getCricle(val) {\n  return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n    className: \"circle node-value-circle\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"text\", {\n    className: \"text node-value-text\",\n    x: \"50%\",\n    y: \"50%\",\n    fill: \"black\",\n    \"text-anchor\": \"middle\",\n    \"dominant-baseline\": \"central\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, val), React.createElement(\"circle\", {\n    className: \"circle node-circle\",\n    r: \"24\",\n    cx: \"25\",\n    cy: \"25\",\n    stroke: \"black\",\n    fill: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })));\n}\n\nfunction getConnectingLine(pos) {\n  if (pos === \"left\") {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"line node-line\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"line\", {\n      class: \"line\",\n      x1: \"0\",\n      y1: \"50\",\n      x2: \"100%\",\n      y2: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })));\n  } else if (pos === \"right\") {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"line node-line\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"line\", {\n      class: \"line\",\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"100%\",\n      y2: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })));\n  } else {\n    return null;\n  }\n}\n\nfunction animateHelper(queue) {\n  if (!queue.empty()) {\n    let $_node = queue.front();\n    $_node.addClass('visible');\n    $_node.children('.node-wrapper:not([node-value=\"null\"])').each(function () {\n      queue.push($(this));\n    });\n    setTimeout(function () {\n      animateHelper(queue);\n    }, 300);\n  }\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","Queue","$","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","BinarySearchTree","name","root","generateTree","elements","removeClass","i","insert","reset","height","node","Math","max","curr","animateNodes","queue","push","first","setTimeout","animateHelper","getScaleFactor","scale_factor","window","innerWidth","pow","drawTree","tree_height","curr_height","pos","leftChild","rightChild","classes","join","getCricle","width","getConnectingLine","empty","$_node","front","addClass","children","each"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Queue from '../../Queue.jsx'\r\nimport $ from 'jquery'\r\nimport { randomIntFromInverval } from '../../Helpers.js'\r\nimport './BinarySearchTree.css'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree {\r\n    constructor() {\r\n        this.name = \"BinarySearchTree\";\r\n        this.root = null;\r\n    }\r\n\r\n    generateTree(elements = 10) {\r\n        this.root = null;\r\n        $('.node-wrapper').removeClass('visible');\r\n        \r\n        for (let i = 0; i < elements; ++i) {\r\n            this.insert( randomIntFromInverval(1, 200) );\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value < val) {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    break;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    break;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    animateNodes() {\r\n        let queue = new Queue();\r\n        queue.push( $('.node-wrapper:not([node-value=\"null\"]):not(.visible)').first() );\r\n        setTimeout(function(){animateHelper(queue);}, 300);\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = window.innerWidth / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return scale_factor > 1 ? 1 : scale_factor;\r\n    }\r\n\r\n    drawTree(node = this.root, tree_height = this.height(), curr_height = 0, pos = \"root\") {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.drawTree(node ? node.left  : null, tree_height, curr_height + 1, \"left\" );\r\n        const rightChild = this.drawTree(node ? node.right : null, tree_height, curr_height + 1, \"right\");\r\n        \r\n        let classes = [\"node-wrapper\", pos].join(' ');\r\n\r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value=\"null\"\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className=\"node-value\">\r\n                                {getCricle(\"null\")}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else if ( node === this.root ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value={node.value}\r\n                        node-layer={tree_height - curr_height}\r\n                        style={ {width: Math.pow(2, tree_height - 1) * 70 + 'px'} }>\r\n\r\n                            <div className=\"node-value\">\r\n                                {getCricle(node.value)}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value={node.value}\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className=\"node-value\">\r\n                                {getCricle(node.value)}\r\n                            </div>\r\n                            \r\n                            {leftChild}\r\n                            {rightChild}\r\n                            {getConnectingLine(pos)}\r\n                            \r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nfunction getCricle(val) {\r\n    return (\r\n        <>\r\n            <svg className=\"circle node-value-circle\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <text className=\"text node-value-text\" x=\"50%\" y=\"50%\" fill=\"black\" text-anchor=\"middle\" dominant-baseline=\"central\">\r\n                    {val}\r\n                </text>\r\n                <circle className=\"circle node-circle\" r=\"24\" cx=\"25\" cy=\"25\" stroke=\"black\" fill=\"none\" />\r\n            </svg>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction getConnectingLine(pos) {\r\n    if (pos === \"left\") {\r\n        return (\r\n            <>\r\n                <svg className=\"line node-line\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <line class=\"line\" x1=\"0\" y1=\"50\" x2=\"100%\" y2=\"0\"></line>\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n    else if (pos === \"right\") {\r\n        return (\r\n            <>\r\n                <svg className=\"line node-line\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <line class=\"line\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"50\"></line>\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction animateHelper(queue) {\r\n    if ( !queue.empty() ) {\r\n        let $_node = queue.front();\r\n        $_node.addClass('visible');\r\n        $_node.children('.node-wrapper:not([node-value=\"null\"])').each(function() {\r\n           queue.push( $(this) ); \r\n        });\r\n        setTimeout(function(){animateHelper(queue);}, 300);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}