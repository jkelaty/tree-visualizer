{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\NavigationBar\\\\NavigationBar.jsx\";\nimport React from 'react';\nimport logo from './logo.png';\nimport $ from 'jquery';\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport './NavigationBar.css';\nexport default class NavigationBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.visualizer = this.props.visualizer;\n    this.changeTree = this.changeTree.bind(this);\n    this.trees = {\n      BST: {\n        name: \"Binary Search Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      AVL: {\n        name: \"AVL Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      RBT: {\n        name: \"Red-Black Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      BHP: {\n        name: \"Binary Heap\",\n        operations: [\"Insert\", \"Top\"]\n      }\n    };\n    this.operations = {\n      Insert: this.visualizer.insert,\n      Remove: this.visualizer.remove,\n      Search: this.visualizer.search,\n      Top: this.visualizer.top\n    };\n    this.state = {\n      active_tree: this.visualizer.state.tree.key,\n      tooltips: false\n    };\n    $(document).click(function (e) {\n      if (!e.target.classList.contains('dropdown-toggle')) {\n        closeAllDropdowns();\n      }\n    });\n  }\n\n  changeTree(tree_key) {\n    this.setState({\n      active_tree: tree_key\n    });\n    this.visualizer.changeTree(tree_key);\n  }\n\n  showTooltips() {\n    this.setState({\n      tooltips: !this.state.tooltips\n    });\n  }\n\n  render() {\n    const treeActive = this.state.active_tree;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"navbar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navbar-logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"tree-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"#\",\n      onClick: () => openDropdown(\"tree-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, treeActive ? this.trees[this.state.active_tree][\"name\"] : \"Select..\", React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, Object.keys(this.trees).map((key, idx) => React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: () => this.changeTree(key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.trees[key][\"name\"]))))), treeActive ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"operations-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"#\",\n      onClick: () => openDropdown(\"operations-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Operations\", React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.trees[this.state.active_tree][\"operations\"].map((operation, idx) => React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: this.operations[operation],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, operation))))), React.createElement(\"div\", {\n      id: \"generate-tree\",\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.visualizer.generateTree,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Generate\")), React.createElement(\"div\", {\n      id: \"reset-tree\",\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.visualizer.resetTree,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(\"div\", {\n      id: \"tooltips-toggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"tooltips-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Tooltips\"), React.createElement(\"label\", {\n      className: \"switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      onClick: this.showTooltips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"slider round\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })))) : null));\n  }\n\n}\n\nfunction openDropdown(selector) {\n  if ($('#' + selector).hasClass('visible')) {\n    closeAllDropdowns();\n    return;\n  } else {\n    closeAllDropdowns();\n    $('#' + selector).addClass('visible');\n  }\n}\n\nfunction closeAllDropdowns() {\n  $('.dropdown').removeClass('visible');\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/NavigationBar/NavigationBar.jsx"],"names":["React","logo","$","NavigationBar","Component","constructor","props","visualizer","changeTree","bind","trees","BST","name","operations","AVL","RBT","BHP","Insert","insert","Remove","remove","Search","search","Top","top","state","active_tree","tree","key","tooltips","document","click","e","target","classList","contains","closeAllDropdowns","tree_key","setState","showTooltips","render","treeActive","openDropdown","Object","keys","map","idx","operation","generateTree","resetTree","selector","hasClass","addClass","removeClass"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from './logo.png'\r\nimport $ from 'jquery'\r\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './NavigationBar.css';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.visualizer = this.props.visualizer;\r\n        this.changeTree = this.changeTree.bind(this);\r\n        \r\n        this.trees = {\r\n            BST : {\r\n                name : \"Binary Search Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\",\r\n                ]\r\n            },\r\n            AVL : {\r\n                name : \"AVL Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\"\r\n                ]\r\n            },\r\n            RBT : {\r\n                name : \"Red-Black Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\"\r\n                ]\r\n            },\r\n            BHP : {\r\n                name : \"Binary Heap\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Top\"\r\n                ]\r\n            },\r\n        };\r\n\r\n        this.operations = {\r\n            Insert : this.visualizer.insert,\r\n            Remove : this.visualizer.remove,\r\n            Search : this.visualizer.search,\r\n            Top    : this.visualizer.top\r\n        };\r\n\r\n        this.state = {\r\n            active_tree: this.visualizer.state.tree.key,\r\n            tooltips: false\r\n        };\r\n\r\n        $(document).click(function(e) {\r\n            if ( ! e.target.classList.contains('dropdown-toggle') ) {\r\n                closeAllDropdowns();\r\n            }\r\n        });\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        this.setState( { active_tree: tree_key } );\r\n        this.visualizer.changeTree(tree_key);\r\n    }\r\n\r\n    showTooltips() {\r\n        this.setState( { tooltips: ! this.state.tooltips } );\r\n    }\r\n\r\n    render() {\r\n        const treeActive = this.state.active_tree;\r\n\r\n        return (\r\n            <>\r\n                <div id=\"navbar-wrapper\">\r\n                    <div className=\"navbar-logo\">\r\n                        <img src={logo} alt=\"logo\" />\r\n                    </div>\r\n                    \r\n                    <div id=\"tree-dropdown\" className=\"dropdown\">\r\n                        <a\r\n                            className=\"dropdown-toggle\"\r\n                            href=\"#\"\r\n                            onClick={() => openDropdown(\"tree-dropdown\")}>\r\n                            { treeActive ? this.trees[ this.state.active_tree ][ \"name\" ] : \"Select..\" }\r\n                            <i className=\"fa fa-caret-down\"></i>\r\n                        </a>\r\n\r\n                        <ul className=\"dropdown-menu\">\r\n                            {Object.keys(this.trees).map((key, idx) => (\r\n                                <li className=\"dropdown-menu-option\">\r\n                                    <a\r\n                                        href=\"#\"\r\n                                        onClick={() => this.changeTree(key)}>\r\n                                        {this.trees[ key ][ \"name\" ]}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    \r\n                    { treeActive ? (\r\n                        <>\r\n                            <div id=\"operations-dropdown\" className=\"dropdown\">\r\n                                <a\r\n                                    className=\"dropdown-toggle\"\r\n                                    href=\"#\"\r\n                                    onClick={() => openDropdown(\"operations-dropdown\")}>\r\n                                    Operations\r\n                                    <i className=\"fa fa-caret-down\"></i>\r\n                                </a>\r\n\r\n                                <ul className=\"dropdown-menu\">\r\n                                    {this.trees[ this.state.active_tree ][ \"operations\" ].map((operation, idx) => (\r\n                                        <li className=\"dropdown-menu-option\">\r\n                                            <a\r\n                                                href=\"#\"\r\n                                                onClick={this.operations[ operation ]}>\r\n                                                {operation}\r\n                                            </a>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        \r\n                            <div id=\"generate-tree\" className=\"navbar-button\">\r\n                                <button\r\n                                    onClick={this.visualizer.generateTree}>\r\n                                    Generate\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id=\"reset-tree\" className=\"navbar-button\">\r\n                                <button\r\n                                    onClick={this.visualizer.resetTree}>\r\n                                    Reset\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id=\"tooltips-toggle\">\r\n                                <span className=\"tooltips-text\">Tooltips</span>\r\n                                <label className=\"switch\">\r\n                                    <input type=\"checkbox\" onClick={this.showTooltips} />\r\n                                    <span className=\"slider round\" />\r\n                                </label>\r\n                            </div>\r\n                        </>\r\n                    ) : ( null ) }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction openDropdown(selector) {\r\n    if ( $('#' + selector).hasClass('visible') ) {\r\n        closeAllDropdowns();\r\n        return;\r\n    }\r\n    else {\r\n        closeAllDropdowns();\r\n        $('#' + selector).addClass('visible');\r\n    }\r\n}\r\n\r\nfunction closeAllDropdowns() {\r\n    $('.dropdown').removeClass('visible');\r\n}"]},"metadata":{},"sourceType":"module"}