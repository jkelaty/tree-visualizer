{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport BinaryTree from './BinaryTree.jsx';\nimport './TreeVisualizer.css';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"test\",\n      tree: new BinaryTree()\n    };\n    this.state.tree.insert(1);\n    this.state.tree.insert(3);\n    this.state.tree.insert(5);\n    this.state.tree.insert(7);\n  }\n\n  render() {\n    return buildTreeInDOM(this.state);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    let title = \"test2\";\n    this.setState({\n      title\n    });\n  }\n\n}\n/*function randomIntFromInverval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}*/\n\nfunction buildTreeInDOM(state) {\n  /*const {array} = state;\r\n  return (\r\n      <>\r\n          {array.map((value,idx) => (\r\n              <div ClassName=\"array-bar\" arr_key={idx}>\r\n                  {value}\r\n              </div> \r\n          ))}\r\n      </>\r\n  );*/\n  const array = state.tree.levelOrder();\n  let return_dom = [];\n\n  for (const val in array) {\n    return_dom.push(React.createElement(\"div\", {\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"node-value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, val ? array[val][value] : \"NULL\")));\n  }\n\n  return React.createElement(React.Fragment, null, return_dom);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"node\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"node-value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"1\"), React.createElement(\"div\", {\n    className: \"node\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"node-value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"4\")), React.createElement(\"div\", {\n    className: \"node\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"node-value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"5\"))));\n}\n/* test js\r\nvar $node = $('.node').eq(1);\r\nvar element = $('.node').eq(0).clone();\r\nelement.appendTo( $node );\r\nelement = element.clone();\r\nelement.appendTo( $node );\r\n$node.siblings('.node').css( 'width', $node.css('width') );\r\n*/","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","BinaryTree","TreeVisualizer","Component","constructor","props","state","title","tree","insert","render","buildTreeInDOM","componentDidMount","resetArray","setState","array","levelOrder","return_dom","val","push","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,sBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,MADE;AAETC,MAAAA,IAAI,EAAE,IAAIP,UAAJ;AAFG,KAAb;AAKA,SAAKK,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,CAAuB,CAAvB;AACA,SAAKH,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,CAAuB,CAAvB;AACA,SAAKH,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,CAAuB,CAAvB;AACA,SAAKH,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,CAAuB,CAAvB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WAAOC,cAAc,CAAC,KAAKL,KAAN,CAArB;AACH;;AAEDM,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,QAAIN,KAAK,GAAG,OAAZ;AACA,SAAKO,QAAL,CAAc;AAACP,MAAAA;AAAD,KAAd;AACH;;AA1BuD;AA6B5D;;;;AAIA,SAASI,cAAT,CAAwBL,KAAxB,EAA+B;AAC3B;;;;;;;;;;AAWA,QAAMS,KAAK,GAAGT,KAAK,CAACE,IAAN,CAAWQ,UAAX,EAAd;AACA,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,MAAMC,GAAX,IAAkBH,KAAlB,EAAyB;AACrBE,IAAAA,UAAU,CAACE,IAAX,CACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BD,GAAG,GAAGH,KAAK,CAACG,GAAD,CAAL,CAAWE,KAAX,CAAH,GAAuB,MAAvD,CADJ,CADJ;AAKH;;AAED,SACI,0CACKH,UADL,CADJ;AAMA,SACI,0CACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADA,EAEI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,CAFJ,EAKI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,CALJ,CADJ,CADJ;AAaH;AAED","sourcesContent":["import React from 'react';\r\nimport BinaryTree from './BinaryTree.jsx'\r\nimport './TreeVisualizer.css';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            title: \"test\",\r\n            tree: new BinaryTree()           \r\n        };\r\n\r\n        this.state.tree.insert(1);\r\n        this.state.tree.insert(3);\r\n        this.state.tree.insert(5);\r\n        this.state.tree.insert(7);\r\n    }\r\n\r\n    render() {\r\n        return buildTreeInDOM(this.state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        let title = \"test2\"\r\n        this.setState({title});\r\n    }\r\n}\r\n\r\n/*function randomIntFromInverval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}*/\r\n\r\nfunction buildTreeInDOM(state) {\r\n    /*const {array} = state;\r\n    return (\r\n        <>\r\n            {array.map((value,idx) => (\r\n                <div ClassName=\"array-bar\" arr_key={idx}>\r\n                    {value}\r\n                </div> \r\n            ))}\r\n        </>\r\n    );*/\r\n\r\n    const array = state.tree.levelOrder();\r\n    let return_dom = [];\r\n\r\n    for (const val in array) {\r\n        return_dom.push(\r\n            <div className=\"node\">\r\n                <div className=\"node-value\">{val ? array[val][value] : \"NULL\"}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {return_dom}\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"node\">\r\n            <div className=\"node-value\">1</div>\r\n                <div className=\"node\">\r\n                    <div className=\"node-value\">4</div>\r\n                </div>\r\n                <div className=\"node\">\r\n                    <div className=\"node-value\">5</div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n/* test js\r\nvar $node = $('.node').eq(1);\r\nvar element = $('.node').eq(0).clone();\r\nelement.appendTo( $node );\r\nelement = element.clone();\r\nelement.appendTo( $node );\r\n$node.siblings('.node').css( 'width', $node.css('width') );\r\n*/"]},"metadata":{},"sourceType":"module"}