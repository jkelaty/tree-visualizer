{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\BinaryTree.jsx\";\nimport React from 'react';\nimport Queue from './Queue.jsx';\n\nclass BinaryNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinaryTree {\n  constructor() {\n    this.root = null;\n  }\n\n  resetTree() {//this.root = null;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinaryNode(val);\n      return;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (val < curr.value) {\n        if (curr.left == null) {\n          curr.left = new BinaryNode(val);\n          return;\n        }\n\n        curr = curr.left;\n      } else {\n        if (curr.right == null) {\n          curr.right = new BinaryNode(val);\n          return;\n        }\n\n        curr = curr.right;\n      }\n    }\n  }\n\n  createDOM(node) {\n    if (node == null) return;\n    const leftChild = this.createDOM(node.left);\n    const rightChild = this.createDOM(node.right);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"node\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"node-value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"1\"), leftChild, rightChild));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/BinaryTree.jsx"],"names":["React","Queue","BinaryNode","constructor","val","value","left","right","BinaryTree","root","resetTree","insert","curr","createDOM","node","leftChild","rightChild"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKC,KAAL,GAAaD,GAAb;AACA,SAAKE,IAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,IAAb;AACH;;AALY;;AAQjB,eAAe,MAAMC,UAAN,CAAiB;AAC5BL,EAAAA,WAAW,GAAG;AACV,SAAKM,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,SAAS,GAAG,CACR;AACH;;AAEDC,EAAAA,MAAM,CAACP,GAAD,EAAM;AACR,QAAI,KAAKK,IAAL,IAAa,IAAjB,EAAuB;AACnB,WAAKA,IAAL,GAAY,IAAIP,UAAJ,CAAeE,GAAf,CAAZ;AACA;AACH;;AAED,QAAIQ,IAAI,GAAG,KAAKH,IAAhB;;AAEA,WAAO,IAAP,EAAa;AACT,UAAIL,GAAG,GAAGQ,IAAI,CAACP,KAAf,EAAsB;AAClB,YAAGO,IAAI,CAACN,IAAL,IAAa,IAAhB,EAAsB;AAClBM,UAAAA,IAAI,CAACN,IAAL,GAAY,IAAIJ,UAAJ,CAAeE,GAAf,CAAZ;AACA;AACH;;AACDQ,QAAAA,IAAI,GAAGA,IAAI,CAACN,IAAZ;AACH,OAND,MAOK;AACD,YAAGM,IAAI,CAACL,KAAL,IAAc,IAAjB,EAAuB;AACnBK,UAAAA,IAAI,CAACL,KAAL,GAAa,IAAIL,UAAJ,CAAeE,GAAf,CAAb;AACA;AACH;;AACDQ,QAAAA,IAAI,GAAGA,IAAI,CAACL,KAAZ;AACH;AACJ;AACJ;;AAEDM,EAAAA,SAAS,CAACC,IAAD,EAAO;AACZ,QAAKA,IAAI,IAAI,IAAb,EAAoB;AAEpB,UAAMC,SAAS,GAAG,KAAKF,SAAL,CAAeC,IAAI,CAACR,IAApB,CAAlB;AACA,UAAMU,UAAU,GAAG,KAAKH,SAAL,CAAeC,IAAI,CAACP,KAApB,CAAnB;AAEA,WACI,0CACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,EAEKQ,SAFL,EAGKC,UAHL,CADJ,CADJ;AASH;;AAlD2B","sourcesContent":["import React from 'react';\r\nimport Queue from './Queue.jsx'\r\n\r\nclass BinaryNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinaryTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    resetTree() {\r\n        //this.root = null;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinaryNode(val);\r\n            return;\r\n        }\r\n\r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (val < curr.value) {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinaryNode(val);\r\n                    return;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n            else {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinaryNode(val);\r\n                    return;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    createDOM(node) {\r\n        if ( node == null ) return;\r\n\r\n        const leftChild = this.createDOM(node.left);\r\n        const rightChild = this.createDOM(node.right);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"node\">\r\n                    <div className=\"node-value\">1</div>\r\n                    {leftChild}\r\n                    {rightChild}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}