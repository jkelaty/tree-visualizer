{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\NavigationBar\\\\NavigationBar.jsx\";\nimport React from 'react';\nimport $ from 'jquery';\nimport logo from './logo.png';\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport './NavigationBar.css';\nexport default class NavigationBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.visualizer = this.props.visualizer;\n    this.trees = {\n      BST: {\n        name: \"Binary Search Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\", \"Traversals\"]\n      },\n      AVL: {\n        name: \"AVL Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      RBT: {\n        name: \"Red-Black Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      BHP: {\n        name: \"Binary Heap\",\n        operations: [\"Insert\", \"Top\"]\n      }\n    };\n    this.traversals = [{\n      name: \"Pre-Order\",\n      callback: \"PreOrder\"\n    }, {\n      name: \"In-Order\",\n      callback: \"InOrder\"\n    }, {\n      name: \"Post-Order\",\n      callback: \"PostOrder\"\n    }, {\n      name: \"Level Order\",\n      callback: \"LevelOrder\"\n    }];\n    this.operations = {\n      Insert: this.visualizer.insert,\n      Remove: this.visualizer.remove,\n      Search: this.visualizer.search,\n      Top: this.visualizer.top,\n      PreOrder: this.visualizer.preOrder,\n      InOrder: this.visualizer.inOrder,\n      PostOrder: this.visualizer.postOrder,\n      LevelOrder: this.visualizer.levelOrder\n    };\n    this.state = {\n      active_tree: this.visualizer.state.tree.key\n    };\n  }\n\n  static getDerivedStateFromProps(newProps, prevState) {\n    if (prevState.active_tree !== newProps.visualizer.state.tree.key) {\n      return {\n        active_tree: newProps.visualizer.state.tree.key\n      };\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    const treeActive = this.state.active_tree;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"navbar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navbar-logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"tree-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"# \",\n      onClick: () => openDropdown(\"tree-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, treeActive ? this.trees[this.state.active_tree][\"name\"] : \"Select..\", React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, Object.keys(this.trees).map((key, idx) => React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"# \",\n      onClick: () => this.visualizer.changeTree(key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.trees[key][\"name\"]))))), treeActive ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"operations-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"# \",\n      onClick: () => openDropdown(\"operations-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Operations\", React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.trees[this.state.active_tree][\"operations\"].map((operation, op_idx) => operation === \"Traversals\" ? React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      key: op_idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"# \",\n      onClick: () => openSubmenu(\"traversals-submenu\", \"operations-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, operation), React.createElement(\"ul\", {\n      id: \"traversals-submenu\",\n      className: \"dropdown-menu submenu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, Object.keys(this.traversals).map((traversal, tr_idx) => React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      key: tr_idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"# \",\n      onClick: this.operations[this.traversals[tr_idx][\"callback\"]],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, this.traversals[tr_idx][\"name\"]))))) : React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      key: op_idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"# \",\n      onClick: this.operations[operation],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, operation))))), React.createElement(\"div\", {\n      id: \"generate-tree\",\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.visualizer.generateTree,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Generate\")), React.createElement(\"div\", {\n      id: \"reset-tree\",\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.visualizer.resetTree,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(\"div\", {\n      id: \"tooltips-toggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"tooltips-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Tooltips:\"), React.createElement(\"label\", {\n      className: \"switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      onClick: this.visualizer.toggleTooltips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"slider round\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })))) : null));\n  }\n\n}\n\nfunction openDropdown(selector) {\n  if ($('#' + selector).hasClass('visible')) {\n    closeAllDropdowns();\n    return;\n  } else {\n    closeAllDropdowns();\n    $('#' + selector).addClass('visible');\n  }\n}\n\nfunction openSubmenu(selector, parent) {\n  $('#' + selector).addClass('visible');\n}\n\nfunction closeAllDropdowns() {\n  $('.dropdown.visible').removeClass('visible');\n}\n\n$(document).click(function (e) {\n  if (!e.target.classList.contains('dropdown-toggle')) {\n    closeAllDropdowns();\n  }\n});","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/NavigationBar/NavigationBar.jsx"],"names":["React","$","logo","NavigationBar","Component","constructor","props","visualizer","trees","BST","name","operations","AVL","RBT","BHP","traversals","callback","Insert","insert","Remove","remove","Search","search","Top","top","PreOrder","preOrder","InOrder","inOrder","PostOrder","postOrder","LevelOrder","levelOrder","state","active_tree","tree","key","getDerivedStateFromProps","newProps","prevState","render","treeActive","openDropdown","Object","keys","map","idx","changeTree","operation","op_idx","openSubmenu","traversal","tr_idx","generateTree","resetTree","toggleTooltips","selector","hasClass","closeAllDropdowns","addClass","parent","removeClass","document","click","e","target","classList","contains"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery'\r\n\r\nimport logo from './logo.png'\r\n\r\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './NavigationBar.css';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.visualizer = this.props.visualizer;\r\n        \r\n        this.trees = {\r\n            BST : {\r\n                name : \"Binary Search Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\",\r\n                    \"Traversals\"\r\n                ]\r\n            },\r\n            AVL : {\r\n                name : \"AVL Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\"\r\n                ]\r\n            },\r\n            RBT : {\r\n                name : \"Red-Black Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\"\r\n                ]\r\n            },\r\n            BHP : {\r\n                name : \"Binary Heap\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Top\"\r\n                ]\r\n            },\r\n        };\r\n\r\n        this.traversals = [\r\n            { name: \"Pre-Order\",   callback: \"PreOrder\"   },\r\n            { name: \"In-Order\",    callback: \"InOrder\"    },\r\n            { name: \"Post-Order\",  callback: \"PostOrder\"  },\r\n            { name: \"Level Order\", callback: \"LevelOrder\" }\r\n        ];\r\n\r\n        this.operations = {\r\n            Insert     : this.visualizer.insert,\r\n            Remove     : this.visualizer.remove,\r\n            Search     : this.visualizer.search,\r\n            Top        : this.visualizer.top,\r\n            PreOrder   : this.visualizer.preOrder,\r\n            InOrder    : this.visualizer.inOrder,\r\n            PostOrder  : this.visualizer.postOrder,\r\n            LevelOrder : this.visualizer.levelOrder\r\n        };\r\n\r\n        this.state = {\r\n            active_tree: this.visualizer.state.tree.key\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(newProps, prevState) {\r\n        if ( prevState.active_tree !== newProps.visualizer.state.tree.key ) {\r\n            return {active_tree: newProps.visualizer.state.tree.key};\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const treeActive = this.state.active_tree;\r\n\r\n        return (\r\n            <>\r\n                <div id=\"navbar-wrapper\">\r\n\r\n                    <div className=\"navbar-logo\">\r\n                        <img src={logo} alt=\"logo\" />\r\n                    </div>\r\n                    \r\n                    <div id=\"tree-dropdown\" className=\"dropdown\">\r\n                        <a\r\n                            className=\"dropdown-toggle\"\r\n                            href=\"# \"\r\n                            onClick={() => openDropdown(\"tree-dropdown\")}>\r\n                            { treeActive ? this.trees[ this.state.active_tree ][ \"name\" ] : \"Select..\" }\r\n                            <i className=\"fa fa-caret-down\"></i>\r\n                        </a>\r\n\r\n                        <ul className=\"dropdown-menu\">\r\n                            {Object.keys(this.trees).map((key, idx) => (\r\n                                <li className=\"dropdown-menu-option\" key={idx}>\r\n                                    <a\r\n                                        href=\"# \"\r\n                                        onClick={() => this.visualizer.changeTree(key)}>\r\n                                        {this.trees[ key ][ \"name\" ]}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    \r\n                    { treeActive ? (\r\n                        <>\r\n                            <div id=\"operations-dropdown\" className=\"dropdown\">\r\n                                <a\r\n                                    className=\"dropdown-toggle\"\r\n                                    href=\"# \"\r\n                                    onClick={() => openDropdown(\"operations-dropdown\")}>\r\n                                    Operations\r\n                                    <i className=\"fa fa-caret-down\"></i>\r\n                                </a>\r\n\r\n                                <ul className=\"dropdown-menu\">\r\n                                    {this.trees[ this.state.active_tree ][ \"operations\" ].map((operation, op_idx) => (\r\n\r\n                                        (operation === \"Traversals\") ? (\r\n                                            <li className=\"dropdown-menu-option\" key={op_idx}>\r\n                                                <a\r\n                                                    href=\"# \"\r\n                                                    onClick={() => openSubmenu(\"traversals-submenu\", \"operations-dropdown\")}>\r\n                                                    {operation}\r\n                                                </a>\r\n\r\n                                                <ul id=\"traversals-submenu\" className=\"dropdown-menu submenu\">\r\n                                                    {Object.keys(this.traversals).map((traversal, tr_idx) => (\r\n                                                        <li className=\"dropdown-menu-option\" key={tr_idx}>\r\n                                                            <a\r\n                                                                href=\"# \"\r\n                                                                onClick={this.operations[ this.traversals[ tr_idx ][ \"callback\" ] ]}>\r\n                                                                {this.traversals[ tr_idx ][ \"name\" ]}\r\n                                                            </a>\r\n                                                        </li>\r\n                                                    ))}\r\n                                                </ul>\r\n                                            </li>\r\n                                        ) : (\r\n                                            <li className=\"dropdown-menu-option\" key={op_idx}>\r\n                                                <a\r\n                                                    href=\"# \"\r\n                                                    onClick={this.operations[ operation ]}>\r\n                                                    {operation}\r\n                                                </a>\r\n                                            </li>\r\n                                        )\r\n\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        \r\n                            <div id=\"generate-tree\" className=\"navbar-button\">\r\n                                <button\r\n                                    onClick={this.visualizer.generateTree}>\r\n                                    Generate\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id=\"reset-tree\" className=\"navbar-button\">\r\n                                <button\r\n                                    onClick={this.visualizer.resetTree}>\r\n                                    Reset\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div id=\"tooltips-toggle\">\r\n                                <span className=\"tooltips-text\">Tooltips:</span>\r\n                                <label className=\"switch\">\r\n                                    <input type=\"checkbox\" onClick={this.visualizer.toggleTooltips} />\r\n                                    <span className=\"slider round\" />\r\n                                </label>\r\n                            </div>\r\n                        </>\r\n                    ) : ( null ) }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction openDropdown(selector) {\r\n    if ( $('#' + selector).hasClass('visible') ) {\r\n        closeAllDropdowns();\r\n        return;\r\n    }\r\n    else {\r\n        closeAllDropdowns();\r\n        $('#' + selector).addClass('visible');\r\n    }\r\n}\r\n\r\nfunction openSubmenu(selector, parent) {\r\n    $('#' + selector).addClass('visible');\r\n}\r\n\r\nfunction closeAllDropdowns() {\r\n    $('.dropdown.visible').removeClass('visible');\r\n}\r\n\r\n$(document).click(function(e) {\r\n    if ( ! e.target.classList.contains('dropdown-toggle') ) {\r\n        closeAllDropdowns();\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}