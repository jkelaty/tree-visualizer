{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport NavigationBar from './NavigationBar/NavigationBar.jsx';\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx';\nimport './TreeVisualizer.css';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: new BinarySearchTree()\n    };\n  }\n\n  changeTree(tree_key) {\n    switch (tree_key) {\n      case \"BST\":\n        this.setState({\n          tree: new BinarySearchTree()\n        });\n        break;\n\n      case \"AVL\":\n      case \"RBT\":\n      case \"BHP\":\n      default: //show error\n\n    }\n  }\n\n  initialize() {\n    this.state.tree.initialize();\n    this.forceUpdate();\n  }\n\n  insert(element) {\n    this.state.tree.insert(element);\n    this.forceUpdate();\n  }\n\n  remove() {\n    this.forceUpdate();\n  }\n\n  find() {\n    this.forceUpdate();\n  }\n\n  Tree() {\n    return this.state.tree.paint();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(NavigationBar, {\n      visualizer: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"tree\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.Tree()));\n  }\n\n  componentDidUpdate() {\n    this.state.tree.animateNodes();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","NavigationBar","BinarySearchTree","TreeVisualizer","Component","constructor","props","state","tree","changeTree","tree_key","setState","initialize","forceUpdate","insert","element","remove","find","Tree","paint","render","componentDidUpdate","animateNodes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,gBAAP,MAA6B,+CAA7B;AACA,OAAO,sBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BH,KAAK,CAACI,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,IAAIN,gBAAJ;AADG,KAAb;AAGH;;AAEDO,EAAAA,UAAU,CAACC,QAAD,EAAW;AACjB,YAAOA,QAAP;AACI,WAAK,KAAL;AAAY,aAAKC,QAAL,CAAe;AAAEH,UAAAA,IAAI,EAAE,IAAIN,gBAAJ;AAAR,SAAf;AACR;;AACJ,WAAK,KAAL;AACA,WAAK,KAAL;AACA,WAAK,KAAL;AACA,cANJ,CAOQ;;AAPR;AASH;;AAEDU,EAAAA,UAAU,GAAG;AACT,SAAKL,KAAL,CAAWC,IAAX,CAAgBI,UAAhB;AACA,SAAKC,WAAL;AACH;;AAEDC,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,SAAKR,KAAL,CAAWC,IAAX,CAAgBM,MAAhB,CAAuBC,OAAvB;AACA,SAAKF,WAAL;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,SAAKH,WAAL;AACH;;AAEDI,EAAAA,IAAI,GAAG;AACH,SAAKJ,WAAL;AACH;;AAEDK,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKX,KAAL,CAAWC,IAAX,CAAgBW,KAAhB,EAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI,0CACI,oBAAC,aAAD;AAAe,MAAA,UAAU,EAAI,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI;AAAK,MAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKF,IAAL,EADN,CAHJ,CADJ;AASH;;AAEDG,EAAAA,kBAAkB,GAAG;AACjB,SAAKd,KAAL,CAAWC,IAAX,CAAgBc,YAAhB;AACH;;AAzDuD","sourcesContent":["import React from 'react';\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\nimport './TreeVisualizer.css';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: new BinarySearchTree()         \r\n        };\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        switch(tree_key) {\r\n            case \"BST\": this.setState( { tree: new BinarySearchTree() } );\r\n                break;\r\n            case \"AVL\":\r\n            case \"RBT\":\r\n            case \"BHP\":\r\n            default:\r\n                //show error\r\n        }\r\n    }\r\n\r\n    initialize() {\r\n        this.state.tree.initialize();\r\n        this.forceUpdate();\r\n    }\r\n\r\n    insert(element) {\r\n        this.state.tree.insert(element)\r\n        this.forceUpdate();\r\n    }\r\n\r\n    remove() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    find() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    Tree() {\r\n        return this.state.tree.paint();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} />\r\n                \r\n                <div id=\"tree\">\r\n                    { this.Tree() }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.state.tree.animateNodes();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}