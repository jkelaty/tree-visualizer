{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport BinarySearchTreeTooltips from './BinarySearchTreeTooltips/BinarySearchTreeTooltips.jsx';\nimport InputModal from '../../Additional/InputModal/InputModal.jsx';\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx';\nimport Queue from '../../Additional/Queue.js';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n    this.animations = {\n      initial: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      visited: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      success: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      removed: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      }\n    };\n    this.moveAnimations = {\n      active: false,\n      delay: 0,\n      css: {\n        entering: {},\n        entered: {},\n        exiting: {},\n        exited: {}\n      }\n    };\n  }\n\n}\n\nexport default class BinarySearchTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.visibleClasses = {\n      appearDone: 'visible',\n      enterDone: 'visible',\n      exit: 'visible'\n    };\n    this.operationSteps = {\n      Initial: ['Initial'],\n      Generate: ['Reset', 'Generate'],\n      Reset: ['Hide', 'Reset'],\n      Insert: ['Input', 'Insert', 'Complete'],\n      Remove: ['Input', 'Remove 1', 'Remove 2', 'Remove 3', 'Remove 4', 'Complete'],\n      Search: ['Input', 'Search'],\n      'Pre-Order': ['Traverse'],\n      'In-Order': ['Traverse'],\n      'Post-Order': ['Traverse'],\n      'Level Order': ['Traverse']\n    };\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.removeValue = null;\n    this.targetValue = null;\n    this.targetNode = null;\n    this.timeout = 0;\n    this.input = false;\n    this.tooltipsStep = this.initialStateOperation;\n    this.waiting = false;\n    this.errorMessage = {\n      message: '',\n      key: null\n    };\n    this.state = {\n      operation: this.initialStateOperation,\n      step: 0,\n      tooltips: false,\n      destroy: false\n    };\n    this.receiveInput = this.receiveInput.bind(this);\n    this.advanceOperationStepFromTooltips = this.advanceOperationStepFromTooltips.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      operation: 'Generate',\n      step: 0\n    });\n  }\n\n  static getDerivedStateFromProps(newProps, state) {\n    const initialStateOperation = 'Initial';\n    const destroyStateOperation = 'Destroy';\n\n    if (newProps.operation === destroyStateOperation) {\n      return {\n        operation: 'Reset',\n        step: 0,\n        destroy: true\n      };\n    } else if (newProps.operation !== initialStateOperation) {\n      if (state.operation === initialStateOperation) {\n        return {\n          operation: newProps.operation,\n          tooltips: newProps.tooltips\n        };\n      } else if (newProps.tooltips !== state.tooltips) {\n        return {\n          tooltips: newProps.tooltips\n        };\n      }\n    } else if (newProps.tooltips !== state.tooltips) {\n      return {\n        tooltips: newProps.tooltips\n      };\n    }\n\n    return null;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.destroy) {\n      return true;\n    } else if (this.waiting && this.state.tooltips === nextState.tooltips) {\n      if (nextProps.operation !== this.initialStateOperation && nextProps.operation !== this.state.operation) {\n        this.errorMessage['message'] = 'Error: Tree performing operation';\n        this.errorMessage['key'] = new Date().getTime();\n        return true;\n      }\n\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    this.performOperationStep();\n    return React.createElement(React.Fragment, null, React.createElement(InputModal, {\n      active: this.input,\n      operation: this.state.operation,\n      callback: this.receiveInput,\n      key: this.input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      message: this.errorMessage['message'],\n      key: this.errorMessage['key'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, this.Tree()), React.createElement(BinarySearchTreeTooltips, {\n      active: this.state.tooltips,\n      operation: this.tooltipsStep,\n      next: this.advanceOperationStepFromTooltips,\n      timeout: this.timeout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }));\n  }\n\n  componentDidUpdate() {\n    this.advanceOperationStep();\n  }\n  /* Handle calling function to perform animations for a given operation */\n\n\n  performOperationStep() {\n    switch (this.state.operation) {\n      case 'Generate':\n        this.GenerateTree();\n        break;\n\n      case 'Reset':\n        this.ResetTree();\n        break;\n\n      case 'Insert':\n        this.InsertInTree();\n        break;\n\n      case 'Remove':\n        this.RemoveFromTree();\n        break;\n\n      case 'Search':\n        this.SearchTree();\n        break;\n\n      case 'Pre-Order':\n      case 'In-Order':\n      case 'Post-Order':\n      case 'Level Order':\n        this.TraverseTree();\n        break;\n\n      case 'Initial':\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n  /* Advances operation step asynchonously based on timeout set */\n\n\n  advanceOperationStep() {\n    if (this.state.operation !== this.initialStateOperation) {\n      if (this.state.step >= this.operationSteps[this.state.operation].length - 1) {\n        if (!this.waiting) {\n          let _this = this;\n\n          _this.waiting = true;\n          setTimeout(function () {\n            _this.waiting = false;\n\n            if (!_this.state.tooltips || _this.timeout === 0 || _this.state.operation === 'Generate' || _this.state.operation === 'Reset') {\n              _this.setState({\n                operation: 'Initial',\n                step: 0\n              });\n            }\n          }, _this.timeout);\n        }\n      } else {\n        if (this.operationSteps[this.state.operation][this.state.step] === 'Input') return;\n\n        if (!this.waiting) {\n          let _this = this;\n\n          _this.waiting = true;\n          setTimeout(function () {\n            _this.waiting = false;\n\n            if (!_this.state.tooltips || _this.timeout === 0 || _this.state.operation === 'Generate' || _this.state.operation === 'Reset') {\n              _this.setState({\n                step: _this.state.step + 1\n              });\n            }\n          }, _this.timeout);\n        }\n      }\n    }\n  }\n\n  advanceOperationStepFromTooltips() {\n    if (this.state.step >= this.operationSteps[this.state.operation].length - 1) {\n      this.setState({\n        operation: 'Initial',\n        step: 0\n      });\n    } else {\n      this.setState({\n        step: this.state.step + 1\n      });\n    }\n  }\n  /* Basic internal tree operations */\n\n\n  insertNumElements(elements) {\n    for (let i = 0; i < elements; ++i) {\n      let val = randomIntFromInverval(1, 150);\n\n      if (this.insert(val)) {\n        if (this.height() > 5) {\n          this.root = this.remove(val);\n          --i;\n        }\n      } else {\n        --i;\n      }\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node === null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  contains(val, node = this.root) {\n    if (!node) return false;\n\n    if (val < node.value) {\n      return this.contains(val, node.left);\n    } else if (val > node.value) {\n      return this.contains(val, node.right);\n    } else {\n      return true;\n    }\n  }\n\n  insert(val) {\n    if (this.root === null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value === val) {\n        //tree contains key already\n        return false;\n      } else if (curr.value < val) {\n        if (curr.right === null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left === null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  remove(val, node = this.root) {\n    if (!val) return;\n    if (node === null) return node;\n\n    if (val < node.value) {\n      node.left = this.remove(val, node.left);\n    } else if (val > node.value) {\n      node.right = this.remove(val, node.right);\n    } else {\n      if (node.left === null) {\n        return node.right;\n      } else if (node.right === null) {\n        return node.left;\n      } else {\n        node.value = this.inOrderSuccessor(node.right);\n        node.right = this.remove(node.value, node.right);\n      }\n    }\n\n    return node;\n  }\n\n  inOrderSuccessor(node) {\n    if (node.left !== null) {\n      return this.inOrderSuccessor(node.left);\n    } else {\n      return node.value;\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n  /* Handle creating Tree nodes and lines in DOM */\n\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left');\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n    const classes = ['node-wrapper', pos].join(' ');\n\n    if (node === null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }), leftChild, rightChild));\n    } else {\n      const rootWidth = {\n        width: node === this.root ? Math.pow(2, tree_height - 1) * 70 + 'px' : null\n      };\n      return React.createElement(React.Fragment, null, React.createElement(Transition, {\n        in: node.moveAnimations['active'],\n        timeout: node.moveAnimations['delay'],\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, state => React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: node === this.root && !node.moveAnimations['active'] ? rootWidth : node.moveAnimations['css'][state],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, React.createElement(CSSTransition, {\n        in: node.animations['initial']['node']['active'],\n        timeout: node.animations['initial']['node']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, this.getNodeHover(node.value), this.getCricle(node))), leftChild, rightChild, this.getConnectingLine(node, pos))));\n    }\n  }\n\n  getCricle(node) {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"circle node-value-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle initial\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(CSSTransition, {\n      in: node.animations['visited']['node']['active'],\n      timeout: node.animations['visited']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background visited\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle visited\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }))), React.createElement(CSSTransition, {\n      in: node.animations['success']['node']['active'],\n      timeout: node.animations['success']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background success\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle success\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }))), React.createElement(CSSTransition, {\n      in: node.animations['removed']['node']['active'],\n      timeout: node.animations['removed']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background removed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle removed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }))), React.createElement(\"text\", {\n      className: \"text node-value-text\",\n      x: \"50%\",\n      y: \"50%\",\n      fill: \"black\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, node.value)));\n  }\n\n  getNodeHover(val) {\n    return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n      in: this.state.operation === this.initialStateOperation,\n      timeout: 300,\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"node-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      onClick: () => this.searchNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }))), React.createElement(\"i\", {\n      className: \"fas fa-trash\",\n      onClick: () => this.deleteNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"trash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }))))));\n  }\n\n  getConnectingLine(node, pos) {\n    if (pos === 'left' || pos === 'right') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: node.animations['initial']['line']['active'],\n        timeout: node.animations['initial']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546\n        },\n        __self: this\n      }, this.getLine(pos, 'initial'), React.createElement(CSSTransition, {\n        in: node.animations['visited']['line']['active'],\n        timeout: node.animations['visited']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550\n        },\n        __self: this\n      }, this.getLine(pos, 'visited')), React.createElement(CSSTransition, {\n        in: node.animations['success']['line']['active'],\n        timeout: node.animations['success']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        },\n        __self: this\n      }, this.getLine(pos, 'success')), React.createElement(CSSTransition, {\n        in: node.animations['removed']['line']['active'],\n        timeout: node.animations['removed']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570\n        },\n        __self: this\n      }, this.getLine(pos, 'removed')))));\n    } else {\n      return null;\n    }\n  }\n\n  getLine(pos, addClass) {\n    const classes = ['line', addClass].join(' ');\n    if (pos === 'left') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"50\",\n      x2: \"100%\",\n      y2: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    });else if (pos === 'right') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"100%\",\n      y2: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    });else return null;\n  }\n  /* Handle operation step */\n\n\n  InitialTree() {\n    this.removeValue = null;\n    this.targetValue = null;\n    this.targetNode = null;\n    this.timeout = 0;\n    this.input = false;\n    this.tooltipsStep = this.initialStateOperation;\n    this.waiting = false;\n    this.setHideTraversalAnimations();\n    this.setHideMoveAnimations();\n    setTimeout(function () {\n      if (document.querySelector('.moved')) {\n        document.querySelector('.moved').classList.remove('moved');\n      }\n    }, 100);\n  }\n\n  GenerateTree() {\n    this.tooltipsStep = this.initialStateOperation;\n\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Reset':\n        if (this.root) {\n          this.setHideAnimations();\n          this.timeout = 1000;\n        } else {\n          this.timeout = 0;\n        }\n\n        break;\n\n      case 'Generate':\n        this.reset();\n        this.insertNumElements(15);\n        this.setGenerationAnimations();\n        this.timeout = 0;\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  ResetTree() {\n    this.tooltipsStep = this.initialStateOperation;\n\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Hide':\n        if (this.root) {\n          this.setHideAnimations();\n          this.timeout = 1000;\n        } else {\n          this.timeout = 0;\n        }\n\n        break;\n\n      case 'Reset':\n        this.reset();\n        this.timeout = 0;\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  InsertInTree(val) {\n    this.tooltipsStep = this.initialStateOperation;\n\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Input':\n        this.input = true;\n        break;\n\n      case 'Insert':\n        if (this.targetValue) {\n          if (!this.contains(this.targetValue)) {\n            this.insert(this.targetValue);\n            this.timeout = this.setInsertAnimations();\n            this.tooltipsStep = 'Insert';\n          } else {\n            this.targetValue = null;\n            this.errorMessage['message'] = 'Error: Tree already contains element';\n            this.errorMessage['key'] = new Date().getTime();\n          }\n        }\n\n        break;\n\n      case 'Complete':\n        if (this.targetValue) {\n          this.setInsertionCompleteAnimations();\n          this.timeout = 5000;\n          this.tooltipsStep = 'Insert 2';\n        }\n\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  RemoveFromTree() {\n    this.tooltipsStep = this.initialStateOperation;\n\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Input':\n        if (this.root) {\n          this.input = true;\n        } else {\n          this.errorMessage['message'] = 'Error: Tree is empty';\n          this.errorMessage['key'] = new Date().getTime();\n        }\n\n        break;\n\n      case 'Remove 1':\n        if (this.targetValue) {\n          if (this.contains(this.targetValue)) {\n            this.timeout = this.setRemoveAnimations() + 3000;\n            this.tooltipsStep = 'Remove 1';\n          } else {\n            this.targetValue = null;\n            this.errorMessage['message'] = 'Error: Tree does not contain target element';\n            this.errorMessage['key'] = new Date().getTime();\n          }\n        }\n\n        break;\n\n      case 'Remove 2':\n        if (this.targetValue) {\n          this.tooltipsStep = 'Remove 2';\n          this.timeout = this.setMoveSubtreeAnimations() + 3000;\n        }\n\n        break;\n\n      case 'Remove 3':\n        if (this.targetValue && this.targetNode) {\n          this.tooltipsStep = 'Remove 3';\n          this.timeout = this.setRemoveAnimations() + 3000;\n        } else {\n          this.timeout = 0;\n        }\n\n        break;\n\n      case 'Remove 4':\n        if (this.targetValue && this.targetNode) {\n          this.tooltipsStep = 'Remove 4';\n          this.timeout = this.setMoveSubtreeAnimations() + 3000;\n        } else {\n          this.timeout = 0;\n        }\n\n        break;\n\n      case 'Complete':\n        if (this.targetValue) {\n          this.root = this.remove(this.removeValue);\n          this.setHideMoveAnimations();\n          this.setHideTraversalAnimations();\n          document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]').classList.add('moved');\n          this.timeout = 0;\n        }\n\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  SearchTree() {\n    this.tooltipsStep = this.initialStateOperation;\n\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Input':\n        if (this.root) {\n          this.input = true;\n        } else {\n          this.errorMessage['message'] = 'Error: Tree is empty';\n          this.errorMessage['key'] = new Date().getTime();\n        }\n\n        break;\n\n      case 'Search':\n        if (this.targetValue) {\n          this.timeout = this.setSearchAnimations() + 7000;\n          this.tooltipsStep = 'Search';\n\n          if (!this.contains(this.targetValue)) {\n            let _this = this;\n\n            setTimeout(function () {\n              _this.errorMessage['message'] = 'Tree does not contain target element';\n              _this.errorMessage['key'] = new Date().getTime();\n\n              _this.forceUpdate();\n            }, _this.timeout - 6000);\n          }\n        }\n\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  TraverseTree() {\n    this.tooltipsStep = this.initialStateOperation;\n\n    if (this.root) {\n      this.tooltipsStep = this.state.operation;\n\n      switch (this.state.operation) {\n        case 'Pre-Order':\n        case 'In-Order':\n        case 'Post-Order':\n          this.timeout = this.setDFSTraversalAnimations(this.state.operation) + 5000;\n          break;\n\n        case 'Level Order':\n          this.timeout = this.setBFSTraversalAnimations() + 5000;\n          break;\n\n        default:\n          this.InitialTree();\n          break;\n      }\n    } else {\n      this.errorMessage['message'] = 'Error: Tree is empty';\n      this.errorMessage['key'] = new Date().getTime();\n    }\n  }\n  /* Node hover operations and input dialog */\n\n\n  receiveInput(val) {\n    this.targetValue = val;\n    this.input = false;\n\n    if (this.state.operation === 'Remove') {\n      this.deleteNode(val);\n    } else {\n      this.setState({\n        step: this.state.step + 1\n      });\n    }\n  }\n\n  searchNode(val) {\n    this.targetValue = val;\n    this.setState({\n      operation: 'Search',\n      step: 1\n    });\n  }\n\n  deleteNode(val) {\n    this.targetValue = val;\n    this.removeValue = val;\n    this.targetNode = this.root;\n    this.setState({\n      operation: 'Remove',\n      step: 1\n    });\n  }\n  /* Set animations for nodes for given operation step */\n\n\n  setGenerationAnimations() {\n    let queue = new Queue();\n    queue.push(this.root);\n    let delay = 150;\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        queue.push(node.left);\n        queue.push(node.right);\n\n        for (let key in node.animations['initial']) {\n          node.animations['initial'][key]['active'] = true;\n          node.animations['initial'][key]['delay'] = delay;\n        }\n\n        delay += 200;\n      }\n    }\n  }\n\n  setHideAnimations(node = this.root) {\n    if (node === null) return;\n\n    for (let state in node.animations) {\n      for (let element in node.animations[state]) {\n        node.animations[state][element]['active'] = false;\n        node.animations[state][element]['delay'] = 150;\n      }\n    }\n\n    this.setHideAnimations(node.left);\n    this.setHideAnimations(node.right);\n  }\n\n  setHideTraversalAnimations(node = this.root) {\n    if (node === null) return;\n\n    for (let state in node.animations) {\n      for (let element in node.animations[state]) {\n        if (state === 'initial') {\n          node.animations[state][element]['active'] = true;\n          node.animations[state][element]['delay'] = 0;\n        } else {\n          node.animations[state][element]['active'] = false;\n          node.animations[state][element]['delay'] = 150;\n        }\n      }\n    }\n\n    this.setHideTraversalAnimations(node.left);\n    this.setHideTraversalAnimations(node.right);\n  }\n\n  setHideMoveAnimations(node = this.root) {\n    if (node === null) return;\n    node.moveAnimations['active'] = false;\n    node.moveAnimations['delay'] = 0;\n    node.moveAnimations['css'] = {\n      entering: {},\n      entered: {},\n      exiting: {},\n      exited: {}\n    };\n    this.setHideMoveAnimations(node.left);\n    this.setHideMoveAnimations(node.right);\n  }\n\n  setDFSTraversalAnimations(order, node = this.root, delay = 150) {\n    if (node === null) return delay;\n\n    let _delay = node === this.root ? delay : delay + 1000;\n\n    node.animations['visited']['node']['active'] = true;\n    node.animations['visited']['node']['delay'] = _delay + 500;\n    node.animations['visited']['line']['active'] = true;\n    node.animations['visited']['line']['delay'] = _delay;\n\n    if (order === 'Pre-Order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\n\n    if (order === 'In-Order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\n\n    if (order === 'Post-Order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    node.animations['success']['line']['active'] = true;\n    node.animations['success']['line']['delay'] = _delay;\n    return _delay;\n  }\n\n  setBFSTraversalAnimations() {\n    let queue = new Queue();\n    let delay = 150;\n\n    if (this.root) {\n      queue.push(this.root);\n      this.root.animations['visited']['node']['active'] = true;\n      this.root.animations['visited']['node']['delay'] = delay;\n    }\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        if (node.left) {\n          queue.push(node.left);\n          delay += 1000;\n\n          for (let element in node.left.animations['visited']) {\n            node.left.animations['visited'][element]['active'] = true;\n            node.left.animations['visited'][element]['delay'] = delay;\n          }\n        }\n\n        if (node.right) {\n          queue.push(node.right);\n          delay += 1000;\n\n          for (let element in node.right.animations['visited']) {\n            node.right.animations['visited'][element]['active'] = true;\n            node.right.animations['visited'][element]['delay'] = delay;\n          }\n        }\n\n        delay += 1000;\n\n        for (let element in node.animations['success']) {\n          node.animations['success'][element]['active'] = true;\n          node.animations['success'][element]['delay'] = delay;\n        }\n      }\n    }\n\n    return delay;\n  }\n\n  setSearchAnimations(node = this.root, delay = 150) {\n    if (!this.targetValue || !node) return delay;else {\n      let _delay = delay;\n\n      if (this.targetValue === node.value) {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay + 1250;\n      } else if (this.targetValue < node.value) _delay = this.setSearchAnimations(node.left, delay + 1000);else _delay = this.setSearchAnimations(node.right, delay + 1000);\n\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n      return _delay;\n    }\n  }\n\n  setInsertAnimations(node = this.root, delay = 150) {\n    if (!this.targetValue || !node) return delay;else {\n      let _delay = delay;\n\n      if (this.targetValue === node.value) {\n        this.targetNode = node;\n        return _delay;\n      } else if (this.targetValue < node.value) _delay = this.setInsertAnimations(node.left, delay + 1000);else _delay = this.setInsertAnimations(node.right, delay + 1000);\n\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n      return _delay;\n    }\n  }\n\n  setInsertionCompleteAnimations() {\n    let node = this.targetNode;\n\n    if (node) {\n      node.animations['initial']['node']['active'] = true;\n      node.animations['initial']['node']['delay'] = 650;\n      node.animations['initial']['line']['active'] = true;\n      node.animations['initial']['line']['delay'] = 150;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = 1250;\n    }\n  }\n\n  setRemoveAnimations(node = this.targetNode, delay = 150) {\n    if (!this.targetValue || !node) return delay;else {\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n\n      if (this.targetValue === node.value) {\n        node.animations['success']['node']['active'] = false;\n        node.animations['success']['node']['delay'] = delay;\n        node.animations['success']['line']['active'] = false;\n        node.animations['success']['line']['delay'] = delay;\n        node.animations['removed']['node']['active'] = true;\n        node.animations['removed']['node']['delay'] = delay + 1500;\n        node.animations['removed']['line']['active'] = true;\n        node.animations['removed']['line']['delay'] = delay + 1000;\n        node.animations['initial']['node']['active'] = false;\n        node.animations['initial']['node']['delay'] = delay + 1500;\n        node.animations['initial']['line']['active'] = false;\n        node.animations['initial']['line']['delay'] = delay + 1500;\n        this.targetNode = node;\n      } else if (this.targetValue < node.value) return this.setRemoveAnimations(node.left, delay + 1000);else return this.setRemoveAnimations(node.right, delay + 1000);\n\n      return delay;\n    }\n  }\n\n  setMoveSubtreeAnimations() {\n    let node = this.targetNode;\n    let _delay = 0;\n\n    if (node) {\n      if (node.left === null || node.right === null) {\n        node.animations['initial']['line']['active'] = true;\n        node.animations['initial']['line']['delay'] = 3000;\n        node.animations['visited']['node']['active'] = false;\n        node.animations['visited']['node']['delay'] = 150;\n        node.animations['visited']['line']['active'] = false;\n        node.animations['visited']['line']['delay'] = 150;\n        node.animations['removed']['node']['active'] = false;\n        node.animations['removed']['node']['delay'] = 150;\n        node.animations['removed']['line']['active'] = false;\n        node.animations['removed']['line']['delay'] = 150;\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = 3500;\n\n        if (node.left === null && node.right === null) {\n          node.animations['initial']['line']['active'] = false;\n          node.animations['initial']['line']['delay'] = 0;\n          node.animations['success']['line']['active'] = false;\n          node.animations['success']['line']['delay'] = 0;\n\n          if (document.querySelectorAll('.node-wrapper[node-layer=\"1\"]').length === 1 && parseInt(document.querySelector('.node-wrapper[node-layer=\"1\"]').attributes['node-value'].value) === node.value) {\n            this.root.moveAnimations['active'] = true;\n            this.root.moveAnimations['delay'] = 1000;\n            this.root.moveAnimations['css']['entering'] = {\n              'width': document.querySelector('.root').offsetWidth + 'px'\n            };\n            this.root.moveAnimations['css']['entered'] = {\n              'width': document.querySelector('.root').offsetWidth / 2 + 'px'\n            };\n          }\n        } else {\n          if (node.left === null) {\n            node.right.animations['initial']['line']['active'] = false;\n            node.right.animations['initial']['line']['delay'] = 150;\n            node.right.moveAnimations['active'] = true;\n            node.right.moveAnimations['delay'] = 1000;\n            node.right.moveAnimations['css']['entered'] = {\n              'width': '100%',\n              'zIndex': '1000',\n              'transform': 'translate(-50%, -50px)'\n            };\n            _delay = this.setMoveSubtreeCompleteAnimations(node.right);\n          } else if (node.right === null) {\n            node.left.animations['initial']['line']['active'] = false;\n            node.left.animations['initial']['line']['delay'] = 150;\n            node.left.moveAnimations['active'] = true;\n            node.left.moveAnimations['delay'] = 1000;\n            node.left.moveAnimations['css']['entered'] = {\n              'width': '100%',\n              'zIndex': '1000',\n              'transform': 'translate(0, -50px)'\n            };\n            _delay = this.setMoveSubtreeCompleteAnimations(node.left);\n          }\n\n          if (document.querySelectorAll('.node-wrapper[node-value=\"' + node.value + '\"] .node-wrapper[node-layer=\"1\"]').length === document.querySelectorAll('.node-wrapper[node-layer=\"1\"]').length) {\n            this.root.moveAnimations['active'] = true;\n            this.root.moveAnimations['delay'] = 1000;\n            this.root.moveAnimations['css']['entering'] = {\n              'width': document.querySelector('.root').offsetWidth + 'px'\n            };\n            this.root.moveAnimations['css']['entered'] = {\n              'width': document.querySelector('.root').offsetWidth / 2 + 'px'\n            };\n          }\n\n          this.targetValue = node.value;\n        }\n\n        this.targetNode = null;\n      } else {\n        let delay = this.setInOrderSuccessorAnimations(node.right);\n        delay += 1000;\n        node.animations['visited']['node']['active'] = false;\n        node.animations['visited']['node']['delay'] = delay;\n        node.animations['visited']['line']['active'] = false;\n        node.animations['visited']['line']['delay'] = delay;\n        node.animations['removed']['node']['active'] = false;\n        node.animations['removed']['node']['delay'] = delay;\n        node.animations['removed']['line']['active'] = false;\n        node.animations['removed']['line']['delay'] = delay;\n        delay += 1000;\n        node.animations['initial']['node']['active'] = true;\n        node.animations['initial']['node']['delay'] = delay;\n        node.animations['initial']['line']['active'] = true;\n        node.animations['initial']['line']['delay'] = delay + 500;\n        delay += 1000;\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay + 500;\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = delay;\n        _delay = delay;\n      }\n    }\n\n    return _delay;\n  }\n\n  setMoveSubtreeCompleteAnimations(node, delay = 4000, first = true) {\n    let _delay = delay;\n\n    if (node) {\n      if (first) {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay;\n      } else {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay;\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = delay;\n      }\n\n      _delay = Math.max(this.setMoveSubtreeCompleteAnimations(node.left, delay + 300, false), this.setMoveSubtreeCompleteAnimations(node.right, delay + 300, false));\n    }\n\n    return _delay;\n  }\n\n  setInOrderSuccessorAnimations(node, delay = 150) {\n    node.animations['visited']['node']['active'] = true;\n    node.animations['visited']['node']['delay'] = delay + 500;\n    node.animations['visited']['line']['active'] = true;\n    node.animations['visited']['line']['delay'] = delay;\n\n    if (node.left) {\n      return this.setInOrderSuccessorAnimations(node.left, delay + 1000);\n    } else {\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = delay + 1500;\n      node.animations['success']['line']['active'] = true;\n      node.animations['success']['line']['delay'] = delay + 1000;\n      document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]>.node-value .node-value-text').textContent = node.value;\n      this.targetNode = node;\n      this.targetValue = node.value;\n      return delay + 1500;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","Transition","CSSTransition","BinarySearchTreeTooltips","InputModal","ErrorMessage","Queue","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","animations","initial","node","active","delay","line","visited","success","removed","moveAnimations","css","entering","entered","exiting","exited","BinarySearchTree","Component","props","initialStateOperation","visibleClasses","appearDone","enterDone","exit","operationSteps","Initial","Generate","Reset","Insert","Remove","Search","name","key","root","removeValue","targetValue","targetNode","timeout","input","tooltipsStep","waiting","errorMessage","message","state","operation","step","tooltips","destroy","receiveInput","bind","advanceOperationStepFromTooltips","componentDidMount","setState","getDerivedStateFromProps","newProps","destroyStateOperation","shouldComponentUpdate","nextProps","nextState","Date","getTime","render","performOperationStep","transform","getScaleFactor","Tree","componentDidUpdate","advanceOperationStep","GenerateTree","ResetTree","InsertInTree","RemoveFromTree","SearchTree","TraverseTree","InitialTree","length","_this","setTimeout","insertNumElements","elements","i","insert","height","remove","reset","Math","max","contains","curr","inOrderSuccessor","scale_factor","window","innerWidth","pow","tree_height","curr_height","pos","leftChild","rightChild","classes","join","rootWidth","width","getNodeHover","getCricle","getConnectingLine","searchNode","deleteNode","getLine","addClass","setHideTraversalAnimations","setHideMoveAnimations","document","querySelector","classList","setHideAnimations","setGenerationAnimations","setInsertAnimations","setInsertionCompleteAnimations","setRemoveAnimations","setMoveSubtreeAnimations","add","setSearchAnimations","forceUpdate","setDFSTraversalAnimations","setBFSTraversalAnimations","queue","push","empty","front","element","order","_delay","querySelectorAll","parseInt","attributes","offsetWidth","setMoveSubtreeCompleteAnimations","setInOrderSuccessorAnimations","first","textContent"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport{ Transition, CSSTransition } from 'react-transition-group'\r\n\r\nimport BinarySearchTreeTooltips from './BinarySearchTreeTooltips/BinarySearchTreeTooltips.jsx'\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n\r\n        this.animations = {\r\n            initial: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            },\r\n            visited: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            },\r\n            success: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            },\r\n            removed: {\r\n                node: { active: false, delay: 0 },\r\n                line: { active: false, delay: 0 }\r\n            }\r\n        };\r\n\r\n        this.moveAnimations = {\r\n            active: false,\r\n            delay: 0,\r\n            css: {\r\n                entering: {},\r\n                entered:  {},\r\n                exiting:  {},\r\n                exited:   {}\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.visibleClasses = {\r\n            appearDone: 'visible',\r\n            enterDone: 'visible',\r\n            exit: 'visible'\r\n        };\r\n\r\n        this.operationSteps = {\r\n            Initial: [\r\n                'Initial'\r\n            ],\r\n            Generate: [\r\n                'Reset',\r\n                'Generate'\r\n            ],\r\n            Reset: [\r\n                'Hide',\r\n                'Reset'\r\n            ],\r\n            Insert: [\r\n                'Input',\r\n                'Insert',\r\n                'Complete'\r\n            ],\r\n            Remove: [\r\n                'Input',\r\n                'Remove 1',\r\n                'Remove 2',\r\n                'Remove 3',\r\n                'Remove 4',\r\n                'Complete'\r\n            ],\r\n            Search: [\r\n                'Input',\r\n                'Search'\r\n            ],\r\n            'Pre-Order': [\r\n                'Traverse'\r\n            ],\r\n            'In-Order': [\r\n                'Traverse'\r\n            ],\r\n            'Post-Order': [\r\n                'Traverse'\r\n            ],\r\n            'Level Order': [\r\n                'Traverse'\r\n            ]\r\n        };\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.timeout = 0;\r\n        this.input = false;\r\n        this.tooltipsStep = this.initialStateOperation;\r\n        this.waiting = false;\r\n        this.errorMessage = {\r\n            message: '',\r\n            key: null\r\n        };\r\n\r\n        this.state = {\r\n            operation: this.initialStateOperation,\r\n            step: 0,\r\n            tooltips: false,\r\n            destroy: false\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n        this.advanceOperationStepFromTooltips = this.advanceOperationStepFromTooltips.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ operation: 'Generate', step: 0 });\r\n    }\r\n    \r\n    static getDerivedStateFromProps(newProps, state) {\r\n        const initialStateOperation = 'Initial';\r\n        const destroyStateOperation = 'Destroy';\r\n\r\n        if ( newProps.operation === destroyStateOperation ) {\r\n            return { operation: 'Reset', step: 0, destroy: true };\r\n        }\r\n        else if ( newProps.operation !== initialStateOperation ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: newProps.operation, tooltips: newProps.tooltips };\r\n            }\r\n            else if ( newProps.tooltips !== state.tooltips ) {\r\n                return { tooltips: newProps.tooltips };\r\n            }\r\n        }\r\n        else if ( newProps.tooltips !== state.tooltips ) {\r\n            return { tooltips: newProps.tooltips };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if ( nextState.destroy ) {\r\n            return true;\r\n        }\r\n        else if ( this.waiting && (this.state.tooltips === nextState.tooltips) ) {\r\n            if ( nextProps.operation !== this.initialStateOperation && nextProps.operation !== this.state.operation ) {\r\n                this.errorMessage['message'] = 'Error: Tree performing operation';\r\n                this.errorMessage['key'] = new Date().getTime();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.performOperationStep();\r\n\r\n        return (\r\n            <>\r\n                <InputModal active = {this.input} operation = {this.state.operation} callback = {this.receiveInput} key = {this.input} />\r\n\r\n                <ErrorMessage message = {this.errorMessage['message']} key = {this.errorMessage['key']} />\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n\r\n                <BinarySearchTreeTooltips\r\n                    active = {this.state.tooltips}\r\n                    operation = {this.tooltipsStep}\r\n                    next = {this.advanceOperationStepFromTooltips}\r\n                    timeout = {this.timeout}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.advanceOperationStep();\r\n    }\r\n\r\n    /* Handle calling function to perform animations for a given operation */\r\n\r\n    performOperationStep() {\r\n        switch( this.state.operation ) {\r\n            case 'Generate':    this.GenerateTree();   break;\r\n            case 'Reset':       this.ResetTree();      break;\r\n            case 'Insert':      this.InsertInTree();   break;\r\n            case 'Remove':      this.RemoveFromTree(); break; \r\n            case 'Search':      this.SearchTree();     break;\r\n            case 'Pre-Order':\r\n            case 'In-Order':\r\n            case 'Post-Order':\r\n            case 'Level Order': this.TraverseTree();   break;\r\n            case 'Initial':\r\n            default:            this.InitialTree();    break;\r\n        }\r\n    }\r\n\r\n    /* Advances operation step asynchonously based on timeout set */\r\n    \r\n    advanceOperationStep() {\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            if ( this.state.step >= this.operationSteps[ this.state.operation ].length - 1 ) {\r\n                if ( ! this.waiting ) {\r\n                    let _this = this;\r\n                    _this.waiting = true;\r\n                    setTimeout(function() {\r\n                        _this.waiting = false;\r\n                        if ( ! _this.state.tooltips || (_this.timeout === 0) || (_this.state.operation === 'Generate') || (_this.state.operation === 'Reset') ) {\r\n                            _this.setState({ operation: 'Initial', step: 0 });\r\n                        }\r\n                    }, _this.timeout);\r\n                }\r\n            }\r\n            else {\r\n                if ( this.operationSteps[ this.state.operation ][ this.state.step ] === 'Input' ) return;\r\n\r\n                if ( ! this.waiting ) {\r\n                    let _this = this;\r\n                    _this.waiting = true;\r\n                    setTimeout(function() {\r\n                        _this.waiting = false;\r\n                        if ( ! _this.state.tooltips || (_this.timeout === 0) || (_this.state.operation === 'Generate') || (_this.state.operation === 'Reset') ) {\r\n                            _this.setState({ step: _this.state.step + 1 });\r\n                        }\r\n                    }, _this.timeout);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    advanceOperationStepFromTooltips() {\r\n        if ( this.state.step >= this.operationSteps[ this.state.operation ].length - 1 ) {\r\n            this.setState({ operation: 'Initial', step: 0 });\r\n        }\r\n        else {\r\n            this.setState({ step: this.state.step + 1 });\r\n        }\r\n    }\r\n\r\n    /* Basic internal tree operations */\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node === null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    contains(val, node = this.root) {\r\n        if ( ! node ) return false;\r\n\r\n        if (val < node.value) {\r\n            return this.contains(val, node.left);\r\n        }\r\n        else if (val > node.value) {\r\n            return this.contains(val, node.right);\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root === null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right === null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left === null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( ! val ) return;\r\n\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    /* Handle creating Tree nodes and lines in DOM */\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node === null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'>\r\n\r\n                        <div className='node-value' />\r\n\r\n                        {leftChild}\r\n                        {rightChild}\r\n                        \r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            const rootWidth = {\r\n                width: ( node === this.root ) ? Math.pow(2, tree_height - 1) * 70 + 'px' : null\r\n            };\r\n\r\n            return (\r\n                <>\r\n                    <Transition\r\n                        in={node.moveAnimations['active']}\r\n                        timeout={node.moveAnimations['delay']}\r\n                        appear={true}>\r\n\r\n                        {state => (\r\n\r\n                            <div\r\n                                className={classes}\r\n                                node-value={node.value}\r\n                                node-layer={tree_height - curr_height}\r\n                                style={( node === this.root && ! node.moveAnimations['active'] ) ? rootWidth : node.moveAnimations['css'][state]}>\r\n\r\n                                <CSSTransition\r\n                                    in={node.animations['initial']['node']['active']}\r\n                                    timeout={node.animations['initial']['node']['delay']}\r\n                                    classNames={this.visibleClasses}\r\n                                    appear={true}>\r\n\r\n                                    <div className='node-value'>\r\n                                        {this.getNodeHover(node.value)}\r\n                                        {this.getCricle(node)}\r\n                                    </div>\r\n\r\n                                </CSSTransition>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n\r\n                                {this.getConnectingLine(node, pos)}\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                    </Transition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(node) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                    <circle className='circle node-circle initial' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['visited']['node']['active']}\r\n                        timeout={node.animations['visited']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background visited' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle visited' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['success']['node']['active']}\r\n                        timeout={node.animations['success']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background success' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle success' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['removed']['node']['active']}\r\n                        timeout={node.animations['removed']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background removed' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle removed' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                    \r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {node.value}\r\n                    </text>\r\n\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={this.state.operation === this.initialStateOperation}\r\n                    timeout={300}\r\n                    classNames={this.visibleClasses}\r\n                    appear={true}>\r\n\r\n                    <span className='node-hover'>\r\n                        <i className='fas fa-search' onClick={() => this.searchNode(val)} />\r\n                        <span className='search'>\r\n                            <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                                <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                            </svg>\r\n                        </span>\r\n\r\n                        <i className='fas fa-trash' onClick={() => this.deleteNode(val)} />\r\n                        <span className='trash'>\r\n                            <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                                <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                            </svg>\r\n                        </span>\r\n                    </span>\r\n\r\n                </CSSTransition>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(node, pos) {\r\n        if (pos === 'left' || pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={node.animations['initial']['line']['active']}\r\n                        timeout={node.animations['initial']['line']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                            {this.getLine(pos, 'initial')}\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['visited']['line']['active']}\r\n                                timeout={node.animations['visited']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'visited')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['success']['line']['active']}\r\n                                timeout={node.animations['success']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'success')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['removed']['line']['active']}\r\n                                timeout={node.animations['removed']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'removed')}\r\n\r\n                            </CSSTransition>\r\n\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getLine(pos, addClass) {\r\n        const classes = ['line', addClass].join(' ');\r\n\r\n        if (pos === 'left')\r\n            return ( <line className={classes} x1='0' y1='50' x2='100%' y2='0' /> );\r\n        else if (pos === 'right')\r\n            return ( <line className={classes} x1='0' y1='0' x2='100%' y2='50' /> );\r\n        else\r\n            return null;\r\n    }\r\n\r\n    /* Handle operation step */\r\n\r\n    InitialTree() {\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.timeout = 0;\r\n        this.input = false;\r\n        this.tooltipsStep = this.initialStateOperation;\r\n        this.waiting = false;\r\n\r\n        this.setHideTraversalAnimations();\r\n        this.setHideMoveAnimations();\r\n\r\n        setTimeout(function() {\r\n            if ( document.querySelector('.moved') ) {\r\n                document.querySelector('.moved').classList.remove('moved');\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    GenerateTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Reset':\r\n                if (this.root) {\r\n                    this.setHideAnimations();\r\n                    this.timeout = 1000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Generate':\r\n                this.reset();\r\n                this.insertNumElements(15);\r\n                this.setGenerationAnimations();\r\n                this.timeout = 0;\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    ResetTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Hide':\r\n                if (this.root) {\r\n                    this.setHideAnimations();\r\n                    this.timeout = 1000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Reset':\r\n                this.reset();\r\n                this.timeout = 0;\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    InsertInTree(val) {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                this.input = true;\r\n                break;\r\n            case 'Insert':\r\n                if ( this.targetValue ) {\r\n                    if ( ! this.contains(this.targetValue) ) {\r\n                        this.insert(this.targetValue);\r\n                        this.timeout = this.setInsertAnimations();\r\n                        this.tooltipsStep = 'Insert';\r\n                    }\r\n                    else {\r\n                        this.targetValue = null;\r\n                        this.errorMessage['message'] = 'Error: Tree already contains element';\r\n                        this.errorMessage['key'] = new Date().getTime();\r\n                    }\r\n                }\r\n                break;\r\n            case 'Complete':\r\n                if ( this.targetValue ) {\r\n                    this.setInsertionCompleteAnimations();\r\n                    this.timeout = 5000;\r\n                    this.tooltipsStep = 'Insert 2';\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    RemoveFromTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                if ( this.root ) {\r\n                    this.input = true;\r\n                }\r\n                else {\r\n                    this.errorMessage['message'] = 'Error: Tree is empty';\r\n                    this.errorMessage['key'] = new Date().getTime();\r\n                }\r\n                break;\r\n            case 'Remove 1':\r\n                if ( this.targetValue ) {\r\n                    if ( this.contains(this.targetValue) ) {\r\n                        this.timeout = this.setRemoveAnimations() + 3000;\r\n                        this.tooltipsStep = 'Remove 1';\r\n                    }\r\n                    else {\r\n                        this.targetValue = null;\r\n                        this.errorMessage['message'] = 'Error: Tree does not contain target element';\r\n                        this.errorMessage['key'] = new Date().getTime(); \r\n                    }\r\n                }\r\n                break;\r\n            case 'Remove 2':\r\n                if ( this.targetValue ) {\r\n                    this.tooltipsStep = 'Remove 2';\r\n                    this.timeout = this.setMoveSubtreeAnimations() + 3000;\r\n                }\r\n                break;\r\n            case 'Remove 3':\r\n                if ( this.targetValue && this.targetNode ) {\r\n                    this.tooltipsStep = 'Remove 3';\r\n                    this.timeout = this.setRemoveAnimations() + 3000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Remove 4':\r\n                if ( this.targetValue && this.targetNode ) {\r\n                    this.tooltipsStep = 'Remove 4';\r\n                    this.timeout = this.setMoveSubtreeAnimations() + 3000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Complete':\r\n                if ( this.targetValue ) {\r\n                    this.root = this.remove(this.removeValue);\r\n                    this.setHideMoveAnimations();\r\n                    this.setHideTraversalAnimations();\r\n                    document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]').classList.add('moved');\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    SearchTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                if ( this.root ) {\r\n                    this.input = true;\r\n                }\r\n                else {\r\n                    this.errorMessage['message'] = 'Error: Tree is empty';\r\n                    this.errorMessage['key'] = new Date().getTime();\r\n                }\r\n                break;\r\n            case 'Search':\r\n                if ( this.targetValue ) {\r\n                    this.timeout = this.setSearchAnimations() + 7000;\r\n                    this.tooltipsStep = 'Search';\r\n\r\n                    if ( ! this.contains(this.targetValue) ) {\r\n                        let _this = this;\r\n                        setTimeout(function() {\r\n                            _this.errorMessage['message'] = 'Tree does not contain target element';\r\n                            _this.errorMessage['key'] = new Date().getTime();\r\n                            _this.forceUpdate();\r\n                        }, _this.timeout - 6000);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n\r\n    TraverseTree() {\r\n        this.tooltipsStep = this.initialStateOperation;\r\n        \r\n        if ( this.root ) {\r\n            this.tooltipsStep = this.state.operation;\r\n\r\n            switch( this.state.operation ) {\r\n                case 'Pre-Order':\r\n                case 'In-Order':\r\n                case 'Post-Order':\r\n                    this.timeout = this.setDFSTraversalAnimations( this.state.operation ) + 5000;\r\n                    break;\r\n                case 'Level Order':\r\n                    this.timeout = this.setBFSTraversalAnimations() + 5000;\r\n                    break;\r\n                default:\r\n                    this.InitialTree();\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            this.errorMessage['message'] = 'Error: Tree is empty';\r\n            this.errorMessage['key'] = new Date().getTime();\r\n        }\r\n    }\r\n\r\n    /* Node hover operations and input dialog */\r\n\r\n    receiveInput(val) {\r\n        this.targetValue = val;\r\n        this.input = false;\r\n\r\n        if ( this.state.operation === 'Remove' ){\r\n            this.deleteNode(val);\r\n        }\r\n        else {\r\n            this.setState({ step: this.state.step + 1 });\r\n        }\r\n    }\r\n\r\n    searchNode(val) {\r\n        this.targetValue = val;\r\n        this.setState({ operation: 'Search', step: 1 });\r\n    }\r\n\r\n    deleteNode(val) {\r\n        this.targetValue = val;\r\n        this.removeValue = val;\r\n        this.targetNode = this.root;\r\n        this.setState({ operation: 'Remove', step: 1 });\r\n    }\r\n\r\n    /* Set animations for nodes for given operation step */\r\n\r\n    setGenerationAnimations() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let delay = 150;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                for (let key in node.animations['initial']) {\r\n                    node.animations['initial'][key]['active'] = true;\r\n                    node.animations['initial'][key]['delay'] = delay;\r\n                }\r\n                \r\n                delay += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    setHideAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                node.animations[state][element]['active'] = false;\r\n                node.animations[state][element]['delay'] = 150;\r\n            }\r\n        }\r\n\r\n        this.setHideAnimations(node.left);\r\n        this.setHideAnimations(node.right);\r\n    }\r\n\r\n    setHideTraversalAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                if (state === 'initial') {\r\n                    node.animations[state][element]['active'] = true;\r\n                    node.animations[state][element]['delay'] = 0;\r\n                }\r\n                else {\r\n                    node.animations[state][element]['active'] = false;\r\n                    node.animations[state][element]['delay'] = 150;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setHideTraversalAnimations(node.left);\r\n        this.setHideTraversalAnimations(node.right);\r\n    }\r\n\r\n    setHideMoveAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        node.moveAnimations['active'] = false;\r\n        node.moveAnimations['delay'] = 0;\r\n        node.moveAnimations['css'] = {\r\n            entering: {},\r\n            entered:  {},\r\n            exiting:  {},\r\n            exited:   {}\r\n        };\r\n\r\n        this.setHideMoveAnimations(node.left);\r\n        this.setHideMoveAnimations(node.right);\r\n    }\r\n\r\n    setDFSTraversalAnimations(order, node = this.root, delay = 150) {\r\n        if (node === null) return delay;\r\n\r\n        let _delay = node === this.root ? delay : delay + 1000;\r\n\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = _delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = _delay;\r\n\r\n        if (order === 'Pre-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\r\n\r\n        if (order === 'In-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\r\n\r\n        if (order === 'Post-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        node.animations['success']['line']['active'] = true;\r\n        node.animations['success']['line']['delay'] = _delay;\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setBFSTraversalAnimations() {\r\n        let queue = new Queue();\r\n\r\n        let delay = 150;\r\n\r\n        if (this.root) {\r\n            queue.push(this.root);\r\n\r\n            this.root.animations['visited']['node']['active'] = true;\r\n            this.root.animations['visited']['node']['delay'] = delay;\r\n        }\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                if (node.left) {\r\n                    queue.push(node.left);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.left.animations['visited']) {\r\n                        node.left.animations['visited'][element]['active'] = true;\r\n                        node.left.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n\r\n                if (node.right) {\r\n                    queue.push(node.right);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.right.animations['visited']) {\r\n                        node.right.animations['visited'][element]['active'] = true;\r\n                        node.right.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n                \r\n                delay += 1000;\r\n                for (let element in node.animations['success']) {\r\n                    node.animations['success'][element]['active'] = true;\r\n                    node.animations['success'][element]['delay'] = delay;\r\n                }\r\n            }\r\n        }\r\n\r\n        return delay;\r\n    }\r\n\r\n    setSearchAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {\r\n            let _delay = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 1250;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                _delay = this.setSearchAnimations(node.left, delay + 1000);\r\n            else\r\n                _delay = this.setSearchAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            return _delay;\r\n        }\r\n    }\r\n\r\n    setInsertAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {\r\n            let _delay = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                this.targetNode = node;\r\n                return _delay;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                _delay = this.setInsertAnimations(node.left, delay + 1000);\r\n            else\r\n                _delay = this.setInsertAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            return _delay;\r\n        }\r\n    }\r\n\r\n    setInsertionCompleteAnimations() {\r\n        let node = this.targetNode;\r\n\r\n        if ( node ) {\r\n            node.animations['initial']['node']['active'] = true;\r\n            node.animations['initial']['node']['delay'] = 650;\r\n            node.animations['initial']['line']['active'] = true;\r\n            node.animations['initial']['line']['delay'] = 150;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = 1250;\r\n        }\r\n    }\r\n\r\n    setRemoveAnimations(node = this.targetNode, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {    \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = false;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = false;\r\n                node.animations['success']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = true;\r\n                node.animations['removed']['node']['delay'] = delay + 1500;\r\n                node.animations['removed']['line']['active'] = true;\r\n                node.animations['removed']['line']['delay'] = delay + 1000;\r\n\r\n                node.animations['initial']['node']['active'] = false;\r\n                node.animations['initial']['node']['delay'] = delay + 1500;\r\n                node.animations['initial']['line']['active'] = false;\r\n                node.animations['initial']['line']['delay'] = delay + 1500;\r\n\r\n                this.targetNode = node;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                return this.setRemoveAnimations(node.left, delay + 1000);\r\n            else\r\n                return this.setRemoveAnimations(node.right, delay + 1000);\r\n\r\n            return delay;\r\n        }\r\n    }\r\n\r\n    setMoveSubtreeAnimations() {\r\n        let node = this.targetNode;\r\n        let _delay = 0;\r\n\r\n        if ( node ) {\r\n            if ( node.left === null || node.right === null ) {\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = 3000;\r\n    \r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = 150;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = 150;\r\n    \r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = 150;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = 150;\r\n    \r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = 3500;\r\n\r\n                if ( node.left === null && node.right === null ) {\r\n                    node.animations['initial']['line']['active'] = false;\r\n                    node.animations['initial']['line']['delay'] = 0;\r\n\r\n                    node.animations['success']['line']['active'] = false;\r\n                    node.animations['success']['line']['delay'] = 0;\r\n\r\n                    if (\r\n                        ( document.querySelectorAll('.node-wrapper[node-layer=\"1\"]').length === 1 ) && \r\n                        ( parseInt(document.querySelector('.node-wrapper[node-layer=\"1\"]').attributes['node-value'].value) === node.value )\r\n                    ) {\r\n                        this.root.moveAnimations['active'] = true;\r\n                        this.root.moveAnimations['delay'] = 1000;\r\n                        this.root.moveAnimations['css']['entering'] = {\r\n                            'width': document.querySelector('.root').offsetWidth + 'px'\r\n                        };\r\n                        this.root.moveAnimations['css']['entered'] = {\r\n                            'width': document.querySelector('.root').offsetWidth / 2 + 'px'\r\n                        };\r\n                    }\r\n                }\r\n                else {\r\n                    if ( node.left === null ) {\r\n                        node.right.animations['initial']['line']['active'] = false;\r\n                        node.right.animations['initial']['line']['delay'] = 150;\r\n                        \r\n                        node.right.moveAnimations['active'] = true;\r\n                        node.right.moveAnimations['delay'] = 1000;\r\n                        node.right.moveAnimations['css']['entered'] = {\r\n                            'width': '100%',\r\n                            'zIndex': '1000',\r\n                            'transform': 'translate(-50%, -50px)'\r\n                        };\r\n                        \r\n                        _delay = this.setMoveSubtreeCompleteAnimations(node.right);\r\n                    }\r\n                    else if ( node.right === null ) {\r\n                        node.left.animations['initial']['line']['active'] = false;\r\n                        node.left.animations['initial']['line']['delay'] = 150;\r\n                        \r\n                        node.left.moveAnimations['active'] = true;\r\n                        node.left.moveAnimations['delay'] = 1000;\r\n                        node.left.moveAnimations['css']['entered'] = {\r\n                            'width': '100%',\r\n                            'zIndex': '1000',\r\n                            'transform': 'translate(0, -50px)'\r\n                        };\r\n        \r\n                        _delay = this.setMoveSubtreeCompleteAnimations(node.left);\r\n                    }\r\n\r\n                    if (\r\n                        document.querySelectorAll('.node-wrapper[node-value=\"' + node.value + '\"] .node-wrapper[node-layer=\"1\"]').length\r\n                        === document.querySelectorAll('.node-wrapper[node-layer=\"1\"]').length\r\n                    ) {\r\n                        this.root.moveAnimations['active'] = true;\r\n                        this.root.moveAnimations['delay'] = 1000;\r\n                        this.root.moveAnimations['css']['entering'] = {\r\n                            'width': document.querySelector('.root').offsetWidth + 'px'\r\n                        };\r\n                        this.root.moveAnimations['css']['entered'] = {\r\n                            'width': document.querySelector('.root').offsetWidth / 2 + 'px'\r\n                        };\r\n                    }\r\n                    \r\n                    this.targetValue = node.value;\r\n                }\r\n\r\n                this.targetNode = null;\r\n            }\r\n            else {\r\n                let delay = this.setInOrderSuccessorAnimations(node.right);\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = delay;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = delay;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = delay;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['initial']['node']['active'] = true;\r\n                node.animations['initial']['node']['delay'] = delay;\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = delay + 500;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 500;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n\r\n                _delay = delay;\r\n            }\r\n        }\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setMoveSubtreeCompleteAnimations(node, delay = 4000, first = true) {\r\n        let _delay = delay;\r\n\r\n        if (node) {\r\n            if (first) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n            }\r\n            else {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n            }\r\n\r\n            _delay = Math.max(\r\n                this.setMoveSubtreeCompleteAnimations(node.left, delay + 300, false), \r\n                this.setMoveSubtreeCompleteAnimations(node.right, delay + 300, false)\r\n            );\r\n        }\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setInOrderSuccessorAnimations(node, delay = 150) {\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = delay;\r\n\r\n        if ( node.left ) {\r\n            return this.setInOrderSuccessorAnimations(node.left, delay + 1000);\r\n        }\r\n        else {\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = delay + 1500;\r\n            node.animations['success']['line']['active'] = true;\r\n            node.animations['success']['line']['delay'] = delay + 1000;\r\n\r\n            document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]>.node-value .node-value-text').textContent = node.value;\r\n\r\n            this.targetNode = node;\r\n            this.targetValue = node.value;\r\n\r\n            return delay + 1500;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}