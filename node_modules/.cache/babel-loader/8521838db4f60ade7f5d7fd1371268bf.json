{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTreeNew\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport Queue from '../../Queue.jsx';\nimport $ from 'jquery';\nimport { randomIntFromInverval } from '../../Helpers.js';\nimport { myMax } from '../../Helpers.js';\nimport './BinarySearchTree.css';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinarySearchTree {\n  constructor() {\n    this.name = \"BinarySearchTree\";\n    this.root = null;\n  }\n\n  generateNewTree(elements = 5) {\n    this.root = null;\n    $('.node-value').removeClass('visible');\n\n    for (let i = 0; i < elements; ++i) {\n      this.insert(randomIntFromInverval(1, 200));\n    }\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return myMax(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (val < curr.value) {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          break;\n        }\n\n        curr = curr.left;\n      } else {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          break;\n        }\n\n        curr = curr.right;\n      }\n    }\n  }\n\n  animateNodes() {\n    let queue = new Queue();\n    queue.push($('.node-wrapper:not([node-value=\"null\"])>.node-value:not(.visible)').first());\n    setTimeout(function () {\n      animateHelper(queue);\n    }, 300);\n  }\n\n  drawTree(node = this.root, tree_height = this.height(), curr_height = 0, pos = \"root\") {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.drawTree(node ? node.left : null, tree_height, curr_height + 1, \"left\");\n    const rightChild = this.drawTree(node ? node.right : null, tree_height, curr_height + 1, \"right\");\n    let classes = [\"node-wrapper\", pos].join(' ');\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, getCricle(\"null\")), leftChild, rightChild));\n    } else if (node === this.root) {\n      let scale_factor = window.innerWidth / (Math.pow(2, tree_height - 1) * 70);\n      scale_factor = scale_factor > 1 ? 1 : scale_factor;\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: {\n          width: Math.pow(2, tree_height - 1) * 70 + 'px',\n          transform: \"scale(\" + scale_factor + \")\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, getCricle(node.value)), leftChild, rightChild));\n    } else {\n      let line = getConnectingLine(pos);\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, getCricle(node.value)), leftChild, rightChild, line));\n    }\n  }\n\n}\n\nfunction getCricle(val) {\n  return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n    className: \"circle node-circle\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"text\", {\n    className: \"text node-value-text\",\n    x: \"50%\",\n    y: \"50%\",\n    fill: \"black\",\n    \"text-anchor\": \"middle\",\n    \"dominant-baseline\": \"central\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, val), React.createElement(\"circle\", {\n    r: \"24\",\n    cx: \"25\",\n    cy: \"25\",\n    stroke: \"black\",\n    fill: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  })));\n}\n\nfunction getConnectingLine(pos) {\n  if (pos === \"left\") {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"line node-line\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"line\", {\n      class: \"line\",\n      x1: \"0\",\n      y1: \"50\",\n      x2: \"100%\",\n      y2: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })));\n  } else if (pos === \"right\") {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"line node-line\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"line\", {\n      class: \"line\",\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"100%\",\n      y2: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })));\n  } else {\n    return null;\n  }\n}\n\nfunction animateHelper(queue) {\n  if (!queue.empty()) {\n    let $_node = queue.front();\n    $_node.addClass('visible');\n    $_node.siblings('.node-wrapper:not([node-value=\"null\"])').children('.node-value').each(function () {\n      queue.push($(this));\n    });\n    setTimeout(function () {\n      animateHelper(queue);\n    }, 300);\n  }\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTreeNew/BinarySearchTree.jsx"],"names":["React","Queue","$","randomIntFromInverval","myMax","BinarySearchTreeNode","constructor","val","value","left","right","BinarySearchTree","name","root","generateNewTree","elements","removeClass","i","insert","height","node","curr","animateNodes","queue","push","first","setTimeout","animateHelper","drawTree","tree_height","curr_height","pos","leftChild","rightChild","classes","join","getCricle","scale_factor","window","innerWidth","Math","pow","width","transform","line","getConnectingLine","empty","$_node","front","addClass","siblings","children","each"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Queue from '../../Queue.jsx'\r\nimport $ from 'jquery'\r\nimport { randomIntFromInverval } from '../../Helpers.js'\r\nimport { myMax } from '../../Helpers.js'\r\nimport './BinarySearchTree.css'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree {\r\n    constructor() {\r\n        this.name = \"BinarySearchTree\";\r\n        this.root = null;\r\n    }\r\n\r\n    generateNewTree(elements = 5) {\r\n        this.root = null;\r\n        $('.node-value').removeClass('visible');\r\n        \r\n        for (let i = 0; i < elements; ++i) {\r\n            this.insert( randomIntFromInverval(1, 200) );\r\n        }\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return myMax( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (val < curr.value) {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    break;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n            else {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    break;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    animateNodes() {\r\n        let queue = new Queue();\r\n        queue.push( $('.node-wrapper:not([node-value=\"null\"])>.node-value:not(.visible)').first() );\r\n        setTimeout(function(){animateHelper(queue);}, 300);\r\n    }\r\n\r\n    drawTree(node = this.root, tree_height = this.height(), curr_height = 0, pos = \"root\") {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.drawTree(node ? node.left  : null, tree_height, curr_height + 1, \"left\" );\r\n        const rightChild = this.drawTree(node ? node.right : null, tree_height, curr_height + 1, \"right\");\r\n        \r\n        let classes = [\"node-wrapper\", pos].join(' ');\r\n\r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value=\"null\"\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className=\"node-value\">\r\n                                {getCricle(\"null\")}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else if ( node === this.root ) {\r\n            let scale_factor = window.innerWidth / ( Math.pow(2, tree_height - 1) * 70 );\r\n            scale_factor = scale_factor > 1 ? 1 : scale_factor;\r\n\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value={node.value}\r\n                        node-layer={tree_height - curr_height}\r\n                        style={ {width: Math.pow(2, tree_height - 1) * 70 + 'px',\r\n                                 transform: \"scale(\" + scale_factor + \")\"} }>\r\n\r\n                            <div className=\"node-value\">\r\n                                {getCricle(node.value)}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            let line = getConnectingLine(pos);\r\n\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value={node.value}\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className=\"node-value\">\r\n                                {getCricle(node.value)}\r\n                            </div>\r\n                            \r\n                            {leftChild}\r\n                            {rightChild}\r\n                            {line}\r\n                            \r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nfunction getCricle(val) {\r\n    return (\r\n        <>\r\n            <svg className=\"circle node-circle\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <text className=\"text node-value-text\" x=\"50%\" y=\"50%\" fill=\"black\" text-anchor=\"middle\" dominant-baseline=\"central\">\r\n                    {val}\r\n                </text>\r\n                <circle r=\"24\" cx=\"25\" cy=\"25\" stroke=\"black\" fill=\"none\" />\r\n            </svg>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction getConnectingLine(pos) {\r\n    if (pos === \"left\") {\r\n        return (\r\n            <>\r\n                <svg className=\"line node-line\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <line class=\"line\" x1=\"0\" y1=\"50\" x2=\"100%\" y2=\"0\"></line>\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n    else if (pos === \"right\") {\r\n        return (\r\n            <>\r\n                <svg className=\"line node-line\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <line class=\"line\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"50\"></line>\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction animateHelper(queue) {\r\n    if ( !queue.empty() ) {\r\n        let $_node = queue.front();\r\n        $_node.addClass('visible');\r\n        $_node.siblings('.node-wrapper:not([node-value=\"null\"])').children('.node-value').each(function() {\r\n           queue.push( $(this) ); \r\n        });\r\n        setTimeout(function(){animateHelper(queue);}, 300);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}