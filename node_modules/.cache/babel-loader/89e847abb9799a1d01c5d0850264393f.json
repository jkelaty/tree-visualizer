{"ast":null,"code":"import React from 'react';\nimport BinaryTree from './Trees/BinaryTree.jsx';\nimport './TreeVisualizer.css';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: new BinaryTree()\n    };\n    this.resetTree();\n  }\n\n  render() {\n    //this.state.tree.height();\n    return this.state.tree.createDOM();\n  }\n\n  componentDidMount() {}\n\n  resetTree() {\n    this.state.tree.resetTree();\n  }\n\n}\n/* test js\r\nvar $node = $('.node').eq(1);\r\nvar element = $('.node').eq(0).clone();\r\nelement.appendTo( $node );\r\nelement = element.clone();\r\nelement.appendTo( $node );\r\n$node.siblings('.node').css( 'width', $node.css('width') );\r\n*/","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","BinaryTree","TreeVisualizer","Component","constructor","props","state","tree","resetTree","render","createDOM","componentDidMount"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAO,sBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,IAAIN,UAAJ;AADG,KAAb;AAIA,SAAKO,SAAL;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL;AACA,WAAO,KAAKH,KAAL,CAAWC,IAAX,CAAgBG,SAAhB,EAAP;AACH;;AAEDC,EAAAA,iBAAiB,GAAG,CACnB;;AAEDH,EAAAA,SAAS,GAAG;AACR,SAAKF,KAAL,CAAWC,IAAX,CAAgBC,SAAhB;AACH;;AArBuD;AAwB5D","sourcesContent":["import React from 'react';\r\nimport BinaryTree from './Trees/BinaryTree.jsx'\r\nimport './TreeVisualizer.css';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: new BinaryTree()           \r\n        };\r\n\r\n        this.resetTree();\r\n    }\r\n\r\n    render() {\r\n        //this.state.tree.height();\r\n        return this.state.tree.createDOM();\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    resetTree() {\r\n        this.state.tree.resetTree();\r\n    }\r\n}\r\n\r\n/* test js\r\nvar $node = $('.node').eq(1);\r\nvar element = $('.node').eq(0).clone();\r\nelement.appendTo( $node );\r\nelement = element.clone();\r\nelement.appendTo( $node );\r\n$node.siblings('.node').css( 'width', $node.css('width') );\r\n*/"]},"metadata":{},"sourceType":"module"}