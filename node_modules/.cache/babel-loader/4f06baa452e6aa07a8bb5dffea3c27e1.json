{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport anime from 'animejs';\nimport { CSSTransition } from 'react-transition-group';\nimport InputModal from '../../Additional/InputModal/InputModal.jsx';\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx';\nimport Queue from '../../Additional/Queue.js';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n    this.animations = {\n      delay: 0\n    };\n  }\n\n}\n\nexport default class BinarySearchTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.state = {\n      animation1: false,\n      animation2: false,\n      animation3: false,\n      animation4: false\n    };\n    this.receiveInput = this.receiveInput.bind(this);\n    this.action1 = this.action1.bind(this); // temporary\n\n    this.action2 = this.action2.bind(this); // temporary\n\n    this.action3 = this.action3.bind(this); // temporary\n\n    this.action4 = this.action4.bind(this); // temporary\n\n    this.action5 = this.action5.bind(this); // temporary\n\n    this.action6 = this.action6.bind(this); // temporary\n\n    this.action7 = this.action7.bind(this); // temporary\n\n    this.action8 = this.action8.bind(this); // temporary\n\n    this.action9 = this.action9.bind(this); // temporary\n  }\n\n  componentDidMount() {} // call generate function\n\n  /*static getDerivedStateFromProps(newProps, state) {\r\n      //To-do: async calls and tooltips\r\n      console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n        const initialStateOperation = 'Initial';\r\n        if ( state.animating ) {\r\n          if ( state.operation === initialStateOperation ) {\r\n              return { operation: state.operation, animating: false };\r\n          }\r\n          else {\r\n              return { operation: state.operation };\r\n          }\r\n      }\r\n      else if ( state.operation !== newProps.operation ) {\r\n          return { operation: newProps.operation, animating: true };\r\n      }\r\n      else {\r\n          return null;\r\n      }\r\n  }*/\n\n\n  insertNumElements(elements) {\n    for (let i = 0; i < elements; ++i) {\n      let val = randomIntFromInverval(1, 150);\n\n      if (this.insert(val)) {\n        if (this.height() > 5) {\n          this.root = this.remove(val);\n          --i;\n        }\n      } else {\n        --i;\n      }\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value === val) {\n        //tree contains key already\n        return false;\n      } else if (curr.value < val) {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  remove(val, node = this.root) {\n    if (node === null) return node;\n\n    if (val < node.value) {\n      node.left = this.remove(val, node.left);\n    } else if (val > node.value) {\n      node.right = this.remove(val, node.right);\n    } else {\n      if (node.left === null) {\n        return node.right;\n      } else if (node.right === null) {\n        return node.left;\n      } else {\n        node.value = this.inOrderSuccessor(node.right);\n        node.right = this.remove(node.value, node.right);\n      }\n    }\n\n    return node;\n  }\n\n  inOrderSuccessor(node) {\n    if (node === null) {\n      return node;\n    } else if (node.left !== null) {\n      return this.inOrderSuccessor(node.left);\n    } else {\n      return node.value;\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n\n  receiveInput(val) {\n    alert(val);\n  }\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left');\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n    const classes = ['node-wrapper', pos].join(' ');\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }), leftChild, rightChild));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.animation1,\n        timeout: node.animations['delay'],\n        appear: true,\n        classNames: {\n          appearDone: 'visible',\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: node === this.root ? {\n          width: Math.pow(2, tree_height - 1) * 70 + 'px'\n        } : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, this.getNodeHover(node.value), this.getCricle(node)), leftChild, rightChild, this.getConnectingLine(node, pos))));\n    }\n  }\n\n  getCricle(node) {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"circle node-value-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      className: \"text node-value-text\",\n      x: \"50%\",\n      y: \"50%\",\n      fill: \"black\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, node.value), React.createElement(\"circle\", {\n      className: \"circle node-circle initial\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle visited visible\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle complete\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    })));\n  }\n\n  getNodeHover(val) {\n    return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: \"node-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"search\",\n      onClick: () => this.searchForNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"trash\",\n      onClick: () => this.trashNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-trash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }))));\n  }\n\n  getConnectingLine(node, pos) {\n    if (pos === 'left') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.animation1,\n        timeout: node.animations['delay'],\n        appear: true,\n        classNames: {\n          appearDone: 'visible',\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(\"line\", {\n        className: \"line\",\n        x1: \"0\",\n        y1: \"50\",\n        x2: \"100%\",\n        y2: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }))));\n    } else if (pos === 'right') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.animation1,\n        timeout: node.animations['delay'],\n        appear: true,\n        classNames: {\n          appearDone: 'visible',\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(\"line\", {\n        className: \"line\",\n        x1: \"0\",\n        y1: \"0\",\n        x2: \"100%\",\n        y2: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }))));\n    } else {\n      return null;\n    }\n  }\n\n  setInitialAnimation(node = this.root) {\n    if (node == null) return;\n    node.animations['delay'] = 0;\n    this.setInitialAnimation(node.left);\n    this.setInitialAnimation(node.right);\n  }\n\n  setGenerationAnimation() {\n    let queue = new Queue();\n    queue.push(this.root);\n    let delay = 300;\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        queue.push(node.left);\n        queue.push(node.right);\n        node.animations['delay'] = delay;\n        delay += 200;\n      }\n    }\n  }\n\n  setResetAnimation(node = this.root) {\n    if (node == null) return;\n    node.animations['delay'] = 100;\n    this.setResetAnimation(node.left);\n    this.setResetAnimation(node.right);\n  }\n\n  setSearchAnimation(val, delay = 300, node = this.root) {\n    let found = false;\n\n    if (node === null) {\n      return false;\n    } else {\n      node.animations['delay'] = delay;\n\n      if (node.value === val) {\n        found = true;\n      } else if (node.value < val) {\n        found = this.setInsertionAnimation(val, delay + 300, node.left);\n      } else {\n        found = this.setInsertionAnimation(val, delay + 300, node.right);\n      }\n    }\n\n    if (node === this.root) {\n      if (found) {//set to green\n      } else {//set to red\n        }\n    } else {\n      return found;\n    }\n  }\n\n  action1() {\n    this.reset();\n    this.insertNumElements(15);\n    this.setGenerationAnimation();\n    this.setState({\n      animation1: true\n    });\n  }\n\n  action2() {\n    this.setResetAnimation();\n    this.setState({\n      animation1: false\n    });\n  }\n\n  action3() {\n    this.reset();\n  }\n\n  action4() {\n    this.setInitialAnimation();\n    this.setState({\n      animation1: true\n    });\n  }\n\n  action5() {\n    const val = parseInt(prompt());\n    this.setSearchAnimation(val);\n  }\n\n  action6() {}\n\n  action7() {}\n\n  action8() {}\n\n  action9() {}\n\n  render() {\n    console.log(\"BST::render: \");\n    console.log(this.state);\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: this.action1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"Generate new tree\"), React.createElement(\"button\", {\n      onClick: this.action2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"Hide Tree\"), React.createElement(\"button\", {\n      onClick: this.action3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.action4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"Set default\"), React.createElement(\"button\", {\n      onClick: this.action5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"Search\"), React.createElement(\"button\", {\n      onClick: this.action6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, \"Action6\"), React.createElement(\"button\", {\n      onClick: this.action7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"Action7\"), React.createElement(\"button\", {\n      onClick: this.action8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"Action8\"), React.createElement(\"button\", {\n      onClick: this.action9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"Action9\"), false ? React.createElement(InputModal, {\n      operation: this.state.operation,\n      callback: this.receiveInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }) : null, false ? React.createElement(ErrorMessage, {\n      message: \"Error: Tree is empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, this.Tree()));\n  }\n  /*shouldComponentUpdate(nextProps, nextState) {\r\n      console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n      if ( nextState.operation === this.initialStateOperation ) {\r\n          return false;\r\n      }\r\n      else {\r\n          return true;\r\n      }\r\n  }*/\n\n  /*componentDidUpdate() {\r\n      console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n      if ( this.state.operation !== this.initialStateOperation ) {\r\n          this.setState({ operation: this.initialStateOperation });\r\n      }\r\n  }*/\n\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","anime","CSSTransition","InputModal","ErrorMessage","Queue","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","animations","delay","BinarySearchTree","Component","props","initialStateOperation","name","key","root","state","animation1","animation2","animation3","animation4","receiveInput","bind","action1","action2","action3","action4","action5","action6","action7","action8","action9","componentDidMount","insertNumElements","elements","i","insert","height","remove","reset","node","Math","max","curr","inOrderSuccessor","getScaleFactor","scale_factor","window","innerWidth","pow","alert","Tree","tree_height","curr_height","pos","leftChild","rightChild","classes","join","appearDone","enterDone","exit","width","getNodeHover","getCricle","getConnectingLine","searchForNode","trashNode","setInitialAnimation","setGenerationAnimation","queue","push","empty","front","setResetAnimation","setSearchAnimation","found","setInsertionAnimation","setState","parseInt","prompt","render","console","log","operation","transform"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport anime from 'animejs'\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n\r\n        this.animations = {\r\n            delay: 0\r\n        };\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.state = {\r\n            animation1: false,\r\n            animation2: false,\r\n            animation3: false,\r\n            animation4: false,\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n\r\n        this.action1 = this.action1.bind(this); // temporary\r\n        this.action2 = this.action2.bind(this); // temporary\r\n        this.action3 = this.action3.bind(this); // temporary\r\n        this.action4 = this.action4.bind(this); // temporary\r\n        this.action5 = this.action5.bind(this); // temporary\r\n        this.action6 = this.action6.bind(this); // temporary\r\n        this.action7 = this.action7.bind(this); // temporary\r\n        this.action8 = this.action8.bind(this); // temporary\r\n        this.action9 = this.action9.bind(this); // temporary\r\n    }\r\n\r\n    componentDidMount() {\r\n        // call generate function\r\n    }\r\n\r\n    /*static getDerivedStateFromProps(newProps, state) {\r\n        //To-do: async calls and tooltips\r\n        console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n\r\n        const initialStateOperation = 'Initial';\r\n\r\n        if ( state.animating ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: state.operation, animating: false };\r\n            }\r\n            else {\r\n                return { operation: state.operation };\r\n            }\r\n        }\r\n        else if ( state.operation !== newProps.operation ) {\r\n            return { operation: newProps.operation, animating: true };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }*/\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node === null ) {\r\n            return node;\r\n        }\r\n        else if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    receiveInput(val) {\r\n        alert(val);\r\n    }\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className='node-value' />\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.animation1}\r\n                        timeout={node.animations['delay']}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible',\r\n                            enterDone: 'visible',\r\n                            exit: 'visible'\r\n                        }}>\r\n\r\n                        <div\r\n                            className={classes}\r\n                            node-value={node.value}\r\n                            node-layer={tree_height - curr_height}\r\n                            style={ ( node === this.root ) ? {width: Math.pow(2, tree_height - 1) * 70 + 'px'} : null }>\r\n\r\n                            <div className='node-value'>\r\n                                {this.getNodeHover(node.value)}\r\n                                {this.getCricle(node)}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n\r\n                            {this.getConnectingLine(node, pos)}\r\n\r\n                        </div>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(node) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {node.value}\r\n                    </text>\r\n\r\n                    <circle className='circle node-circle initial' r='24' cx='25' cy='25' fill='none' />\r\n                    <circle className='circle node-circle visited visible' r='24' cx='25' cy='25' fill='none' />\r\n                    <circle className='circle node-circle complete' r='24' cx='25' cy='25' fill='none' />\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <span className='node-hover'>\r\n                    <span className='search' onClick={() => this.searchForNode(val)}>\r\n                        <i className=\"fas fa-search\" />\r\n                    </span>\r\n\r\n                    <span className='trash' onClick={() => this.trashNode(val)}>\r\n                        <i className=\"fas fa-trash\" />\r\n                    </span>\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(node, pos) {\r\n        if (pos === 'left') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.animation1}\r\n                        timeout={node.animations['delay']}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible',\r\n                            enterDone: 'visible',\r\n                            exit: 'visible'\r\n                        }}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                            <line className='line' x1='0' y1='50' x2='100%' y2='0'></line>\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else if (pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.animation1}\r\n                        timeout={node.animations['delay']}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible',\r\n                            enterDone: 'visible',\r\n                            exit: 'visible'\r\n                        }}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                            <line className='line' x1='0' y1='0' x2='100%' y2='50'></line>\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setInitialAnimation(node = this.root) {\r\n        if (node == null) return;\r\n        node.animations['delay'] = 0;\r\n\r\n        this.setInitialAnimation(node.left);\r\n        this.setInitialAnimation(node.right);\r\n    }\r\n\r\n    setGenerationAnimation() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let delay = 300;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                node.animations['delay'] = delay;\r\n                \r\n                delay += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    setResetAnimation(node = this.root) {\r\n        if (node == null) return;\r\n        node.animations['delay'] = 100;\r\n\r\n        this.setResetAnimation(node.left);\r\n        this.setResetAnimation(node.right);\r\n    }\r\n\r\n    setSearchAnimation(val, delay = 300, node = this.root) {\r\n        let found = false;\r\n\r\n        if (node === null) {\r\n            return false;\r\n        }\r\n        else {\r\n            node.animations['delay'] = delay;\r\n\r\n            if (node.value === val) {\r\n                found = true;\r\n            }\r\n            else if (node.value < val) {\r\n                found = this.setInsertionAnimation(val, delay + 300, node.left);\r\n            }\r\n            else {\r\n                found = this.setInsertionAnimation(val, delay + 300, node.right);\r\n            }\r\n        }\r\n\r\n        if(node === this.root) {\r\n            if (found) {\r\n                //set to green\r\n            }\r\n            else {\r\n                //set to red\r\n            }\r\n        }\r\n        else {\r\n            return found;\r\n        }\r\n    }\r\n\r\n    action1() {\r\n        this.reset();\r\n        this.insertNumElements(15);\r\n        this.setGenerationAnimation();\r\n        this.setState({animation1: true});\r\n    }\r\n\r\n    action2() {\r\n        this.setResetAnimation();\r\n        this.setState({animation1: false});\r\n    }\r\n\r\n    action3() {\r\n        this.reset();\r\n    }\r\n\r\n    action4() {\r\n        this.setInitialAnimation();\r\n        this.setState({animation1: true});\r\n    }\r\n\r\n    action5() {\r\n        const val = parseInt(prompt());\r\n        this.setSearchAnimation(val);\r\n    }\r\n\r\n    action6() {\r\n    }\r\n\r\n    action7() {\r\n    }\r\n\r\n    action8() {\r\n    }\r\n\r\n    action9() {\r\n    }\r\n\r\n    render() {\r\n        console.log(\"BST::render: \");\r\n        console.log(this.state);\r\n        return (\r\n            <>\r\n                <button onClick = {this.action1}>Generate new tree</button>\r\n                <button onClick = {this.action2}>Hide Tree</button>\r\n                <button onClick = {this.action3}>Reset</button>\r\n                <button onClick = {this.action4}>Set default</button>\r\n                <button onClick = {this.action5}>Search</button>\r\n                <button onClick = {this.action6}>Action6</button>\r\n                <button onClick = {this.action7}>Action7</button>\r\n                <button onClick = {this.action8}>Action8</button>\r\n                <button onClick = {this.action9}>Action9</button>\r\n\r\n                { false ? <InputModal operation = {this.state.operation} callback = {this.receiveInput} /> : null }\r\n                { false ? <ErrorMessage message = {\"Error: Tree is empty\"} /> : null }\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n        if ( nextState.operation === this.initialStateOperation ) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }*/\r\n\r\n    /*componentDidUpdate() {\r\n        console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            this.setState({ operation: this.initialStateOperation });\r\n        }\r\n    }*/\r\n}"]},"metadata":{},"sourceType":"module"}