{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\NavigationBar\\\\NavigationBar.jsx\";\nimport React from 'react';\nimport logo from './logo.png';\nimport $ from 'jquery';\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\nimport './NavigationBar.css';\nexport default class NavigationBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.visualizer = this.props.visualizer;\n    this.changeTree = this.changeTree.bind(this);\n    this.tree2 = {\n      BST: {\n        name: \"Binary Search Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      AVL: {\n        name: \"AVL Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      RBT: {\n        name: \"Red-Black Tree\",\n        operations: [\"Insert\", \"Remove\", \"Search\"]\n      },\n      BHP: {\n        name: \"Binary Heap\",\n        operations: [\"Insert\", \"Top\"]\n      }\n    };\n    this.operations2 = {\n      Insert: this.visualizer.insert,\n      Remove: this.visualizer.remove,\n      Search: this.visualizer.search,\n      Top: this.visualizer.top\n    };\n    this.trees = {\n      BST: \"Binary Search Tree\",\n      AVL: \"AVL Tree\",\n      RBT: \"Red-Black Tree\",\n      BHP: \"Binary Heap\"\n    };\n    this.operations = {\n      BST: [{\n        name: \"Insert\",\n        callback: this.visualizer.insert\n      }, {\n        name: \"Remove\",\n        callback: this.visualizer.remove\n      }, {\n        name: \"Search\",\n        callback: this.visualizer.search\n      }],\n      AVL: [{\n        name: \"Insert\",\n        callback: this.visualizer.insert\n      }, {\n        name: \"Remove\",\n        callback: this.visualizer.remove\n      }, {\n        name: \"Search\",\n        callback: this.visualizer.search\n      }],\n      RBT: [{\n        name: \"Insert\",\n        callback: this.visualizer.insert\n      }, {\n        name: \"Remove\",\n        callback: this.visualizer.remove\n      }, {\n        name: \"Search\",\n        callback: this.visualizer.search\n      }],\n      BHP: [{\n        name: \"Insert\",\n        callback: this.visualizer.insert\n      }, {\n        name: \"Top\",\n        callback: this.visualizer.top\n      }]\n    };\n    this.state = {\n      active_tree: this.visualizer.state.tree.key\n    };\n    $(document).click(function (e) {\n      if (!e.target.classList.contains('dropdown-toggle')) {\n        closeAllDropdowns();\n      }\n    });\n  }\n\n  changeTree(tree_key) {\n    this.setState({\n      active_tree: tree_key\n    });\n    this.visualizer.changeTree(tree_key);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: \"navbar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"navbar-logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"tree-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"#\",\n      onClick: () => openDropdown(\"tree-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.trees[this.state.active_tree], React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, Object.keys(this.trees2).map((key, idx) => React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: () => this.changeTree(key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, this.trees2[key]))))), React.createElement(\"div\", {\n      id: \"operations-dropdown\",\n      className: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"dropdown-toggle\",\n      href: \"#\",\n      onClick: () => openDropdown(\"operations-dropdown\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Operations\", React.createElement(\"i\", {\n      className: \"fa fa-caret-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, this.operations[this.state.active_tree].map((operation, idx) => React.createElement(\"li\", {\n      className: \"dropdown-menu-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#\",\n      onClick: operation[\"callback\"],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, operation[\"name\"]))))), React.createElement(\"div\", {\n      id: \"generate-tree\",\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.visualizer.generateTree,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Generate\")), React.createElement(\"div\", {\n      id: \"reset-tree\",\n      className: \"navbar-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.visualizer.reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Reset\"))));\n  }\n\n}\n\nfunction openDropdown(selector) {\n  closeAllDropdowns();\n  $('#' + selector).addClass('visible');\n}\n\nfunction closeAllDropdowns() {\n  $('.dropdown').removeClass('visible');\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/NavigationBar/NavigationBar.jsx"],"names":["React","logo","$","NavigationBar","Component","constructor","props","visualizer","changeTree","bind","tree2","BST","name","operations","AVL","RBT","BHP","operations2","Insert","insert","Remove","remove","Search","search","Top","top","trees","callback","state","active_tree","tree","key","document","click","e","target","classList","contains","closeAllDropdowns","tree_key","setState","render","openDropdown","Object","keys","trees2","map","idx","operation","generateTree","reset","selector","addClass","removeClass"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from './logo.png'\r\nimport $ from 'jquery'\r\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport './NavigationBar.css';\r\n\r\nexport default class NavigationBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.visualizer = this.props.visualizer;\r\n        this.changeTree = this.changeTree.bind(this);\r\n        \r\n        this.tree2 = {\r\n            BST : {\r\n                name : \"Binary Search Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\"\r\n                ]\r\n            },\r\n            AVL : {\r\n                name : \"AVL Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\"\r\n                ]\r\n            },\r\n            RBT : {\r\n                name : \"Red-Black Tree\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Remove\",\r\n                    \"Search\"\r\n                ]\r\n            },\r\n            BHP : {\r\n                name : \"Binary Heap\",\r\n                operations : [\r\n                    \"Insert\",\r\n                    \"Top\"\r\n                ]\r\n            },\r\n        };\r\n\r\n        this.operations2 = {\r\n            Insert : this.visualizer.insert,\r\n            Remove : this.visualizer.remove,\r\n            Search : this.visualizer.search,\r\n            Top    : this.visualizer.top\r\n        }\r\n\r\n\r\n        this.trees = {\r\n            BST : \"Binary Search Tree\",\r\n            AVL : \"AVL Tree\",\r\n            RBT : \"Red-Black Tree\",\r\n            BHP : \"Binary Heap\"\r\n        };\r\n\r\n        this.operations = {\r\n            BST : [\r\n                {\r\n                    name : \"Insert\",\r\n                    callback : this.visualizer.insert\r\n                },\r\n                {\r\n                    name : \"Remove\",\r\n                    callback : this.visualizer.remove\r\n                },\r\n                {\r\n                    name : \"Search\",\r\n                    callback : this.visualizer.search\r\n                }\r\n                    ],\r\n            AVL : [\r\n                {\r\n                    name : \"Insert\",\r\n                    callback : this.visualizer.insert\r\n                },\r\n                {\r\n                    name : \"Remove\",\r\n                    callback : this.visualizer.remove\r\n                },\r\n                {\r\n                    name : \"Search\",\r\n                    callback : this.visualizer.search\r\n                }\r\n                    ],\r\n            RBT : [\r\n                {\r\n                    name : \"Insert\",\r\n                    callback : this.visualizer.insert\r\n                },\r\n                {\r\n                    name : \"Remove\",\r\n                    callback : this.visualizer.remove\r\n                },\r\n                {\r\n                    name : \"Search\",\r\n                    callback : this.visualizer.search\r\n                }\r\n                    ],\r\n            BHP : [\r\n                {\r\n                    name : \"Insert\",\r\n                    callback : this.visualizer.insert\r\n                },\r\n                {\r\n                    name : \"Top\",\r\n                    callback : this.visualizer.top\r\n                }\r\n                    ]\r\n        };\r\n\r\n        this.state = {\r\n            active_tree: this.visualizer.state.tree.key\r\n        };\r\n\r\n        $(document).click(function(e) {\r\n            if ( ! e.target.classList.contains('dropdown-toggle') ) {\r\n                closeAllDropdowns();\r\n            }\r\n        });\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        this.setState( { active_tree: tree_key } );\r\n        this.visualizer.changeTree(tree_key);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id=\"navbar-wrapper\">\r\n                    <div className=\"navbar-logo\">\r\n                        <img src={logo} alt=\"logo\" />\r\n                    </div>\r\n                    \r\n                    <div id=\"tree-dropdown\" className=\"dropdown\">\r\n                        <a\r\n                            className=\"dropdown-toggle\"\r\n                            href=\"#\"\r\n                            onClick={() => openDropdown(\"tree-dropdown\")}>\r\n                            {this.trees[ this.state.active_tree ]}\r\n                            <i className=\"fa fa-caret-down\"></i>\r\n                        </a>\r\n\r\n                        <ul className=\"dropdown-menu\">\r\n                            {Object.keys(this.trees2).map((key, idx) => (\r\n                                <li className=\"dropdown-menu-option\">\r\n                                    <a\r\n                                        href=\"#\"\r\n                                        onClick={() => this.changeTree(key)}>\r\n                                        {this.trees2[key]}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div id=\"operations-dropdown\" className=\"dropdown\">\r\n                        <a\r\n                            className=\"dropdown-toggle\"\r\n                            href=\"#\"\r\n                            onClick={() => openDropdown(\"operations-dropdown\")}>\r\n                            Operations\r\n                            <i className=\"fa fa-caret-down\"></i>\r\n                        </a>\r\n\r\n                        <ul className=\"dropdown-menu\">\r\n                            {this.operations[ this.state.active_tree ].map((operation, idx) => (\r\n                                <li className=\"dropdown-menu-option\">\r\n                                    <a\r\n                                        href=\"#\"\r\n                                        onClick={operation[\"callback\"]}>\r\n                                        {operation[\"name\"]}\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div id=\"generate-tree\" className=\"navbar-button\">\r\n                        <button\r\n                            onClick={this.visualizer.generateTree}>\r\n                            Generate\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div id=\"reset-tree\" className=\"navbar-button\">\r\n                        <button\r\n                            onClick={this.visualizer.reset}>\r\n                            Reset\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction openDropdown(selector) {\r\n    closeAllDropdowns();\r\n    $('#' + selector).addClass('visible');\r\n}\r\n\r\nfunction closeAllDropdowns() {\r\n    $('.dropdown').removeClass('visible');\r\n}"]},"metadata":{},"sourceType":"module"}