{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport InputModal from '../../Additional/InputModal/InputModal.jsx';\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx';\nimport Queue from '../../Additional/Queue.js';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n    this.timeout = 0;\n  }\n\n}\n\nexport default class BinarySearchTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.state = {\n      operation: this.initialStateOperation,\n      animation1: false,\n      animation2: false,\n      animation3: false,\n      animation4: false\n    };\n    this.receiveInput = this.receiveInput.bind(this);\n    this.animation1 = this.animation1.bind(this); // temporary\n\n    this.animation2 = this.animation2.bind(this); // temporary\n\n    this.animation3 = this.animation3.bind(this); // temporary\n\n    this.animation4 = this.animation4.bind(this); // temporary\n  }\n\n  componentDidMount() {\n    this.insertNumElements(15);\n    this.setGenerationAnimations();\n    this.setState({\n      operation: 'Generate'\n    });\n  }\n  /*static getDerivedStateFromProps(newProps, state) {\r\n      //To-do: async calls and tooltips\r\n      console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n        const initialStateOperation = 'Initial';\r\n        if ( state.animating ) {\r\n          if ( state.operation === initialStateOperation ) {\r\n              return { operation: state.operation, animating: false };\r\n          }\r\n          else {\r\n              return { operation: state.operation };\r\n          }\r\n      }\r\n      else if ( state.operation !== newProps.operation ) {\r\n          return { operation: newProps.operation, animating: true };\r\n      }\r\n      else {\r\n          return null;\r\n      }\r\n  }*/\n\n\n  insertNumElements(elements) {\n    for (let i = 0; i < elements; ++i) {\n      let val = randomIntFromInverval(1, 150);\n\n      if (this.insert(val)) {\n        if (this.height() > 5) {\n          this.root = this.remove(val);\n          --i;\n        }\n      } else {\n        --i;\n      }\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value === val) {\n        //tree contains key already\n        return false;\n      } else if (curr.value < val) {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  remove(val, node = this.root) {\n    if (node === null) return node;\n\n    if (val < node.value) {\n      node.left = this.remove(val, node.left);\n    } else if (val > node.value) {\n      node.right = this.remove(val, node.right);\n    } else {\n      if (node.left === null) {\n        return node.right;\n      } else if (node.right === null) {\n        return node.left;\n      } else {\n        node.value = this.inOrderSuccessor(node.right);\n        node.right = this.remove(node.value, node.right);\n      }\n    }\n\n    return node;\n  }\n\n  inOrderSuccessor(node) {\n    if (node === null) {\n      return node;\n    } else if (node.left !== null) {\n      return this.inOrderSuccessor(node.left);\n    } else {\n      return node.value;\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n\n  receiveInput(val) {\n    alert(val);\n  }\n\n  setGenerationAnimations() {\n    let queue = new Queue();\n    queue.push(this.root);\n    let timeout = 200;\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        queue.push(node.left);\n        queue.push(node.right);\n        node.timeout = timeout;\n        timeout += 200;\n      }\n    }\n  }\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left');\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n    const classes = ['node-wrapper', pos].join(' ');\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, this.getCricle('null')), leftChild, rightChild));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.animation1,\n        timeout: node.timeout,\n        classNames: {\n          appear: 'my-appear',\n          appearActive: 'my-active-appear',\n          appearDone: 'my-done-appear',\n          enter: 'my-enter',\n          enterActive: 'my-active-enter',\n          enterDone: 'visible',\n          exit: 'my-exit',\n          exitActive: 'my-active-exit',\n          exitDone: 'my-done-exit'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: node === this.root ? {\n          width: Math.pow(2, tree_height - 1) * 70 + 'px'\n        } : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, this.getNodeHover(node.value), this.getCricle(node.value)), leftChild, rightChild, this.getConnectingLine(pos, node.timeout))));\n    }\n  }\n\n  getCricle(val) {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"circle node-value-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      className: \"text node-value-text\",\n      x: \"50%\",\n      y: \"50%\",\n      fill: \"black\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, val), React.createElement(\"circle\", {\n      className: \"circle node-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      stroke: \"black\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    })));\n  }\n\n  getNodeHover(val) {\n    return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: \"node-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"search\",\n      onClick: () => this.searchForNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"trash\",\n      onClick: () => this.trashNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-trash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }))));\n  }\n\n  getConnectingLine(pos, time) {\n    if (pos === 'left') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.animation2,\n        timeout: time,\n        appear: true,\n        classNames: {\n          appearDone: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(\"line\", {\n        className: \"line\",\n        x1: \"0\",\n        y1: \"50\",\n        x2: \"100%\",\n        y2: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }))));\n    } else if (pos === 'right') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.animation3,\n        timeout: time,\n        appear: true,\n        classNames: {\n          appearDone: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(\"line\", {\n        className: \"line\",\n        x1: \"0\",\n        y1: \"0\",\n        x2: \"100%\",\n        y2: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }))));\n    } else {\n      return null;\n    }\n  }\n\n  animation1() {\n    this.setState({\n      animation1: true\n    });\n  }\n\n  animation2() {\n    this.setState({\n      animation2: true\n    });\n  }\n\n  animation3() {\n    this.setState({\n      animation3: true\n    });\n  }\n\n  animation4() {\n    this.setState({\n      animation4: true\n    });\n  }\n\n  render() {\n    console.log(\"BST::render: \");\n    console.log(this.state);\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: this.animation1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, \"animation1\"), React.createElement(\"button\", {\n      onClick: this.animation2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"animation2\"), React.createElement(\"button\", {\n      onClick: this.animation3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"animation3\"), React.createElement(\"button\", {\n      onClick: this.animation4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"animation4\"), false ? React.createElement(InputModal, {\n      operation: this.state.operation,\n      callback: this.receiveInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }) : null, false ? React.createElement(ErrorMessage, {\n      message: \"Error: Tree is empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, this.Tree()));\n  }\n  /*shouldComponentUpdate(nextProps, nextState) {\r\n      console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n      if ( nextState.operation === this.initialStateOperation ) {\r\n          return false;\r\n      }\r\n      else {\r\n          return true;\r\n      }\r\n  }*/\n\n  /*componentDidUpdate() {\r\n      console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n      if ( this.state.operation !== this.initialStateOperation ) {\r\n          this.setState({ operation: this.initialStateOperation });\r\n      }\r\n  }*/\n\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","CSSTransition","InputModal","ErrorMessage","Queue","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","timeout","BinarySearchTree","Component","props","initialStateOperation","name","key","root","state","operation","animation1","animation2","animation3","animation4","receiveInput","bind","componentDidMount","insertNumElements","setGenerationAnimations","setState","elements","i","insert","height","remove","reset","node","Math","max","curr","inOrderSuccessor","getScaleFactor","scale_factor","window","innerWidth","pow","alert","queue","push","empty","front","Tree","tree_height","curr_height","pos","leftChild","rightChild","classes","join","getCricle","appear","appearActive","appearDone","enter","enterActive","enterDone","exit","exitActive","exitDone","width","getNodeHover","getConnectingLine","searchForNode","trashNode","time","render","console","log","transform"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n        this.timeout = 0;\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.state = {\r\n            operation: this.initialStateOperation,\r\n            animation1: false,\r\n            animation2: false,\r\n            animation3: false,\r\n            animation4: false,\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n\r\n        this.animation1 = this.animation1.bind(this); // temporary\r\n        this.animation2 = this.animation2.bind(this); // temporary\r\n        this.animation3 = this.animation3.bind(this); // temporary\r\n        this.animation4 = this.animation4.bind(this); // temporary\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.insertNumElements(15);\r\n        this.setGenerationAnimations();\r\n        this.setState({ operation: 'Generate'});\r\n    }\r\n\r\n    /*static getDerivedStateFromProps(newProps, state) {\r\n        //To-do: async calls and tooltips\r\n        console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n\r\n        const initialStateOperation = 'Initial';\r\n\r\n        if ( state.animating ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: state.operation, animating: false };\r\n            }\r\n            else {\r\n                return { operation: state.operation };\r\n            }\r\n        }\r\n        else if ( state.operation !== newProps.operation ) {\r\n            return { operation: newProps.operation, animating: true };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }*/\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node === null ) {\r\n            return node;\r\n        }\r\n        else if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    receiveInput(val) {\r\n        alert(val);\r\n    }\r\n\r\n    setGenerationAnimations() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let timeout = 200;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                node.timeout = timeout;\r\n                timeout += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className='node-value'>\r\n                                {this.getCricle('null')}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.animation1}\r\n                        timeout={node.timeout}\r\n                        classNames={{\r\n                            appear: 'my-appear',\r\n                            appearActive: 'my-active-appear',\r\n                            appearDone: 'my-done-appear',\r\n                            enter: 'my-enter',\r\n                            enterActive: 'my-active-enter',\r\n                            enterDone: 'visible',\r\n                            exit: 'my-exit',\r\n                            exitActive: 'my-active-exit',\r\n                            exitDone: 'my-done-exit',\r\n                           }}>\r\n\r\n                        <div\r\n                            className={classes}\r\n                            node-value={node.value}\r\n                            node-layer={tree_height - curr_height}\r\n                            style={ ( node === this.root ) ? {width: Math.pow(2, tree_height - 1) * 70 + 'px'} : null }>\r\n\r\n                                <div className='node-value'>\r\n                                    {this.getNodeHover(node.value)}\r\n                                    {this.getCricle(node.value)}\r\n                                </div>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n\r\n                                {this.getConnectingLine(pos, node.timeout)}\r\n\r\n                        </div>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(val) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {val}\r\n                    </text>\r\n                    <circle className='circle node-circle' r='24' cx='25' cy='25' stroke='black' fill='none' />\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <span className='node-hover'>\r\n                    <span className='search' onClick={() => this.searchForNode(val)}>\r\n                        <i className=\"fas fa-search\" />\r\n                    </span>\r\n\r\n                    <span className='trash' onClick={() => this.trashNode(val)}>\r\n                        <i className=\"fas fa-trash\" />\r\n                    </span>\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(pos, time) {\r\n        if (pos === 'left') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.animation2}\r\n                        timeout={time}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible'\r\n                        }}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                            <line className='line' x1='0' y1='50' x2='100%' y2='0'></line>\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else if (pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.animation3}\r\n                        timeout={time}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible'\r\n                        }}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                            <line className='line' x1='0' y1='0' x2='100%' y2='50'></line>\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    animation1() {\r\n        this.setState({animation1: true});\r\n    }\r\n\r\n    animation2() {\r\n        this.setState({animation2: true});\r\n    }\r\n\r\n    animation3() {\r\n        this.setState({animation3: true});\r\n    }\r\n\r\n    animation4() {\r\n        this.setState({animation4: true});\r\n    }\r\n\r\n    render() {\r\n        console.log(\"BST::render: \");\r\n        console.log(this.state);\r\n        return (\r\n            <>\r\n                <button onClick = {this.animation1}>animation1</button>\r\n                <button onClick = {this.animation2}>animation2</button>\r\n                <button onClick = {this.animation3}>animation3</button>\r\n                <button onClick = {this.animation4}>animation4</button>\r\n\r\n                { false ? <InputModal operation = {this.state.operation} callback = {this.receiveInput} /> : null }\r\n                { false ? <ErrorMessage message = {\"Error: Tree is empty\"} /> : null }\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n        if ( nextState.operation === this.initialStateOperation ) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }*/\r\n\r\n    /*componentDidUpdate() {\r\n        console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            this.setState({ operation: this.initialStateOperation });\r\n        }\r\n    }*/\r\n}"]},"metadata":{},"sourceType":"module"}