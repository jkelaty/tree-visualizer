{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinaryTree.jsx\";\nimport React from 'react';\nimport { randomInt } from '../Helpers.js';\nimport { myMax } from '../Helpers.js';\nimport Queue from '../Queue.jsx';\n\nclass BinaryNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinaryTree {\n  constructor() {\n    this.root = null;\n  }\n\n  resetTree(elements = 3) {\n    for (let i = 0; i < elements; ++i) {\n      this.insert(randomInt(1, 20));\n    }\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    const leftHeight = this.height(node.left);\n    const rightHeight = this.height(node.right);\n    console.log(myMax(leftHeight + rightHeight));\n    return 0 + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinaryNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (val < curr.value) {\n        if (curr.left == null) {\n          curr.left = new BinaryNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      } else {\n        if (curr.right == null) {\n          curr.right = new BinaryNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      }\n    }\n  }\n\n  createDOM(node = this.root, tree_height = 5, curr_height = 0) {\n    //console.log(tree_height);\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"node\",\n        \"node-value\": \"null\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"null\")));\n    }\n\n    const leftChild = this.createDOM(node.left);\n    const rightChild = this.createDOM(node.right);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"node\",\n      \"node-value\": node.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"node-value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, node.value), leftChild, rightChild));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinaryTree.jsx"],"names":["React","randomInt","myMax","Queue","BinaryNode","constructor","val","value","left","right","BinaryTree","root","resetTree","elements","i","insert","height","node","leftHeight","rightHeight","console","log","curr","createDOM","tree_height","curr_height","leftChild","rightChild"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { randomInt } from '../Helpers.js'\r\nimport { myMax } from '../Helpers.js'\r\nimport Queue from '../Queue.jsx'\r\n\r\nclass BinaryNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinaryTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    resetTree(elements = 3) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            this.insert( randomInt(1, 20) );\r\n        }\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        const leftHeight = this.height(node.left);\r\n        const rightHeight = this.height(node.right);\r\n        console.log(myMax( leftHeight + rightHeight ));\r\n        return 0 + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinaryNode(val);\r\n            return true;\r\n        }\r\n\r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (val < curr.value) {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinaryNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n            else {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinaryNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    createDOM(node = this.root, tree_height = 5, curr_height = 0) {\r\n        //console.log(tree_height);\r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div className=\"node\" node-value=\"null\">\r\n                        <div className=\"node-value\">null</div>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n\r\n        const leftChild = this.createDOM(node.left);\r\n        const rightChild = this.createDOM(node.right);\r\n        \r\n        return (\r\n            <>\r\n                <div\r\n                    className=\"node\"\r\n                    node-value={node.value}>\r\n                        <div className=\"node-value\">{node.value}</div>\r\n                        {leftChild}\r\n                        {rightChild}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}