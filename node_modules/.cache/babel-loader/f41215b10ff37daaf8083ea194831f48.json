{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport BinaryTree from './BinaryTree.jsx';\nimport './TreeVisualizer.css';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: new BinaryTree(),\n      title: \"test\"\n    };\n  }\n\n  render() {\n    this.state.tree.insert(5);\n    this.state.tree.insert(3);\n    return buildTreeInDOM(this.state);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    let title = \"test2\";\n\n    for (let i = 0; i < 100; i++) {\n      array.push(randomIntFromInverval(5, 1000));\n    }\n\n    this.setState({\n      array,\n      title\n    });\n  }\n\n}\n\nfunction randomIntFromInverval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildTreeInDOM(state) {\n  /*const {array} = state;\r\n  return (\r\n      <>\r\n          {array.map((value,idx) => (\r\n              <div ClassName=\"array-bar\" arr_key={idx}>\r\n                  {value}\r\n              </div> \r\n          ))}\r\n      </>\r\n  );*/\n  let _state$tree$inOrderAr = state.tree.inOrderArray(),\n      test = _state$tree$inOrderAr.test;\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"node\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"node-value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, test[0]), React.createElement(\"div\", {\n    className: \"node\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"node-value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"4\")), React.createElement(\"div\", {\n    className: \"node\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"node-value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"5\"))));\n}\n/* test js\r\nvar $node = $('.node').eq(1);\r\nvar element = $('.node').eq(0).clone();\r\nelement.appendTo( $node );\r\nelement = element.clone();\r\nelement.appendTo( $node );\r\n$node.siblings('.node').css( 'width', $node.css('width') );\r\n*/","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","BinaryTree","TreeVisualizer","Component","constructor","props","state","tree","title","render","insert","buildTreeInDOM","componentDidMount","resetArray","array","i","push","randomIntFromInverval","setState","min","max","Math","floor","random","inOrderArray","test"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,sBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,IAAIN,UAAJ,EADG;AAETO,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIH;;AAEDC,EAAAA,MAAM,GAAG;AACL,SAAKH,KAAL,CAAWC,IAAX,CAAgBG,MAAhB,CAAuB,CAAvB;AACA,SAAKJ,KAAL,CAAWC,IAAX,CAAgBG,MAAhB,CAAuB,CAAvB;AAGA,WAAOC,cAAc,CAAC,KAAKL,KAAN,CAArB;AACH;;AAEDM,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAMC,KAAK,GAAG,EAAd;AACA,QAAIN,KAAK,GAAG,OAAZ;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BD,MAAAA,KAAK,CAACE,IAAN,CAAWC,qBAAqB,CAAC,CAAD,EAAG,IAAH,CAAhC;AACH;;AACD,SAAKC,QAAL,CAAc;AAACJ,MAAAA,KAAD;AAAQN,MAAAA;AAAR,KAAd;AACH;;AA7BuD;;AAgC5D,SAASS,qBAAT,CAA+BE,GAA/B,EAAoCC,GAApC,EAAyC;AACrC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH;;AAED,SAASR,cAAT,CAAwBL,KAAxB,EAA+B;AAC3B;;;;;;;;;;AAD2B,8BAYdA,KAAK,CAACC,IAAN,CAAWiB,YAAX,EAZc;AAAA,MAYtBC,IAZsB,yBAYtBA,IAZsB;;AAc3B,SACI,0CACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BA,IAAI,CAAC,CAAD,CAAjC,CADA,EAEI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,CAFJ,EAKI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,CALJ,CADJ,CADJ;AAaH;AAED","sourcesContent":["import React from 'react';\r\nimport BinaryTree from './BinaryTree.jsx'\r\nimport './TreeVisualizer.css';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: new BinaryTree(),\r\n            title: \"test\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        this.state.tree.insert(5);\r\n        this.state.tree.insert(3);\r\n\r\n\r\n        return buildTreeInDOM(this.state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        let title = \"test2\";\r\n        for (let i = 0; i < 100; i++) {\r\n            array.push(randomIntFromInverval(5,1000));\r\n        }\r\n        this.setState({array, title});\r\n    }\r\n}\r\n\r\nfunction randomIntFromInverval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction buildTreeInDOM(state) {\r\n    /*const {array} = state;\r\n    return (\r\n        <>\r\n            {array.map((value,idx) => (\r\n                <div ClassName=\"array-bar\" arr_key={idx}>\r\n                    {value}\r\n                </div> \r\n            ))}\r\n        </>\r\n    );*/\r\n\r\n    let {test} = state.tree.inOrderArray();\r\n\r\n    return (\r\n        <>\r\n            <div className=\"node\">\r\n            <div className=\"node-value\">{test[0]}</div>\r\n                <div className=\"node\">\r\n                    <div className=\"node-value\">4</div>\r\n                </div>\r\n                <div className=\"node\">\r\n                    <div className=\"node-value\">5</div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n/* test js\r\nvar $node = $('.node').eq(1);\r\nvar element = $('.node').eq(0).clone();\r\nelement.appendTo( $node );\r\nelement = element.clone();\r\nelement.appendTo( $node );\r\n$node.siblings('.node').css( 'width', $node.css('width') );\r\n*/"]},"metadata":{},"sourceType":"module"}