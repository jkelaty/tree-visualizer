{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport NavigationBar from './NavigationBar/NavigationBar.jsx';\nimport Tooltips from './Tooltips/Tooltips.jsx';\nimport DefaultTree from './Trees/DefaultTree/DefaultTree.jsx';\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx';\nimport './TreeVisualizer.scss';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: new BinarySearchTree(),\n      tree_state: 'Initial'\n    };\n    this.performOperation = this.performOperation.bind(this);\n    this.toggleTooltips = this.toggleTooltips.bind(this);\n    this.changeTree = this.changeTree.bind(this);\n  }\n\n  performOperation(operation) {\n    const newState = this.state.tree.performOperation(operation);\n    this.setState({\n      tree_state: newState\n    });\n  }\n\n  toggleTooltips() {// to-do\n  }\n\n  changeTree(tree_key) {\n    switch (tree_key) {\n      case 'BST':\n        this.setState({\n          tree: new BinarySearchTree()\n        });\n        break;\n\n      case 'AVL':\n        this.setState({\n          tree: new DefaultTree()\n        });\n        break;\n\n      case 'RBT':\n        this.setState({\n          tree: new DefaultTree()\n        });\n        break;\n\n      case 'BHP':\n        this.setState({\n          tree: new DefaultTree()\n        });\n        break;\n\n      default:\n        this.setState({\n          tree: new DefaultTree()\n        }); //show error?, invalid tree\n\n        break;\n    }\n  }\n\n  Tree() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      id: this.state.tree.name,\n      className: \"tree\",\n      style: {\n        transform: this.state.tree.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.state.tree.Tree()));\n  }\n\n  componentWillUpdate() {\n    this.state.tree.preRender(this.state.tree_state);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(NavigationBar, {\n      visualizer: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), this.Tree(), React.createElement(Tooltips, {\n      active: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }));\n  }\n\n  componentDidUpdate() {\n    const newState = this.state.tree.postRender(this.state.tree_state);\n\n    if (this.state.tree_state !== newState) {\n      this.setState({\n        tree_state: newState\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","NavigationBar","Tooltips","DefaultTree","BinarySearchTree","TreeVisualizer","Component","constructor","props","state","tree","tree_state","performOperation","bind","toggleTooltips","changeTree","operation","newState","setState","tree_key","Tree","name","transform","getScaleFactor","componentWillUpdate","preRender","render","componentDidUpdate","postRender"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\nimport Tooltips from './Tooltips/Tooltips.jsx'\r\n\r\nimport DefaultTree from './Trees/DefaultTree/DefaultTree.jsx'\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\n\r\nimport './TreeVisualizer.scss';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: new BinarySearchTree(),\r\n            tree_state: 'Initial'\r\n        };\r\n\r\n        this.performOperation = this.performOperation.bind(this);\r\n        this.toggleTooltips   = this.toggleTooltips.bind(this);\r\n        this.changeTree       = this.changeTree.bind(this);\r\n    }\r\n\r\n    performOperation(operation) {\r\n        const newState = this.state.tree.performOperation(operation);\r\n        this.setState( { tree_state: newState } );\r\n    }\r\n\r\n    toggleTooltips() {\r\n        // to-do\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        switch (tree_key) {\r\n            case 'BST': this.setState( { tree: new BinarySearchTree() } );\r\n                break;\r\n            case 'AVL': this.setState( { tree: new DefaultTree() } );\r\n                break;\r\n            case 'RBT': this.setState( { tree: new DefaultTree() } );\r\n                break;\r\n            case 'BHP': this.setState( { tree: new DefaultTree() } );\r\n                break;\r\n            default: this.setState( { tree: new DefaultTree() } );  //show error?, invalid tree\r\n                break;\r\n        }\r\n    }\r\n\r\n    Tree() {\r\n        return (\r\n            <>\r\n                <div\r\n                    id={ this.state.tree.name }\r\n                    className='tree'\r\n                    style={ {transform: this.state.tree.getScaleFactor()} }>\r\n\r\n                    { this.state.tree.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        this.state.tree.preRender(this.state.tree_state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} />\r\n                \r\n                { this.Tree() }\r\n\r\n                <Tooltips active = {false} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const newState = this.state.tree.postRender(this.state.tree_state);\r\n\r\n        if ( this.state.tree_state !== newState ) {\r\n            this.setState( { tree_state: newState } );\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}