{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport BinaryTree from './BinaryTree.jsx';\nimport './TreeVisualizer.css';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"test\",\n      tree: new BinaryTree()\n    };\n    this.state.tree.insert(1);\n    this.state.tree.insert(3);\n    this.state.tree.insert(5);\n    this.state.tree.insert(7);\n    this.state.tree.insert(randomIntFromInverval(1, 10));\n  }\n\n  render() {\n    return buildTreeInDOM(this.state);\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    let title = \"test2\";\n    this.setState({\n      title\n    });\n  }\n\n}\n\nfunction randomIntFromInverval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction buildTreeInDOM(state) {\n  /*const {array} = state;\r\n  return (\r\n      <>\r\n          {array.map((value,idx) => (\r\n              <div ClassName=\"array-bar\" arr_key={idx}>\r\n                  {value}\r\n              </div> \r\n          ))}\r\n      </>\r\n  );*/\n  const array = state.tree.levelOrder();\n  let return_dom = [];\n\n  for (let i = 0; i < array.length; ++i) {\n    for (let j = 0; j < array[i].length; ++j) {\n      let value = array[i][j] ? array[i][j].value : null;\n      return_dom.push(React.createElement(\"div\", {\n        className: \"node\",\n        \"data-layer\": i,\n        \"data-nth-node\": j,\n        \"data-value\": value ? value : \"null\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, value)));\n    }\n  }\n\n  return React.createElement(React.Fragment, null, return_dom);\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","BinaryTree","TreeVisualizer","Component","constructor","props","state","title","tree","insert","randomIntFromInverval","render","buildTreeInDOM","componentDidMount","resetArray","setState","min","max","Math","floor","random","array","levelOrder","return_dom","i","length","j","value","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,sBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,MADE;AAETC,MAAAA,IAAI,EAAE,IAAIP,UAAJ;AAFG,KAAb;AAKA,SAAKK,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,CAAuB,CAAvB;AACA,SAAKH,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,CAAuB,CAAvB;AACA,SAAKH,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,CAAuB,CAAvB;AACA,SAAKH,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,CAAuB,CAAvB;AACA,SAAKH,KAAL,CAAWE,IAAX,CAAgBC,MAAhB,CAAwBC,qBAAqB,CAAC,CAAD,EAAI,EAAJ,CAA7C;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WAAOC,cAAc,CAAC,KAAKN,KAAN,CAArB;AACH;;AAEDO,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,QAAIP,KAAK,GAAG,OAAZ;AACA,SAAKQ,QAAL,CAAc;AAACR,MAAAA;AAAD,KAAd;AACH;;AA3BuD;;AA8B5D,SAASG,qBAAT,CAA+BM,GAA/B,EAAoCC,GAApC,EAAyC;AACrC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH;;AAED,SAASJ,cAAT,CAAwBN,KAAxB,EAA+B;AAC3B;;;;;;;;;;AAWA,QAAMe,KAAK,GAAGf,KAAK,CAACE,IAAN,CAAWc,UAAX,EAAd;AACA,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACnC,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACG,CAAD,CAAL,CAASC,MAA7B,EAAqC,EAAEC,CAAvC,EAA0C;AACtC,UAAIC,KAAK,GAAGN,KAAK,CAACG,CAAD,CAAL,CAASE,CAAT,IAAcL,KAAK,CAACG,CAAD,CAAL,CAASE,CAAT,EAAYC,KAA1B,GAAkC,IAA9C;AACAJ,MAAAA,UAAU,CAACK,IAAX,CACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,sBAAYJ,CAAlC;AAAqC,yBAAeE,CAApD;AAAuD,sBAAYC,KAAK,GAAGA,KAAH,GAAW,MAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6BA,KAA7B,CADJ,CADJ;AAKH;AACJ;;AAED,SACI,0CACKJ,UADL,CADJ;AAKH","sourcesContent":["import React from 'react';\r\nimport BinaryTree from './BinaryTree.jsx'\r\nimport './TreeVisualizer.css';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            title: \"test\",\r\n            tree: new BinaryTree()           \r\n        };\r\n\r\n        this.state.tree.insert(1);\r\n        this.state.tree.insert(3);\r\n        this.state.tree.insert(5);\r\n        this.state.tree.insert(7);\r\n        this.state.tree.insert( randomIntFromInverval(1, 10) );\r\n    }\r\n\r\n    render() {\r\n        return buildTreeInDOM(this.state);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        let title = \"test2\"\r\n        this.setState({title});\r\n    }\r\n}\r\n\r\nfunction randomIntFromInverval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction buildTreeInDOM(state) {\r\n    /*const {array} = state;\r\n    return (\r\n        <>\r\n            {array.map((value,idx) => (\r\n                <div ClassName=\"array-bar\" arr_key={idx}>\r\n                    {value}\r\n                </div> \r\n            ))}\r\n        </>\r\n    );*/\r\n\r\n    const array = state.tree.levelOrder();\r\n    let return_dom = [];\r\n\r\n    for (let i = 0; i < array.length; ++i) {\r\n        for (let j = 0; j < array[i].length; ++j) {\r\n            let value = array[i][j] ? array[i][j].value : null;\r\n            return_dom.push(\r\n                <div className=\"node\" data-layer={i} data-nth-node={j} data-value={value ? value : \"null\"}>\r\n                    <div className=\"node-value\">{value}</div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {return_dom}\r\n        </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}