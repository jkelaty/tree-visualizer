{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport anime from 'animejs';\nimport { CSSTransition } from 'react-transition-group';\nimport InputModal from '../../Additional/InputModal/InputModal.jsx';\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx';\nimport Queue from '../../Additional/Queue.js';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n    this.animations = {\n      initial: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      visited: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      success: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      removed: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      }\n    };\n  }\n\n}\n\nexport default class BinarySearchTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.visibleClasses = {\n      appearDone: 'visible',\n      enterDone: 'visible',\n      exit: 'visible'\n    };\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.target = 0;\n    this.state = {\n      initial: false\n    };\n    this.receiveInput = this.receiveInput.bind(this);\n    this.action1 = this.action1.bind(this); // temporary\n\n    this.action2 = this.action2.bind(this); // temporary\n\n    this.action3 = this.action3.bind(this); // temporary\n\n    this.action4 = this.action4.bind(this); // temporary\n\n    this.action5 = this.action5.bind(this); // temporary\n\n    this.action6 = this.action6.bind(this); // temporary\n\n    this.action7 = this.action7.bind(this); // temporary\n\n    this.action8 = this.action8.bind(this); // temporary\n\n    this.action9 = this.action9.bind(this); // temporary\n\n    this.action10 = this.action10.bind(this); // temporary\n\n    this.action11 = this.action11.bind(this); // temporary\n\n    this.action12 = this.action12.bind(this); // temporary\n\n    this.action13 = this.action13.bind(this); // temporary\n\n    this.action14 = this.action14.bind(this); // temporary\n  }\n\n  componentDidMount() {} // call generate function\n\n  /*static getDerivedStateFromProps(newProps, state) {\r\n      //To-do: async calls and tooltips\r\n      console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n        const initialStateOperation = 'Initial';\r\n        if ( state.animating ) {\r\n          if ( state.operation === initialStateOperation ) {\r\n              return { operation: state.operation, animating: false };\r\n          }\r\n          else {\r\n              return { operation: state.operation };\r\n          }\r\n      }\r\n      else if ( state.operation !== newProps.operation ) {\r\n          return { operation: newProps.operation, animating: true };\r\n      }\r\n      else {\r\n          return null;\r\n      }\r\n  }*/\n\n\n  insertNumElements(elements) {\n    for (let i = 0; i < elements; ++i) {\n      let val = randomIntFromInverval(1, 150);\n\n      if (this.insert(val)) {\n        if (this.height() > 5) {\n          this.root = this.remove(val);\n          --i;\n        }\n      } else {\n        --i;\n      }\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node === null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root === null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value === val) {\n        //tree contains key already\n        return false;\n      } else if (curr.value < val) {\n        if (curr.right === null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left === null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  remove(val, node = this.root) {\n    if (node === null) return node;\n\n    if (val < node.value) {\n      node.left = this.remove(val, node.left);\n    } else if (val > node.value) {\n      node.right = this.remove(val, node.right);\n    } else {\n      if (node.left === null) {\n        return node.right;\n      } else if (node.right === null) {\n        return node.left;\n      } else {\n        node.value = this.inOrderSuccessor(node.right);\n        node.right = this.remove(node.value, node.right);\n      }\n    }\n\n    return node;\n  }\n\n  inOrderSuccessor(node) {\n    if (node === null) {\n      return node;\n    } else if (node.left !== null) {\n      return this.inOrderSuccessor(node.left);\n    } else {\n      return node.value;\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n\n  receiveInput(val) {\n    alert(val);\n  }\n\n  searchNode(val) {\n    this.action5(val);\n  }\n\n  deleteNode(val) {\n    this.action8(val);\n  }\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left');\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n    const classes = ['node-wrapper', pos].join(' ');\n\n    if (node === null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }), leftChild, rightChild));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: node.animations['initial']['node']['active'],\n        timeout: node.animations['initial']['node']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: node === this.root ? {\n          width: Math.pow(2, tree_height - 1) * 70 + 'px'\n        } : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, this.getNodeHover(node.value), this.getCricle(node)), leftChild, rightChild, this.getConnectingLine(node, pos))));\n    }\n  }\n\n  getCricle(node) {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"circle node-value-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle initial\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(CSSTransition, {\n      in: node.animations['visited']['node']['active'],\n      timeout: node.animations['visited']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background visited\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle visited\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }))), React.createElement(CSSTransition, {\n      in: node.animations['success']['node']['active'],\n      timeout: node.animations['success']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background success\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle success\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }))), React.createElement(CSSTransition, {\n      in: node.animations['removed']['node']['active'],\n      timeout: node.animations['removed']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background removed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle removed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }))), React.createElement(\"text\", {\n      className: \"text node-value-text\",\n      x: \"50%\",\n      y: \"50%\",\n      fill: \"black\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, node.value)));\n  }\n\n  getNodeHover(val) {\n    return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: \"node-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      onClick: () => this.searchNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }))), React.createElement(\"i\", {\n      className: \"fas fa-trash\",\n      onClick: () => this.deleteNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"trash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    })))));\n  }\n\n  getConnectingLine(node, pos) {\n    if (pos === 'left' || pos === 'right') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: node.animations['initial']['line']['active'],\n        timeout: node.animations['initial']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }, this.getLine(pos, 'initial'), React.createElement(CSSTransition, {\n        in: node.animations['visited']['line']['active'],\n        timeout: node.animations['visited']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, this.getLine(pos, 'visited')), React.createElement(CSSTransition, {\n        in: node.animations['success']['line']['active'],\n        timeout: node.animations['success']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, this.getLine(pos, 'success')), React.createElement(CSSTransition, {\n        in: node.animations['removed']['line']['active'],\n        timeout: node.animations['removed']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, this.getLine(pos, 'removed')))));\n    } else {\n      return null;\n    }\n  }\n\n  getLine(pos, addClass) {\n    const classes = ['line', addClass].join(' ');\n    if (pos === 'left') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"50\",\n      x2: \"100%\",\n      y2: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    });else if (pos === 'right') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"100%\",\n      y2: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    });else return null;\n  }\n\n  setGenerationAnimations() {\n    let queue = new Queue();\n    queue.push(this.root);\n    let delay = 150;\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        queue.push(node.left);\n        queue.push(node.right);\n\n        for (let key in node.animations['initial']) {\n          node.animations['initial'][key]['active'] = true;\n          node.animations['initial'][key]['delay'] = delay;\n        }\n\n        delay += 200;\n      }\n    }\n  }\n\n  setHideAnimations(node = this.root) {\n    if (node === null) return;\n\n    for (let state in node.animations) {\n      for (let element in node.animations[state]) {\n        node.animations[state][element]['active'] = false;\n        node.animations[state][element]['delay'] = 150;\n      }\n    }\n\n    this.setHideAnimations(node.left);\n    this.setHideAnimations(node.right);\n  }\n\n  setHideTraversalAnimations(node = this.root) {\n    if (node === null) return;\n\n    for (let state in node.animations) {\n      for (let element in node.animations[state]) {\n        if (state === 'initial') {\n          node.animations[state][element]['active'] = true;\n        } else {\n          node.animations[state][element]['active'] = false;\n        }\n\n        node.animations[state][element]['delay'] = 150;\n      }\n    }\n\n    this.setHideTraversalAnimations(node.left);\n    this.setHideTraversalAnimations(node.right);\n  }\n\n  setDFSTraversalAnimations(order, node = this.root, delay = 150) {\n    if (node === null) return delay;\n\n    let _delay = node === this.root ? delay : delay + 1000;\n\n    node.animations['visited']['node']['active'] = true;\n    node.animations['visited']['node']['delay'] = _delay + 500;\n    node.animations['visited']['line']['active'] = true;\n    node.animations['visited']['line']['delay'] = _delay;\n\n    if (order === 'Pre-order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\n\n    if (order === 'In-order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\n\n    if (order === 'Post-order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    node.animations['success']['line']['active'] = true;\n    node.animations['success']['line']['delay'] = _delay;\n    return _delay;\n  }\n\n  setBFSTraversalAnimations() {\n    let queue = new Queue();\n    let delay = 150;\n\n    if (this.root) {\n      queue.push(this.root);\n      this.root.animations['visited']['node']['active'] = true;\n      this.root.animations['visited']['node']['delay'] = delay;\n    } else {//error..tree is empty\n    }\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        if (node.left) {\n          queue.push(node.left);\n          delay += 1000;\n\n          for (let element in node.left.animations['visited']) {\n            node.left.animations['visited'][element]['active'] = true;\n            node.left.animations['visited'][element]['delay'] = delay;\n          }\n        }\n\n        if (node.right) {\n          queue.push(node.right);\n          delay += 1000;\n\n          for (let element in node.right.animations['visited']) {\n            node.right.animations['visited'][element]['active'] = true;\n            node.right.animations['visited'][element]['delay'] = delay;\n          }\n        }\n\n        delay += 1000;\n\n        for (let element in node.animations['success']) {\n          node.animations['success'][element]['active'] = true;\n          node.animations['success'][element]['delay'] = delay;\n        }\n      }\n    }\n  }\n\n  setSearchAnimations(node = this.root, delay = 150) {\n    if (!this.target) return;\n\n    if (node === null) {\n      if (node === this.root) {//show error..empty tree\n      }\n    } else {\n      if (this.target === node.value) {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay + 1250;\n      } else if (this.target < node.value) this.setSearchAnimations(node.left, delay + 1000);else this.setSearchAnimations(node.right, delay + 1000);\n\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n    }\n  }\n\n  setInsertAnimations(node = this.root, delay = 150) {\n    if (!this.target || !node) return;else {\n      if (this.target === node.value) return;else if (this.target < node.value) this.setInsertAnimations(node.left, delay + 1000);else this.setInsertAnimations(node.right, delay + 1000);\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n    }\n  }\n\n  setInsertionCompleteAnimations(node = this.root) {\n    if (!this.target || !node) return;else {\n      if (this.target === node.value) {\n        node.animations['initial']['node']['active'] = true;\n        node.animations['initial']['node']['delay'] = 650;\n        node.animations['initial']['line']['active'] = true;\n        node.animations['initial']['line']['delay'] = 150;\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = 1250;\n      } else if (this.target < node.value) this.setInsertionCompleteAnimations(node.left);else this.setInsertionCompleteAnimations(node.right);\n    }\n  }\n\n  setRemoveAnimations(node = this.root, delay = 150) {\n    if (!this.target) return;\n\n    if (node === null) {\n      if (node === this.root) {//show error..empty tree\n      }\n    } else {\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n\n      if (this.target === node.value) {\n        if (node.left === null && node.right === null) {\n          node.animations['removed']['line']['active'] = true;\n          node.animations['removed']['line']['delay'] = delay + 1000;\n        }\n\n        node.animations['removed']['node']['active'] = true;\n        node.animations['removed']['node']['delay'] = delay + 1500;\n        node.animations['initial']['node']['active'] = false;\n        node.animations['initial']['node']['delay'] = delay + 1500;\n        node.animations['initial']['line']['active'] = false;\n        node.animations['initial']['line']['delay'] = delay + 1500;\n      } else if (this.target < node.value) this.setRemoveAnimations(node.left, delay + 1000);else this.setRemoveAnimations(node.right, delay + 1000);\n    }\n  }\n\n  setInOrderSuccessorAnimations(val, node = this.root, found = false) {\n    if (!found) {\n      if (val === node.value) {\n        this.setInOrderSuccessorAnimations(val, node, true);\n      } else if (val < node.value) this.setInOrderSuccessorAnimations(val, node.left);else this.setInOrderSuccessorAnimations(val, node.right);\n    } else {\n      if (node.left === null && node.right === null) {\n        node.animations['initial']['node']['active'] = false;\n        node.animations['initial']['node']['delay'] = 150;\n        node.animations['initial']['line']['active'] = false;\n        node.animations['initial']['line']['delay'] = 150;\n        node.animations['visited']['node']['active'] = false;\n        node.animations['visited']['node']['delay'] = 150;\n        node.animations['visited']['line']['active'] = false;\n        node.animations['visited']['line']['delay'] = 150;\n        node.animations['removed']['node']['active'] = false;\n        node.animations['removed']['node']['delay'] = 150;\n        node.animations['removed']['line']['active'] = false;\n        node.animations['removed']['line']['delay'] = 150;\n      } else if (node.left === null) {//return node.right;\n      } else if (node.right === null) {//return node.left;\n      } else {//node.value = this.inOrderSuccessor(node.right);\n          //node.right = this.remove(node.value, node.right);\n        }\n    }\n  }\n  /*remove(val, node = this.root) {\r\n      if ( node === null ) return node;\r\n        if ( val < node.value ) {\r\n          node.left = this.remove(val, node.left);\r\n      }\r\n      else if ( val > node.value ) {\r\n          node.right = this.remove(val, node.right);\r\n      }\r\n      else {\r\n          if ( node.left === null ) {\r\n              return node.right;\r\n          }\r\n          else if ( node.right === null ) {\r\n              return node.left;\r\n          }\r\n          else {\r\n              node.value = this.inOrderSuccessor(node.right);\r\n              node.right = this.remove(node.value, node.right);\r\n          }\r\n      }\r\n        return node;\r\n  }\r\n    inOrderSuccessor(node) {\r\n      if ( node === null ) {\r\n          return node;\r\n      }\r\n      else if ( node.left !== null ) {\r\n          return this.inOrderSuccessor(node.left);\r\n      }\r\n      else {\r\n          return node.value;\r\n      }\r\n  }*/\n\n\n  action1() {\n    this.reset();\n    this.insertNumElements(15);\n    this.setGenerationAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action2() {\n    this.target = null;\n    this.setHideAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action3() {\n    this.target = null;\n    this.setHideTraversalAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action4() {\n    //this.setDFSTraversalAnimations('In-order');\n    this.setBFSTraversalAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action5(val) {\n    this.target = val;\n    this.setSearchAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action6() {\n    //check if tree has element first..\n    this.target = parseInt(prompt());\n    this.insert(this.target);\n    this.setInsertAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action7() {\n    this.setInsertionCompleteAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action8(val) {\n    //check if tree has element first..\n    this.target = val;\n    this.setRemoveAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action9() {\n    this.setInOrderSuccessorAnimations(this.target);\n    this.setState({\n      initial: true\n    });\n  }\n\n  action10() {}\n\n  action11() {}\n\n  action12() {}\n\n  action13() {\n    this.remove(this.target);\n    this.setState({\n      initial: true\n    });\n  }\n\n  action14() {\n    this.reset();\n  }\n\n  render() {\n    console.log(\"BST::render: \");\n    console.log(this.state);\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: this.action1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, \"Generate new tree\"), React.createElement(\"button\", {\n      onClick: this.action2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, \"Hide Tree\"), React.createElement(\"button\", {\n      onClick: this.action3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, \"Hide traversals\"), React.createElement(\"button\", {\n      onClick: this.action4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, \"Traversals\"), React.createElement(\"button\", {\n      onClick: this.action5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, \"Search\"), React.createElement(\"button\", {\n      onClick: this.action6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }, \"Insert\"), React.createElement(\"button\", {\n      onClick: this.action7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }, \"Insert complete\"), React.createElement(\"button\", {\n      onClick: this.action8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, \"Remove\"), React.createElement(\"button\", {\n      onClick: this.action9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832\n      },\n      __self: this\n    }, \"Remove step 2 (in order successor)\"), React.createElement(\"button\", {\n      onClick: this.action10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, \"n/a\"), React.createElement(\"button\", {\n      onClick: this.action11,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }, \"n/a\"), React.createElement(\"button\", {\n      onClick: this.action12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }, \"n/a\"), React.createElement(\"button\", {\n      onClick: this.action13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836\n      },\n      __self: this\n    }, \"Remove final\"), React.createElement(\"button\", {\n      onClick: this.action14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837\n      },\n      __self: this\n    }, \"Reset\"), false ? React.createElement(InputModal, {\n      operation: this.state.operation,\n      callback: this.receiveInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }) : null, false ? React.createElement(ErrorMessage, {\n      message: \"Error: Tree is empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, this.Tree()));\n  }\n  /*shouldComponentUpdate(nextProps, nextState) {\r\n      console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n      if ( nextState.operation === this.initialStateOperation ) {\r\n          return false;\r\n      }\r\n      else {\r\n          return true;\r\n      }\r\n  }*/\n\n  /*componentDidUpdate() {\r\n      console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n      if ( this.state.operation !== this.initialStateOperation ) {\r\n          this.setState({ operation: this.initialStateOperation });\r\n      }\r\n  }*/\n\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","anime","CSSTransition","InputModal","ErrorMessage","Queue","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","animations","initial","node","active","delay","line","visited","success","removed","BinarySearchTree","Component","props","initialStateOperation","visibleClasses","appearDone","enterDone","exit","name","key","root","target","state","receiveInput","bind","action1","action2","action3","action4","action5","action6","action7","action8","action9","action10","action11","action12","action13","action14","componentDidMount","insertNumElements","elements","i","insert","height","remove","reset","Math","max","curr","inOrderSuccessor","getScaleFactor","scale_factor","window","innerWidth","pow","alert","searchNode","deleteNode","Tree","tree_height","curr_height","pos","leftChild","rightChild","classes","join","width","getNodeHover","getCricle","getConnectingLine","getLine","addClass","setGenerationAnimations","queue","push","empty","front","setHideAnimations","element","setHideTraversalAnimations","setDFSTraversalAnimations","order","_delay","setBFSTraversalAnimations","setSearchAnimations","setInsertAnimations","setInsertionCompleteAnimations","setRemoveAnimations","setInOrderSuccessorAnimations","found","setState","parseInt","prompt","render","console","log","operation","transform"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport anime from 'animejs'\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n\r\n        this.animations = {\r\n            initial: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            },\r\n            visited: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            },\r\n            success: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            },\r\n            removed: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.visibleClasses = {\r\n            appearDone: 'visible',\r\n            enterDone: 'visible',\r\n            exit: 'visible'\r\n        };\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.target = 0;\r\n\r\n        this.state = {\r\n            initial: false\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n\r\n        this.action1 = this.action1.bind(this); // temporary\r\n        this.action2 = this.action2.bind(this); // temporary\r\n        this.action3 = this.action3.bind(this); // temporary\r\n        this.action4 = this.action4.bind(this); // temporary\r\n        this.action5 = this.action5.bind(this); // temporary\r\n        this.action6 = this.action6.bind(this); // temporary\r\n        this.action7 = this.action7.bind(this); // temporary\r\n        this.action8 = this.action8.bind(this); // temporary\r\n        this.action9 = this.action9.bind(this); // temporary\r\n        this.action10 = this.action10.bind(this); // temporary\r\n        this.action11 = this.action11.bind(this); // temporary\r\n        this.action12 = this.action12.bind(this); // temporary\r\n        this.action13 = this.action13.bind(this); // temporary\r\n        this.action14 = this.action14.bind(this); // temporary\r\n    }\r\n\r\n    componentDidMount() {\r\n        // call generate function\r\n    }\r\n\r\n    /*static getDerivedStateFromProps(newProps, state) {\r\n        //To-do: async calls and tooltips\r\n        console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n\r\n        const initialStateOperation = 'Initial';\r\n\r\n        if ( state.animating ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: state.operation, animating: false };\r\n            }\r\n            else {\r\n                return { operation: state.operation };\r\n            }\r\n        }\r\n        else if ( state.operation !== newProps.operation ) {\r\n            return { operation: newProps.operation, animating: true };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }*/\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node === null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root === null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right === null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left === null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node === null ) {\r\n            return node;\r\n        }\r\n        else if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    receiveInput(val) {\r\n        alert(val);\r\n    }\r\n\r\n    searchNode(val) {\r\n        this.action5(val);\r\n    }\r\n\r\n    deleteNode(val) {\r\n        this.action8(val);\r\n    }\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node === null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className='node-value' />\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={node.animations['initial']['node']['active']}\r\n                        timeout={node.animations['initial']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n                        \r\n                        <div\r\n                            className={classes}\r\n                            node-value={node.value}\r\n                            node-layer={tree_height - curr_height}\r\n                            style={ ( node === this.root ) ? {width: Math.pow(2, tree_height - 1) * 70 + 'px'} : null }>\r\n\r\n                            <div className='node-value'>\r\n                                {this.getNodeHover(node.value)}\r\n                                {this.getCricle(node)}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n\r\n                            {this.getConnectingLine(node, pos)}\r\n\r\n                        </div>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(node) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                    <circle className='circle node-circle initial' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['visited']['node']['active']}\r\n                        timeout={node.animations['visited']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background visited' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle visited' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['success']['node']['active']}\r\n                        timeout={node.animations['success']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background success' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle success' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['removed']['node']['active']}\r\n                        timeout={node.animations['removed']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background removed' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle removed' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                    \r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {node.value}\r\n                    </text>\r\n\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <span className='node-hover'>\r\n                    <i className=\"fas fa-search\" onClick={() => this.searchNode(val)} />\r\n                    <span className='search'>\r\n                        <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n\r\n                    <i className=\"fas fa-trash\" onClick={() => this.deleteNode(val)} />\r\n                    <span className='trash'>\r\n                        <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(node, pos) {\r\n        if (pos === 'left' || pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={node.animations['initial']['line']['active']}\r\n                        timeout={node.animations['initial']['line']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                            {this.getLine(pos, 'initial')}\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['visited']['line']['active']}\r\n                                timeout={node.animations['visited']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'visited')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['success']['line']['active']}\r\n                                timeout={node.animations['success']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'success')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['removed']['line']['active']}\r\n                                timeout={node.animations['removed']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'removed')}\r\n\r\n                            </CSSTransition>\r\n\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getLine(pos, addClass) {\r\n        const classes = ['line', addClass].join(' ');\r\n\r\n        if (pos === 'left')\r\n            return ( <line className={classes} x1='0' y1='50' x2='100%' y2='0' /> );\r\n        else if (pos === 'right')\r\n            return ( <line className={classes} x1='0' y1='0' x2='100%' y2='50' /> );\r\n        else\r\n            return null;\r\n    }\r\n\r\n    setGenerationAnimations() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let delay = 150;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                for (let key in node.animations['initial']) {\r\n                    node.animations['initial'][key]['active'] = true;\r\n                    node.animations['initial'][key]['delay'] = delay;\r\n                }\r\n                \r\n                delay += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    setHideAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                node.animations[state][element]['active'] = false;\r\n                node.animations[state][element]['delay'] = 150;\r\n            }\r\n        }\r\n\r\n        this.setHideAnimations(node.left);\r\n        this.setHideAnimations(node.right);\r\n    }\r\n\r\n    setHideTraversalAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                if (state === 'initial') {\r\n                    node.animations[state][element]['active'] = true;\r\n                }\r\n                else {\r\n                    node.animations[state][element]['active'] = false;\r\n                }\r\n\r\n                node.animations[state][element]['delay'] = 150;\r\n            }\r\n        }\r\n\r\n        this.setHideTraversalAnimations(node.left);\r\n        this.setHideTraversalAnimations(node.right);\r\n    }\r\n\r\n    setDFSTraversalAnimations(order, node = this.root, delay = 150) {\r\n        if (node === null) return delay;\r\n\r\n        let _delay = node === this.root ? delay : delay + 1000;\r\n\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = _delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = _delay;\r\n\r\n        if (order === 'Pre-order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\r\n\r\n        if (order === 'In-order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\r\n\r\n        if (order === 'Post-order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        node.animations['success']['line']['active'] = true;\r\n        node.animations['success']['line']['delay'] = _delay;\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setBFSTraversalAnimations() {\r\n        let queue = new Queue();\r\n\r\n        let delay = 150;\r\n\r\n        if (this.root) {\r\n            queue.push(this.root);\r\n\r\n            this.root.animations['visited']['node']['active'] = true;\r\n            this.root.animations['visited']['node']['delay'] = delay;\r\n        }\r\n        else {\r\n            //error..tree is empty\r\n        }\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                if (node.left) {\r\n                    queue.push(node.left);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.left.animations['visited']) {\r\n                        node.left.animations['visited'][element]['active'] = true;\r\n                        node.left.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n\r\n                if (node.right) {\r\n                    queue.push(node.right);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.right.animations['visited']) {\r\n                        node.right.animations['visited'][element]['active'] = true;\r\n                        node.right.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n                \r\n                delay += 1000;\r\n                for (let element in node.animations['success']) {\r\n                    node.animations['success'][element]['active'] = true;\r\n                    node.animations['success'][element]['delay'] = delay;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setSearchAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.target ) return;\r\n\r\n        if (node === null) {\r\n            if (node === this.root) {\r\n                //show error..empty tree\r\n            }\r\n        }\r\n        else {\r\n            if (this.target === node.value) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 1250;\r\n            }\r\n            else if (this.target < node.value)\r\n                this.setSearchAnimations(node.left, delay + 1000);\r\n            else\r\n                this.setSearchAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n        }\r\n    }\r\n\r\n    setInsertAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.target || ! node ) return;\r\n        else {\r\n            if (this.target === node.value)\r\n                return;\r\n            else if (this.target < node.value)\r\n                this.setInsertAnimations(node.left, delay + 1000);\r\n            else\r\n                this.setInsertAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n        }\r\n    }\r\n\r\n    setInsertionCompleteAnimations(node = this.root) {\r\n        if ( ! this.target || ! node ) return;\r\n        else {\r\n            if (this.target === node.value) {\r\n                node.animations['initial']['node']['active'] = true;\r\n                node.animations['initial']['node']['delay'] = 650;\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = 150;\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = 1250;\r\n            }\r\n            else if (this.target < node.value)\r\n                this.setInsertionCompleteAnimations(node.left);\r\n            else\r\n                this.setInsertionCompleteAnimations(node.right);\r\n        }\r\n    }\r\n\r\n    setRemoveAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.target ) return;\r\n\r\n        if (node === null) {\r\n            if (node === this.root) {\r\n                //show error..empty tree\r\n            }\r\n        }\r\n        else {    \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            if (this.target === node.value) {\r\n                if ( node.left === null && node.right === null ) {\r\n                    node.animations['removed']['line']['active'] = true;\r\n                    node.animations['removed']['line']['delay'] = delay + 1000;\r\n                }\r\n                node.animations['removed']['node']['active'] = true;\r\n                node.animations['removed']['node']['delay'] = delay + 1500;\r\n                node.animations['initial']['node']['active'] = false;\r\n                node.animations['initial']['node']['delay'] = delay + 1500;\r\n                node.animations['initial']['line']['active'] = false;\r\n                node.animations['initial']['line']['delay'] = delay + 1500;\r\n            }\r\n            else if (this.target < node.value)\r\n                this.setRemoveAnimations(node.left, delay + 1000);\r\n            else\r\n                this.setRemoveAnimations(node.right, delay + 1000);\r\n        }\r\n    }\r\n\r\n    setInOrderSuccessorAnimations(val, node = this.root, found = false) {\r\n        if ( ! found ) {\r\n            if (val === node.value) {\r\n                this.setInOrderSuccessorAnimations(val, node, true);\r\n            }\r\n            else if (val < node.value)\r\n                this.setInOrderSuccessorAnimations(val, node.left);\r\n            else\r\n                this.setInOrderSuccessorAnimations(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null && node.right === null ) {\r\n                node.animations['initial']['node']['active'] = false;\r\n                node.animations['initial']['node']['delay'] = 150;\r\n                node.animations['initial']['line']['active'] = false;\r\n                node.animations['initial']['line']['delay'] = 150;\r\n\r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = 150;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = 150;\r\n\r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = 150;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = 150;\r\n            }\r\n            else if ( node.left === null ) {\r\n                //return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                //return node.left;\r\n            }\r\n            else {\r\n                //node.value = this.inOrderSuccessor(node.right);\r\n                //node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*remove(val, node = this.root) {\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node === null ) {\r\n            return node;\r\n        }\r\n        else if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }*/\r\n\r\n    action1() {\r\n        this.reset();\r\n        this.insertNumElements(15);\r\n        this.setGenerationAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action2() {\r\n        this.target = null;\r\n        this.setHideAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action3() {\r\n        this.target = null;\r\n        this.setHideTraversalAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action4() {\r\n        //this.setDFSTraversalAnimations('In-order');\r\n        this.setBFSTraversalAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action5(val) {\r\n        this.target = val;\r\n        this.setSearchAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action6() {\r\n        //check if tree has element first..\r\n        this.target = parseInt( prompt() );\r\n        this.insert(this.target);\r\n        this.setInsertAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action7() {\r\n        this.setInsertionCompleteAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action8(val) {\r\n        //check if tree has element first..\r\n        this.target = val;\r\n        this.setRemoveAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action9() {\r\n        this.setInOrderSuccessorAnimations(this.target);\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action10() {\r\n    }\r\n\r\n    action11() {\r\n    }\r\n\r\n    action12() {\r\n    }\r\n\r\n    action13() {\r\n        this.remove(this.target);\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action14() {\r\n        this.reset();\r\n    }\r\n\r\n    render() {\r\n        console.log(\"BST::render: \");\r\n        console.log(this.state);\r\n        return (\r\n            <>\r\n                <button onClick = {this.action1}>Generate new tree</button>\r\n                <button onClick = {this.action2}>Hide Tree</button>\r\n                <button onClick = {this.action3}>Hide traversals</button>\r\n                <button onClick = {this.action4}>Traversals</button>\r\n                <button onClick = {this.action5}>Search</button>\r\n                <button onClick = {this.action6}>Insert</button>\r\n                <button onClick = {this.action7}>Insert complete</button>\r\n                <button onClick = {this.action8}>Remove</button>\r\n                <button onClick = {this.action9}>Remove step 2 (in order successor)</button>\r\n                <button onClick = {this.action10}>n/a</button>\r\n                <button onClick = {this.action11}>n/a</button>\r\n                <button onClick = {this.action12}>n/a</button>\r\n                <button onClick = {this.action13}>Remove final</button>\r\n                <button onClick = {this.action14}>Reset</button>\r\n\r\n                { false ? <InputModal operation = {this.state.operation} callback = {this.receiveInput} /> : null }\r\n                { false ? <ErrorMessage message = {\"Error: Tree is empty\"} /> : null }\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n        if ( nextState.operation === this.initialStateOperation ) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }*/\r\n\r\n    /*componentDidUpdate() {\r\n        console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            this.setState({ operation: this.initialStateOperation });\r\n        }\r\n    }*/\r\n}"]},"metadata":{},"sourceType":"module"}