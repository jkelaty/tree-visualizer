{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport NavigationBar from './NavigationBar/NavigationBar.jsx';\nimport NULLTree from './Trees/NULLTree/NULLTree.jsx';\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx';\nimport './TreeVisualizer.css';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tree: new BinarySearchTree(),\n      operation: \"initial\"\n    };\n    this.generateTree = this.generateTree.bind(this);\n    this.resetTree = this.resetTree.bind(this);\n    this.insert = this.insert.bind(this);\n    this.remove = this.remove.bind(this);\n    this.search = this.search.bind(this);\n    this.top = this.top.bind(this);\n    this.traversal = this.traversal.bind(this);\n  }\n\n  changeTree(tree_key) {\n    switch (tree_key) {\n      case \"BST\":\n        this.setState({\n          tree: new BinarySearchTree()\n        });\n        break;\n\n      case \"AVL\":\n        break;\n\n      case \"RBT\":\n        break;\n\n      case \"BHP\":\n        break;\n\n      default:\n        this.setState({\n          tree: new NULLTree()\n        }); //show error, invalid tree\n\n        break;\n    }\n  }\n\n  generateTree() {\n    this.state.tree.generateTree();\n    this.setState({\n      operation: \"generate\"\n    });\n  }\n\n  resetTree() {\n    this.state.tree.reset();\n    this.setState({\n      operation: \"reset\"\n    });\n  }\n\n  insert() {\n    this.state.tree.insert(4);\n    this.setState({\n      operation: \"insert\"\n    });\n  }\n\n  remove() {\n    this.setState({\n      operation: \"remove\"\n    });\n  }\n\n  search() {\n    this.setState({\n      operation: \"search\"\n    });\n  }\n\n  top() {\n    this.setState({\n      operation: \"top\"\n    });\n  }\n\n  preOrder() {}\n\n  inOrder() {}\n\n  postOrder() {}\n\n  levelOrder() {}\n\n  Tree() {\n    return this.state.tree.Tree();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(NavigationBar, {\n      visualizer: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: this.state.tree.name,\n      style: {\n        transform: \"scale(\" + this.state.tree.getScaleFactor() + \")\"\n      },\n      className: \"tree\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.Tree()));\n  }\n\n  componentDidUpdate() {\n    this.state.tree.animateNodes();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","NavigationBar","NULLTree","BinarySearchTree","TreeVisualizer","Component","constructor","props","state","tree","operation","generateTree","bind","resetTree","insert","remove","search","top","traversal","changeTree","tree_key","setState","reset","preOrder","inOrder","postOrder","levelOrder","Tree","render","name","transform","getScaleFactor","componentDidUpdate","animateNodes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\nimport NULLTree from './Trees/NULLTree/NULLTree.jsx'\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\nimport './TreeVisualizer.css';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            tree: new BinarySearchTree(),\r\n            operation: \"initial\"\r\n        };\r\n\r\n        this.generateTree = this.generateTree.bind(this);\r\n        this.resetTree    = this.resetTree.bind(this);\r\n        this.insert       = this.insert.bind(this);\r\n        this.remove       = this.remove.bind(this);\r\n        this.search       = this.search.bind(this);\r\n        this.top          = this.top.bind(this);\r\n        this.traversal    = this.traversal.bind(this);\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        switch(tree_key) {\r\n            case \"BST\": this.setState( { tree: new BinarySearchTree() } );\r\n                break;\r\n            case \"AVL\":\r\n                break;\r\n            case \"RBT\":\r\n                break;\r\n            case \"BHP\":\r\n                break;\r\n            default: this.setState( { tree: new NULLTree() } );  //show error, invalid tree\r\n                break;\r\n        }\r\n    }\r\n\r\n    generateTree() {\r\n        this.state.tree.generateTree();\r\n        this.setState( { operation: \"generate\" } );\r\n    }\r\n\r\n    resetTree() {\r\n        this.state.tree.reset();\r\n        this.setState( { operation: \"reset\" } );\r\n    }\r\n\r\n    insert() {\r\n        this.state.tree.insert(4)\r\n        this.setState( { operation: \"insert\" } );\r\n    }\r\n\r\n    remove() {\r\n        this.setState( { operation: \"remove\" } );\r\n    }\r\n\r\n    search() {\r\n        this.setState( { operation: \"search\" } );\r\n    }\r\n\r\n    top() {\r\n        this.setState( { operation: \"top\" } );\r\n    }\r\n\r\n    preOrder() {\r\n\r\n    }\r\n\r\n    inOrder() {\r\n        \r\n    }\r\n\r\n    postOrder() {\r\n        \r\n    }\r\n\r\n    levelOrder() {\r\n        \r\n    }\r\n\r\n    Tree() {\r\n        return this.state.tree.Tree();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} />\r\n                \r\n                <div\r\n                    id={ this.state.tree.name }\r\n                    style={ {transform: \"scale(\" + this.state.tree.getScaleFactor() + \")\"} }\r\n                    className=\"tree\">\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.state.tree.animateNodes();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}