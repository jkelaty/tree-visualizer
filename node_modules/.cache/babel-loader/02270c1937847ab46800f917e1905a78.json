{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport anime from 'animejs';\nimport { CSSTransition } from 'react-transition-group';\nimport InputModal from '../../Additional/InputModal/InputModal.jsx';\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx';\nimport Queue from '../../Additional/Queue.js';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n    this.animations = {\n      initial: {\n        active: false,\n        delay: 0\n      },\n      visited: {\n        active: false,\n        delay: 0\n      },\n      completed: {\n        active: false,\n        delay: 0\n      },\n      failed: {\n        active: false,\n        delay: 0\n      }\n    };\n  }\n\n}\n\nexport default class BinarySearchTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.state = {\n      initial: false,\n      visited: false,\n      completed: false,\n      animation4: false\n    };\n    this.receiveInput = this.receiveInput.bind(this);\n    this.action1 = this.action1.bind(this); // temporary\n\n    this.action2 = this.action2.bind(this); // temporary\n\n    this.action3 = this.action3.bind(this); // temporary\n\n    this.action4 = this.action4.bind(this); // temporary\n\n    this.action5 = this.action5.bind(this); // temporary\n\n    this.action6 = this.action6.bind(this); // temporary\n\n    this.action7 = this.action7.bind(this); // temporary\n\n    this.action8 = this.action8.bind(this); // temporary\n\n    this.action9 = this.action9.bind(this); // temporary\n  }\n\n  componentDidMount() {} // call generate function\n\n  /*static getDerivedStateFromProps(newProps, state) {\r\n      //To-do: async calls and tooltips\r\n      console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n        const initialStateOperation = 'Initial';\r\n        if ( state.animating ) {\r\n          if ( state.operation === initialStateOperation ) {\r\n              return { operation: state.operation, animating: false };\r\n          }\r\n          else {\r\n              return { operation: state.operation };\r\n          }\r\n      }\r\n      else if ( state.operation !== newProps.operation ) {\r\n          return { operation: newProps.operation, animating: true };\r\n      }\r\n      else {\r\n          return null;\r\n      }\r\n  }*/\n\n\n  insertNumElements(elements) {\n    for (let i = 0; i < elements; ++i) {\n      let val = randomIntFromInverval(1, 150);\n\n      if (this.insert(val)) {\n        if (this.height() > 5) {\n          this.root = this.remove(val);\n          --i;\n        }\n      } else {\n        --i;\n      }\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value === val) {\n        //tree contains key already\n        return false;\n      } else if (curr.value < val) {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  remove(val, node = this.root) {\n    if (node === null) return node;\n\n    if (val < node.value) {\n      node.left = this.remove(val, node.left);\n    } else if (val > node.value) {\n      node.right = this.remove(val, node.right);\n    } else {\n      if (node.left === null) {\n        return node.right;\n      } else if (node.right === null) {\n        return node.left;\n      } else {\n        node.value = this.inOrderSuccessor(node.right);\n        node.right = this.remove(node.value, node.right);\n      }\n    }\n\n    return node;\n  }\n\n  inOrderSuccessor(node) {\n    if (node === null) {\n      return node;\n    } else if (node.left !== null) {\n      return this.inOrderSuccessor(node.left);\n    } else {\n      return node.value;\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n\n  receiveInput(val) {\n    alert(val);\n  }\n\n  searchForNode(val) {\n    this.action5(val);\n  }\n\n  trashNode(val) {\n    alert(val);\n  }\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left');\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n    const classes = ['node-wrapper', pos].join(' ');\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), leftChild, rightChild));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.initial,\n        timeout: node.animations['initial']['delay'],\n        appear: true,\n        classNames: {\n          appearDone: 'visible',\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: node === this.root ? {\n          width: Math.pow(2, tree_height - 1) * 70 + 'px'\n        } : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, this.getNodeHover(node.value), this.getCricle(node)), leftChild, rightChild, this.getConnectingLine(node, pos))));\n    }\n  }\n\n  getCricle(node) {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"circle node-value-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle initial\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }), node.animations['visited']['active'] && React.createElement(CSSTransition, {\n      in: this.state.visited,\n      timeout: node.animations['visited']['delay'] + 500,\n      appear: true,\n      classNames: {\n        appearDone: 'visible',\n        enterDone: 'visible',\n        exit: 'visible'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle visited\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    })), node.animations['completed']['active'] && React.createElement(CSSTransition, {\n      in: this.state.completed,\n      timeout: node.animations['completed']['delay'],\n      appear: true,\n      classNames: {\n        appearDone: 'visible',\n        enterDone: 'visible',\n        exit: 'visible'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle completed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })), node.animations['failed']['active'] && React.createElement(CSSTransition, {\n      in: this.state.failed,\n      timeout: node.animations['failed']['delay'],\n      appear: true,\n      classNames: {\n        appearDone: 'visible',\n        enterDone: 'visible',\n        exit: 'visible'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle failed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    })), React.createElement(\"text\", {\n      className: \"text node-value-text\",\n      x: \"50%\",\n      y: \"50%\",\n      fill: \"black\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, node.value)));\n  }\n\n  getNodeHover(val) {\n    return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: \"node-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      onClick: () => this.searchForNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-hover-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }))), React.createElement(\"i\", {\n      className: \"fas fa-trash\",\n      onClick: () => this.trashNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"trash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-hover-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    })))));\n  }\n\n  getConnectingLine(node, pos) {\n    if (pos === 'left' || pos === 'right') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.initial,\n        timeout: node.animations['initial']['delay'],\n        appear: true,\n        classNames: {\n          appearDone: 'visible',\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, this.getLine(pos, 'initial'), node.animations['visited']['active'] && React.createElement(CSSTransition, {\n        in: this.state.visited,\n        timeout: node.animations['visited']['delay'],\n        appear: true,\n        classNames: {\n          appearDone: 'visible',\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, this.getLine(pos, 'visited')), node.animations['completed']['active'] && React.createElement(CSSTransition, {\n        in: this.state.completed,\n        timeout: node.animations['completed']['delay'],\n        appear: true,\n        classNames: {\n          appearDone: 'visible',\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, this.getLine(pos, 'completed')), node.animations['failed']['active'] && React.createElement(CSSTransition, {\n        in: this.state.failed,\n        timeout: node.animations['failed']['delay'],\n        appear: true,\n        classNames: {\n          appearDone: 'visible',\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, this.getLine(pos, 'failed')))));\n    } else {\n      return null;\n    }\n  }\n\n  getLine(pos, addClass) {\n    const classes = ['line', addClass].join(' ');\n    if (pos === 'left') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"50\",\n      x2: \"100%\",\n      y2: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    });else if (pos === 'right') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"100%\",\n      y2: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    });else return null;\n  }\n\n  resetNodeAnimations(node) {\n    for (let key in node.animations) {\n      node.animations[key]['active'] = false;\n      node.animations[key]['delay'] = 0;\n    }\n  }\n\n  setInitialAnimation(node = this.root) {\n    if (node == null) return;\n    this.resetNodeAnimations(node);\n    this.setInitialAnimation(node.left);\n    this.setInitialAnimation(node.right);\n  }\n\n  setGenerationAnimation() {\n    let queue = new Queue();\n    queue.push(this.root);\n    let delay = 300;\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        queue.push(node.left);\n        queue.push(node.right);\n        node.animations['initial']['active'] = true;\n        node.animations['initial']['delay'] = delay;\n        delay += 200;\n      }\n    }\n  }\n\n  setResetAnimation(node = this.root) {\n    if (node == null) return;\n    node.animations['initial']['active'] = true;\n    node.animations['initial']['delay'] = 100;\n    this.setResetAnimation(node.left);\n    this.setResetAnimation(node.right);\n  }\n\n  setSearchAnimation(val, delay = 150, node = this.root) {\n    let found = false;\n    if (node === null) found = false;else {\n      node.animations['visited']['active'] = true;\n      node.animations['visited']['delay'] = delay;\n      if (val === node.value) found = true;else if (val < node.value) found = this.setSearchAnimation(val, delay + 1000, node.left);else found = this.setSearchAnimation(val, delay + 1000, node.right);\n      if (found) node.animations['completed']['active'] = true;else node.animations['failed']['active'] = true;\n    }\n    return found;\n  }\n\n  setInsertAnimation(val, delay = 150, node = this.root) {\n    if (val === node.value) {\n      node.animations['initial']['active'] = false;\n      node.animations['initial']['delay'] = delay + 300;\n    } else {\n      node.animations['visited']['active'] = true;\n      node.animations['visited']['delay'] = delay;\n      if (val < node.value) this.setInsertAnimation(val, delay + 1000, node.left);else this.setInsertAnimation(val, delay + 1000, node.right);\n    }\n\n    node.animations['completed']['active'] = true;\n  }\n\n  setDFSTraversalAnimation(order, node = this.root, delay = 0) {\n    if (node == null) return delay;\n\n    let _delay = node === this.root ? 300 : delay + 1000;\n\n    node.animations['visited']['active'] = true;\n    node.animations['visited']['delay'] = _delay;\n\n    if (order === 'Pre-order') {\n      _delay += 1000;\n      node.animations['completed']['active'] = true;\n      node.animations['completed']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimation(order, node.left, _delay);\n\n    if (order === 'In-order') {\n      _delay += 1000;\n      node.animations['completed']['active'] = true;\n      node.animations['completed']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimation(order, node.right, _delay);\n\n    if (order === 'Post-order') {\n      _delay += 1000;\n      node.animations['completed']['active'] = true;\n      node.animations['completed']['delay'] = _delay;\n    }\n\n    return _delay;\n  }\n\n  setBFSTraversalAnimation() {\n    let queue = new Queue();\n    queue.push(this.root);\n    let delay = 300;\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        if (node.left) {\n          queue.push(node.left);\n          node.left.animations['initial']['active'] = true;\n          node.left.animations['initial']['delay'] = delay;\n        }\n\n        node.animations['completed']['active'] = true;\n        node.animations['completed']['delay'] = delay;\n        delay += 200;\n      }\n    }\n  }\n\n  action1() {\n    this.reset();\n    this.insertNumElements(15);\n    this.setGenerationAnimation();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action2() {\n    this.setInitialAnimation();\n    this.setResetAnimation();\n    this.setState({\n      initial: false,\n      visited: false,\n      completed: false,\n      failed: false\n    });\n  }\n\n  action3() {\n    this.setInitialAnimation();\n    this.reset();\n    this.setState({\n      initial: false,\n      visited: false,\n      completed: false,\n      failed: false\n    });\n  }\n\n  action4() {\n    this.setInitialAnimation();\n    this.setState({\n      initial: true,\n      visited: false,\n      completed: false,\n      failed: false\n    });\n  }\n\n  action5(val = null) {\n    this.setInitialAnimation();\n    this.setSearchAnimation(val);\n    this.setState({\n      visited: true\n    });\n  }\n\n  action6() {\n    this.setState({\n      completed: true,\n      failed: true\n    });\n  }\n\n  action7() {\n    this.setInitialAnimation();\n    const val = parseInt(prompt());\n    this.insert(val);\n    this.setInsertAnimation(val);\n    this.setState({\n      visited: true\n    });\n  }\n\n  action8() {\n    this.setDFSTraversalAnimation('Post-order'); //this.setBFSTraversalAnimation();\n\n    this.setState({\n      visited: true,\n      completed: true\n    });\n  }\n\n  action9() {}\n\n  render() {\n    console.log(\"BST::render: \");\n    console.log(this.state);\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: this.action1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, \"Generate new tree\"), React.createElement(\"button\", {\n      onClick: this.action2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, \"Hide Tree\"), React.createElement(\"button\", {\n      onClick: this.action3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.action4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, \"Set default\"), React.createElement(\"button\", {\n      onClick: this.action5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, \"Search\"), React.createElement(\"button\", {\n      onClick: this.action6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \"After search/insert\"), React.createElement(\"button\", {\n      onClick: this.action7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }, \"Insert\"), React.createElement(\"button\", {\n      onClick: this.action8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, \"Traversals\"), React.createElement(\"button\", {\n      onClick: this.action9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, \"n/a\"), false ? React.createElement(InputModal, {\n      operation: this.state.operation,\n      callback: this.receiveInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653\n      },\n      __self: this\n    }) : null, false ? React.createElement(ErrorMessage, {\n      message: \"Error: Tree is empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, this.Tree()));\n  }\n  /*shouldComponentUpdate(nextProps, nextState) {\r\n      console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n      if ( nextState.operation === this.initialStateOperation ) {\r\n          return false;\r\n      }\r\n      else {\r\n          return true;\r\n      }\r\n  }*/\n\n  /*componentDidUpdate() {\r\n      console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n      if ( this.state.operation !== this.initialStateOperation ) {\r\n          this.setState({ operation: this.initialStateOperation });\r\n      }\r\n  }*/\n\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","anime","CSSTransition","InputModal","ErrorMessage","Queue","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","animations","initial","active","delay","visited","completed","failed","BinarySearchTree","Component","props","initialStateOperation","name","key","root","state","animation4","receiveInput","bind","action1","action2","action3","action4","action5","action6","action7","action8","action9","componentDidMount","insertNumElements","elements","i","insert","height","remove","reset","node","Math","max","curr","inOrderSuccessor","getScaleFactor","scale_factor","window","innerWidth","pow","alert","searchForNode","trashNode","Tree","tree_height","curr_height","pos","leftChild","rightChild","classes","join","appearDone","enterDone","exit","width","getNodeHover","getCricle","getConnectingLine","getLine","addClass","resetNodeAnimations","setInitialAnimation","setGenerationAnimation","queue","push","empty","front","setResetAnimation","setSearchAnimation","found","setInsertAnimation","setDFSTraversalAnimation","order","_delay","setBFSTraversalAnimation","setState","parseInt","prompt","render","console","log","operation","transform"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport anime from 'animejs'\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n\r\n        this.animations = {\r\n            initial: {\r\n                active: false,\r\n                delay: 0\r\n            },\r\n            visited: {\r\n                active: false,\r\n                delay: 0\r\n            },\r\n            completed: {\r\n                active: false,\r\n                delay: 0\r\n            },\r\n            failed: {\r\n                active: false,\r\n                delay: 0\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.state = {\r\n            initial: false,\r\n            visited: false,\r\n            completed: false,\r\n            animation4: false,\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n\r\n        this.action1 = this.action1.bind(this); // temporary\r\n        this.action2 = this.action2.bind(this); // temporary\r\n        this.action3 = this.action3.bind(this); // temporary\r\n        this.action4 = this.action4.bind(this); // temporary\r\n        this.action5 = this.action5.bind(this); // temporary\r\n        this.action6 = this.action6.bind(this); // temporary\r\n        this.action7 = this.action7.bind(this); // temporary\r\n        this.action8 = this.action8.bind(this); // temporary\r\n        this.action9 = this.action9.bind(this); // temporary\r\n    }\r\n\r\n    componentDidMount() {\r\n        // call generate function\r\n    }\r\n\r\n    /*static getDerivedStateFromProps(newProps, state) {\r\n        //To-do: async calls and tooltips\r\n        console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n\r\n        const initialStateOperation = 'Initial';\r\n\r\n        if ( state.animating ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: state.operation, animating: false };\r\n            }\r\n            else {\r\n                return { operation: state.operation };\r\n            }\r\n        }\r\n        else if ( state.operation !== newProps.operation ) {\r\n            return { operation: newProps.operation, animating: true };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }*/\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node === null ) {\r\n            return node;\r\n        }\r\n        else if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    receiveInput(val) {\r\n        alert(val);\r\n    }\r\n\r\n    searchForNode(val) {\r\n        this.action5(val);\r\n    }\r\n\r\n    trashNode(val) {\r\n        alert(val);\r\n    }\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className='node-value' />\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.initial}\r\n                        timeout={node.animations['initial']['delay']}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible',\r\n                            enterDone: 'visible',\r\n                            exit: 'visible'\r\n                        }}>\r\n                        \r\n                        <div\r\n                            className={classes}\r\n                            node-value={node.value}\r\n                            node-layer={tree_height - curr_height}\r\n                            style={ ( node === this.root ) ? {width: Math.pow(2, tree_height - 1) * 70 + 'px'} : null }>\r\n\r\n                            <div className='node-value'>\r\n                                {this.getNodeHover(node.value)}\r\n                                {this.getCricle(node)}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n\r\n                            {this.getConnectingLine(node, pos)}\r\n\r\n                        </div>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(node) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                    <circle className='circle node-circle initial' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                    {node.animations['visited']['active'] && (\r\n                        <CSSTransition\r\n                            in={this.state.visited}\r\n                            timeout={node.animations['visited']['delay'] + 500}\r\n                            appear={true}\r\n                            classNames={{\r\n                                appearDone: 'visible',\r\n                                enterDone: 'visible',\r\n                                exit: 'visible'\r\n                            }}>\r\n\r\n                            <circle className='circle node-circle visited' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                        </CSSTransition>\r\n                    )}\r\n\r\n                    {node.animations['completed']['active'] && (\r\n                        <CSSTransition\r\n                            in={this.state.completed}\r\n                            timeout={node.animations['completed']['delay']}\r\n                            appear={true}\r\n                            classNames={{\r\n                                appearDone: 'visible',\r\n                                enterDone: 'visible',\r\n                                exit: 'visible'\r\n                            }}>\r\n\r\n                            <circle className='circle node-circle completed' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                        </CSSTransition>\r\n                    )}\r\n\r\n                    {node.animations['failed']['active'] && (\r\n                        <CSSTransition\r\n                            in={this.state.failed}\r\n                            timeout={node.animations['failed']['delay']}\r\n                            appear={true}\r\n                            classNames={{\r\n                                appearDone: 'visible',\r\n                                enterDone: 'visible',\r\n                                exit: 'visible'\r\n                            }}>\r\n\r\n                            <circle className='circle node-circle failed' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                        </CSSTransition>\r\n                    )}\r\n                    \r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {node.value}\r\n                    </text>\r\n\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <span className='node-hover'>\r\n                    <i className=\"fas fa-search\" onClick={() => this.searchForNode(val)} />\r\n                    <span className='search'>\r\n                        <svg className='circle node-hover-circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n\r\n                    <i className=\"fas fa-trash\" onClick={() => this.trashNode(val)} />\r\n                    <span className='trash'>\r\n                        <svg className='circle node-hover-circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(node, pos) {\r\n        if (pos === 'left' || pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.initial}\r\n                        timeout={node.animations['initial']['delay']}\r\n                        appear={true}\r\n                        classNames={{\r\n                            appearDone: 'visible',\r\n                            enterDone: 'visible',\r\n                            exit: 'visible'\r\n                        }}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                            {this.getLine(pos, 'initial')}\r\n\r\n                            {node.animations['visited']['active'] && (\r\n                                <CSSTransition\r\n                                    in={this.state.visited}\r\n                                    timeout={node.animations['visited']['delay']}\r\n                                    appear={true}\r\n                                    classNames={{\r\n                                        appearDone: 'visible',\r\n                                        enterDone: 'visible',\r\n                                        exit: 'visible'\r\n                                    }}>\r\n\r\n                                    {this.getLine(pos, 'visited')}\r\n\r\n                                </CSSTransition>\r\n                            )}\r\n\r\n                            {node.animations['completed']['active'] && (\r\n                                <CSSTransition\r\n                                    in={this.state.completed}\r\n                                    timeout={node.animations['completed']['delay']}\r\n                                    appear={true}\r\n                                    classNames={{\r\n                                        appearDone: 'visible',\r\n                                        enterDone: 'visible',\r\n                                        exit: 'visible'\r\n                                    }}>\r\n\r\n                                    {this.getLine(pos, 'completed')}\r\n\r\n                                </CSSTransition>\r\n                            )}\r\n\r\n                            {node.animations['failed']['active'] && (\r\n                                <CSSTransition\r\n                                    in={this.state.failed}\r\n                                    timeout={node.animations['failed']['delay']}\r\n                                    appear={true}\r\n                                    classNames={{\r\n                                        appearDone: 'visible',\r\n                                        enterDone: 'visible',\r\n                                        exit: 'visible'\r\n                                    }}>\r\n\r\n                                    {this.getLine(pos, 'failed')}\r\n\r\n                                </CSSTransition>\r\n                            )}\r\n\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getLine(pos, addClass) {\r\n        const classes = ['line', addClass].join(' ');\r\n\r\n        if (pos === 'left')\r\n            return ( <line className={classes} x1='0' y1='50' x2='100%' y2='0' /> );\r\n        else if (pos === 'right')\r\n            return ( <line className={classes} x1='0' y1='0' x2='100%' y2='50' /> );\r\n        else\r\n            return null;\r\n    }\r\n\r\n    resetNodeAnimations(node) {\r\n        for (let key in node.animations) {\r\n            node.animations[key]['active'] = false;\r\n            node.animations[key]['delay'] = 0;\r\n        }\r\n    }\r\n\r\n    setInitialAnimation(node = this.root) {\r\n        if (node == null) return;\r\n        this.resetNodeAnimations(node);\r\n\r\n        this.setInitialAnimation(node.left);\r\n        this.setInitialAnimation(node.right);\r\n    }\r\n\r\n    setGenerationAnimation() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let delay = 300;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                node.animations['initial']['active'] = true;\r\n                node.animations['initial']['delay'] = delay;\r\n                \r\n                delay += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    setResetAnimation(node = this.root) {\r\n        if (node == null) return;\r\n        node.animations['initial']['active'] = true;\r\n        node.animations['initial']['delay'] = 100;\r\n\r\n        this.setResetAnimation(node.left);\r\n        this.setResetAnimation(node.right);\r\n    }\r\n\r\n    setSearchAnimation(val, delay = 150, node = this.root) {\r\n        let found = false;\r\n\r\n        if (node === null)\r\n            found = false;\r\n        else {\r\n            node.animations['visited']['active'] = true;\r\n            node.animations['visited']['delay'] = delay;\r\n\r\n            if (val === node.value)\r\n                found = true;\r\n            else if (val < node.value)\r\n                found = this.setSearchAnimation(val, delay + 1000, node.left);\r\n            else\r\n                found = this.setSearchAnimation(val, delay + 1000, node.right);\r\n\r\n            if (found)\r\n                node.animations['completed']['active'] = true;\r\n            else\r\n                node.animations['failed']['active'] = true;\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    setInsertAnimation(val, delay = 150, node = this.root) {\r\n        if (val === node.value) {\r\n            node.animations['initial']['active'] = false;\r\n            node.animations['initial']['delay'] = delay + 300;\r\n        }\r\n        else {\r\n            node.animations['visited']['active'] = true;\r\n            node.animations['visited']['delay'] = delay;\r\n\r\n            if (val < node.value)\r\n                this.setInsertAnimation(val, delay + 1000, node.left);\r\n            else\r\n                this.setInsertAnimation(val, delay + 1000, node.right);\r\n        }\r\n\r\n        node.animations['completed']['active'] = true;\r\n    }\r\n\r\n    setDFSTraversalAnimation(order, node = this.root, delay = 0) {\r\n        if (node == null) return delay;\r\n\r\n        let _delay = node === this.root ? 300 : delay + 1000;\r\n\r\n        node.animations['visited']['active'] = true;\r\n        node.animations['visited']['delay'] = _delay;\r\n\r\n        if (order === 'Pre-order') {\r\n            _delay += 1000;\r\n            node.animations['completed']['active'] = true;\r\n            node.animations['completed']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimation(order, node.left, _delay);\r\n\r\n        if (order === 'In-order') {\r\n            _delay += 1000;\r\n            node.animations['completed']['active'] = true;\r\n            node.animations['completed']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimation(order, node.right, _delay);\r\n\r\n        if (order === 'Post-order') {\r\n            _delay += 1000;\r\n            node.animations['completed']['active'] = true;\r\n            node.animations['completed']['delay'] = _delay;\r\n        }\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setBFSTraversalAnimation() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let delay = 300;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                if (node.left) {\r\n                    queue.push(node.left);\r\n\r\n                    node.left.animations['initial']['active'] = true;\r\n                    node.left.animations['initial']['delay'] = delay;\r\n                }\r\n\r\n                node.animations['completed']['active'] = true;\r\n                node.animations['completed']['delay'] = delay;\r\n                \r\n                delay += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    action1() {\r\n        this.reset();\r\n        this.insertNumElements(15);\r\n        this.setGenerationAnimation();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action2() {\r\n        this.setInitialAnimation();\r\n        this.setResetAnimation();\r\n        this.setState({initial: false, visited: false, completed: false, failed: false});\r\n    }\r\n\r\n    action3() {\r\n        this.setInitialAnimation();\r\n        this.reset();\r\n        this.setState({initial: false, visited: false, completed: false, failed: false});\r\n    }\r\n\r\n    action4() {\r\n        this.setInitialAnimation();\r\n        this.setState({initial: true, visited: false, completed: false, failed: false});\r\n    }\r\n\r\n    action5(val = null) {\r\n        this.setInitialAnimation();\r\n        this.setSearchAnimation(val);\r\n        this.setState({visited: true});\r\n    }\r\n\r\n    action6() {\r\n        this.setState({completed: true, failed: true});\r\n    }\r\n\r\n    action7() {\r\n        this.setInitialAnimation();\r\n        const val = parseInt( prompt() );\r\n        this.insert(val);\r\n        this.setInsertAnimation(val);\r\n        this.setState({visited: true});\r\n    }\r\n\r\n    action8() {\r\n        this.setDFSTraversalAnimation('Post-order');\r\n        //this.setBFSTraversalAnimation();\r\n        this.setState({visited: true, completed: true});\r\n    }\r\n\r\n    action9() {\r\n    }\r\n\r\n    render() {\r\n        console.log(\"BST::render: \");\r\n        console.log(this.state);\r\n        return (\r\n            <>\r\n                <button onClick = {this.action1}>Generate new tree</button>\r\n                <button onClick = {this.action2}>Hide Tree</button>\r\n                <button onClick = {this.action3}>Reset</button>\r\n                <button onClick = {this.action4}>Set default</button>\r\n                <button onClick = {this.action5}>Search</button>\r\n                <button onClick = {this.action6}>After search/insert</button>\r\n                <button onClick = {this.action7}>Insert</button>\r\n                <button onClick = {this.action8}>Traversals</button>\r\n                <button onClick = {this.action9}>n/a</button>\r\n\r\n                { false ? <InputModal operation = {this.state.operation} callback = {this.receiveInput} /> : null }\r\n                { false ? <ErrorMessage message = {\"Error: Tree is empty\"} /> : null }\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n        if ( nextState.operation === this.initialStateOperation ) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }*/\r\n\r\n    /*componentDidUpdate() {\r\n        console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            this.setState({ operation: this.initialStateOperation });\r\n        }\r\n    }*/\r\n}"]},"metadata":{},"sourceType":"module"}