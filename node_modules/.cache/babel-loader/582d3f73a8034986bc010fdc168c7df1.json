{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport InputModal from '../../Additional/InputModal/InputModal.jsx';\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx';\nimport Queue from '../../Additional/Queue.js';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n    this.timeout = 0;\n  }\n\n}\n\nexport default class BinarySearchTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.state = {\n      animation1: false,\n      animation2: false,\n      animation3: false,\n      animation4: false\n    };\n    this.receiveInput = this.receiveInput.bind(this);\n    this.animation1 = this.animation1.bind(this); // temporary\n\n    this.animation2 = this.animation2.bind(this); // temporary\n\n    this.animation3 = this.animation3.bind(this); // temporary\n\n    this.animation4 = this.animation4.bind(this); // temporary\n  }\n\n  componentDidMount() {} // call generate function\n\n  /*static getDerivedStateFromProps(newProps, state) {\r\n      //To-do: async calls and tooltips\r\n      console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n        const initialStateOperation = 'Initial';\r\n        if ( state.animating ) {\r\n          if ( state.operation === initialStateOperation ) {\r\n              return { operation: state.operation, animating: false };\r\n          }\r\n          else {\r\n              return { operation: state.operation };\r\n          }\r\n      }\r\n      else if ( state.operation !== newProps.operation ) {\r\n          return { operation: newProps.operation, animating: true };\r\n      }\r\n      else {\r\n          return null;\r\n      }\r\n  }*/\n\n\n  insertNumElements(elements) {\n    for (let i = 0; i < elements; ++i) {\n      let val = randomIntFromInverval(1, 150);\n\n      if (this.insert(val)) {\n        if (this.height() > 5) {\n          this.root = this.remove(val);\n          --i;\n        }\n      } else {\n        --i;\n      }\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node == null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value === val) {\n        //tree contains key already\n        return false;\n      } else if (curr.value < val) {\n        if (curr.right == null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left == null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  remove(val, node = this.root) {\n    if (node === null) return node;\n\n    if (val < node.value) {\n      node.left = this.remove(val, node.left);\n    } else if (val > node.value) {\n      node.right = this.remove(val, node.right);\n    } else {\n      if (node.left === null) {\n        return node.right;\n      } else if (node.right === null) {\n        return node.left;\n      } else {\n        node.value = this.inOrderSuccessor(node.right);\n        node.right = this.remove(node.value, node.right);\n      }\n    }\n\n    return node;\n  }\n\n  inOrderSuccessor(node) {\n    if (node === null) {\n      return node;\n    } else if (node.left !== null) {\n      return this.inOrderSuccessor(node.left);\n    } else {\n      return node.value;\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n\n  receiveInput(val) {\n    alert(val);\n  }\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left');\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n    const classes = ['node-wrapper', pos].join(' ');\n\n    if (node == null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, this.getCricle('null')), leftChild, rightChild));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.animation1,\n        timeout: node.timeout,\n        classNames: {\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: node === this.root ? {\n          width: Math.pow(2, tree_height - 1) * 70 + 'px'\n        } : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, this.getNodeHover(node.value), this.getCricle(node.value)), leftChild, rightChild, this.getConnectingLine(pos, node.timeout))));\n    }\n  }\n\n  getCricle(val) {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"circle node-value-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      className: \"text node-value-text\",\n      x: \"50%\",\n      y: \"50%\",\n      fill: \"black\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, val), React.createElement(\"circle\", {\n      className: \"circle node-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      stroke: \"black\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    })));\n  }\n\n  getNodeHover(val) {\n    return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: \"node-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"search\",\n      onClick: () => this.searchForNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"trash\",\n      onClick: () => this.trashNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-trash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }))));\n  }\n\n  getConnectingLine(pos, time) {\n    if (pos === 'left') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.animation1,\n        timeout: time,\n        classNames: {\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(\"line\", {\n        className: \"line\",\n        x1: \"0\",\n        y1: \"50\",\n        x2: \"100%\",\n        y2: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }))));\n    } else if (pos === 'right') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: this.state.animation1,\n        timeout: time,\n        classNames: {\n          enterDone: 'visible',\n          exit: 'visible'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, React.createElement(\"line\", {\n        className: \"line\",\n        x1: \"0\",\n        y1: \"0\",\n        x2: \"100%\",\n        y2: \"50\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }))));\n    } else {\n      return null;\n    }\n  }\n\n  setDefaultAnimation(node = this.root) {\n    if (node == null) return;\n    node.timeout = 0;\n    this.setDefaultAnimations(node.left);\n    this.setDefaultAnimations(node.right);\n  }\n\n  setGenerationAnimation() {\n    let queue = new Queue();\n    queue.push(this.root);\n    let timeout = 200;\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        queue.push(node.left);\n        queue.push(node.right);\n        node.timeout = timeout;\n        timeout += 200;\n      }\n    }\n  }\n\n  setResetAnimation() {}\n\n  setInsertionAnimation(val, node = this.root) {\n    if (node === null) {\n      if (node === this.root) {\n        return; // set show error flag?\n      }\n\n      return;\n    }\n\n    if (node.value < val) {}\n  }\n\n  animation1() {\n    this.reset();\n    this.insertNumElements(15);\n    this.setGenerationAnimation();\n    this.setState({\n      animation1: false\n    });\n    this.setState({\n      animation1: !this.state.animation1\n    }); //this.setState({ operation: 'Generate' });\n  }\n\n  animation2() {//this.setResetAnimation();\n    //this.setState({animation2: ! this.state.animation2});\n  }\n\n  animation3() {\n    //this.setInsertionAnimation();\n    this.setState({\n      animation3: !this.state.animation3\n    });\n  }\n\n  animation4() {\n    this.setState({\n      animation4: !this.state.animation4\n    });\n  }\n\n  render() {\n    console.log(\"BST::render: \");\n    console.log(this.state);\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: this.animation1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"animation1\"), React.createElement(\"button\", {\n      onClick: this.animation2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"animation2\"), React.createElement(\"button\", {\n      onClick: this.animation3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"animation3\"), React.createElement(\"button\", {\n      onClick: this.animation4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"animation4\"), false ? React.createElement(InputModal, {\n      operation: this.state.operation,\n      callback: this.receiveInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }) : null, false ? React.createElement(ErrorMessage, {\n      message: \"Error: Tree is empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, this.Tree()));\n  }\n  /*shouldComponentUpdate(nextProps, nextState) {\r\n      console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n      if ( nextState.operation === this.initialStateOperation ) {\r\n          return false;\r\n      }\r\n      else {\r\n          return true;\r\n      }\r\n  }*/\n\n  /*componentDidUpdate() {\r\n      console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n      if ( this.state.operation !== this.initialStateOperation ) {\r\n          this.setState({ operation: this.initialStateOperation });\r\n      }\r\n  }*/\n\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","CSSTransition","InputModal","ErrorMessage","Queue","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","timeout","BinarySearchTree","Component","props","initialStateOperation","name","key","root","state","animation1","animation2","animation3","animation4","receiveInput","bind","componentDidMount","insertNumElements","elements","i","insert","height","remove","reset","node","Math","max","curr","inOrderSuccessor","getScaleFactor","scale_factor","window","innerWidth","pow","alert","Tree","tree_height","curr_height","pos","leftChild","rightChild","classes","join","getCricle","enterDone","exit","width","getNodeHover","getConnectingLine","searchForNode","trashNode","time","setDefaultAnimation","setDefaultAnimations","setGenerationAnimation","queue","push","empty","front","setResetAnimation","setInsertionAnimation","setState","render","console","log","operation","transform"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,OAAOC,UAAP,MAAuB,4CAAvB;AACA,OAAOC,YAAP,MAAyB,gDAAzB;AAEA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,SAASC,qBAAT,QAAsC,6BAAtC;AAEA,OAAO,yBAAP;;AAEA,MAAMC,oBAAN,CAA2B;AACvBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKC,KAAL,GAAaD,GAAb;AACA,SAAKE,IAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,OAAL,GAAe,CAAf;AACH;;AANsB;;AAS3B,eAAe,MAAMC,gBAAN,SAA+Bb,KAAK,CAACc,SAArC,CAA+C;AAC1DP,EAAAA,WAAW,CAACQ,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,qBAAL,GAA6B,SAA7B;AAEA,SAAKC,IAAL,GAAY,kBAAZ;AACA,SAAKC,GAAL,GAAY,KAAZ;AACA,SAAKC,IAAL,GAAY,IAAZ;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,KADH;AAETC,MAAAA,UAAU,EAAE,KAFH;AAGTC,MAAAA,UAAU,EAAE,KAHH;AAITC,MAAAA,UAAU,EAAE;AAJH,KAAb;AAOA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AAEA,SAAKL,UAAL,GAAkB,KAAKA,UAAL,CAAgBK,IAAhB,CAAqB,IAArB,CAAlB,CAlBe,CAkB+B;;AAC9C,SAAKJ,UAAL,GAAkB,KAAKA,UAAL,CAAgBI,IAAhB,CAAqB,IAArB,CAAlB,CAnBe,CAmB+B;;AAC9C,SAAKH,UAAL,GAAkB,KAAKA,UAAL,CAAgBG,IAAhB,CAAqB,IAArB,CAAlB,CApBe,CAoB+B;;AAC9C,SAAKF,UAAL,GAAkB,KAAKA,UAAL,CAAgBE,IAAhB,CAAqB,IAArB,CAAlB,CArBe,CAqB+B;AACjD;;AAEDC,EAAAA,iBAAiB,GAAG,CAEnB,CAFgB,CACb;;AAGJ;;;;;;;;;;;;;;;;;;;;;;;AAwBAC,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AACxB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAApB,EAA8B,EAAEC,CAAhC,EAAmC;AAC/B,UAAItB,GAAG,GAAGH,qBAAqB,CAAC,CAAD,EAAI,GAAJ,CAA/B;;AACA,UAAK,KAAK0B,MAAL,CAAavB,GAAb,CAAL,EAA0B;AACtB,YAAK,KAAKwB,MAAL,KAAgB,CAArB,EAAyB;AACrB,eAAKb,IAAL,GAAY,KAAKc,MAAL,CAAazB,GAAb,CAAZ;AACA,YAAEsB,CAAF;AACH;AACJ,OALD,MAMK;AACD,UAAEA,CAAF;AACH;AACJ;AACJ;;AAEDI,EAAAA,KAAK,GAAG;AACJ,SAAKf,IAAL,GAAY,IAAZ;AACH;;AAEDa,EAAAA,MAAM,CAACG,IAAI,GAAG,KAAKhB,IAAb,EAAmB;AACrB,QAAIgB,IAAI,IAAI,IAAZ,EAAkB,OAAO,CAAP;AAClB,WAAOC,IAAI,CAACC,GAAL,CAAU,KAAKL,MAAL,CAAYG,IAAI,CAACzB,IAAjB,CAAV,EAAkC,KAAKsB,MAAL,CAAYG,IAAI,CAACxB,KAAjB,CAAlC,IAA8D,CAArE;AACH;;AAEDoB,EAAAA,MAAM,CAACvB,GAAD,EAAM;AACR,QAAI,KAAKW,IAAL,IAAa,IAAjB,EAAuB;AACnB,WAAKA,IAAL,GAAY,IAAIb,oBAAJ,CAAyBE,GAAzB,CAAZ;AACA,aAAO,IAAP;AACH;;AAED,QAAI8B,IAAI,GAAG,KAAKnB,IAAhB;;AAEA,WAAO,IAAP,EAAa;AACT,UAAImB,IAAI,CAAC7B,KAAL,KAAeD,GAAnB,EAAwB;AACpB;AACA,eAAO,KAAP;AACH,OAHD,MAIK,IAAI8B,IAAI,CAAC7B,KAAL,GAAaD,GAAjB,EAAsB;AACvB,YAAG8B,IAAI,CAAC3B,KAAL,IAAc,IAAjB,EAAuB;AACnB2B,UAAAA,IAAI,CAAC3B,KAAL,GAAa,IAAIL,oBAAJ,CAAyBE,GAAzB,CAAb;AACA,iBAAO,IAAP;AACH;;AACD8B,QAAAA,IAAI,GAAGA,IAAI,CAAC3B,KAAZ;AACH,OANI,MAOA;AACD,YAAG2B,IAAI,CAAC5B,IAAL,IAAa,IAAhB,EAAsB;AAClB4B,UAAAA,IAAI,CAAC5B,IAAL,GAAY,IAAIJ,oBAAJ,CAAyBE,GAAzB,CAAZ;AACA,iBAAO,IAAP;AACH;;AACD8B,QAAAA,IAAI,GAAGA,IAAI,CAAC5B,IAAZ;AACH;AACJ;AACJ;;AAEDuB,EAAAA,MAAM,CAACzB,GAAD,EAAM2B,IAAI,GAAG,KAAKhB,IAAlB,EAAwB;AAC1B,QAAKgB,IAAI,KAAK,IAAd,EAAqB,OAAOA,IAAP;;AAErB,QAAK3B,GAAG,GAAG2B,IAAI,CAAC1B,KAAhB,EAAwB;AACpB0B,MAAAA,IAAI,CAACzB,IAAL,GAAY,KAAKuB,MAAL,CAAYzB,GAAZ,EAAiB2B,IAAI,CAACzB,IAAtB,CAAZ;AACH,KAFD,MAGK,IAAKF,GAAG,GAAG2B,IAAI,CAAC1B,KAAhB,EAAwB;AACzB0B,MAAAA,IAAI,CAACxB,KAAL,GAAa,KAAKsB,MAAL,CAAYzB,GAAZ,EAAiB2B,IAAI,CAACxB,KAAtB,CAAb;AACH,KAFI,MAGA;AACD,UAAKwB,IAAI,CAACzB,IAAL,KAAc,IAAnB,EAA0B;AACtB,eAAOyB,IAAI,CAACxB,KAAZ;AACH,OAFD,MAGK,IAAKwB,IAAI,CAACxB,KAAL,KAAe,IAApB,EAA2B;AAC5B,eAAOwB,IAAI,CAACzB,IAAZ;AACH,OAFI,MAGA;AACDyB,QAAAA,IAAI,CAAC1B,KAAL,GAAa,KAAK8B,gBAAL,CAAsBJ,IAAI,CAACxB,KAA3B,CAAb;AACAwB,QAAAA,IAAI,CAACxB,KAAL,GAAa,KAAKsB,MAAL,CAAYE,IAAI,CAAC1B,KAAjB,EAAwB0B,IAAI,CAACxB,KAA7B,CAAb;AACH;AACJ;;AAED,WAAOwB,IAAP;AACH;;AAEDI,EAAAA,gBAAgB,CAACJ,IAAD,EAAO;AACnB,QAAKA,IAAI,KAAK,IAAd,EAAqB;AACjB,aAAOA,IAAP;AACH,KAFD,MAGK,IAAKA,IAAI,CAACzB,IAAL,KAAc,IAAnB,EAA0B;AAC3B,aAAO,KAAK6B,gBAAL,CAAsBJ,IAAI,CAACzB,IAA3B,CAAP;AACH,KAFI,MAGA;AACD,aAAOyB,IAAI,CAAC1B,KAAZ;AACH;AACJ;;AAED+B,EAAAA,cAAc,GAAG;AACb,QAAIC,YAAY,GAAG,CAACC,MAAM,CAACC,UAAP,GAAoB,EAArB,KAA6BP,IAAI,CAACQ,GAAL,CAAS,CAAT,EAAY,KAAKZ,MAAL,KAAgB,CAA5B,IAAiC,EAA9D,CAAnB;AACA,WAAO,YAAYS,YAAY,GAAG,CAAf,GAAmB,CAAnB,GAAuBA,YAAnC,IAAmD,GAA1D;AACH;;AAEDhB,EAAAA,YAAY,CAACjB,GAAD,EAAM;AACdqC,IAAAA,KAAK,CAACrC,GAAD,CAAL;AACH;;AAEDsC,EAAAA,IAAI,CAACX,IAAI,GAAG,KAAKhB,IAAb,EAAmB4B,WAAW,GAAG,KAAKf,MAAL,EAAjC,EAAgDgB,WAAW,GAAG,CAA9D,EAAiEC,GAAG,GAAG,MAAvE,EAA+E;AAC/E,QAAID,WAAW,KAAKD,WAApB,EAAiC,OAAO,IAAP;AAEjC,UAAMG,SAAS,GAAI,KAAKJ,IAAL,CAAUX,IAAI,GAAGA,IAAI,CAACzB,IAAR,GAAgB,IAA9B,EAAoCqC,WAApC,EAAiDC,WAAW,GAAG,CAA/D,EAAkE,MAAlE,CAAnB;AACA,UAAMG,UAAU,GAAG,KAAKL,IAAL,CAAUX,IAAI,GAAGA,IAAI,CAACxB,KAAR,GAAgB,IAA9B,EAAoCoC,WAApC,EAAiDC,WAAW,GAAG,CAA/D,EAAkE,OAAlE,CAAnB;AAEA,UAAMI,OAAO,GAAG,CAAC,cAAD,EAAiBH,GAAjB,EAAsBI,IAAtB,CAA2B,GAA3B,CAAhB;;AAEA,QAAKlB,IAAI,IAAI,IAAb,EAAoB;AAChB,aACI,0CACI;AACI,QAAA,SAAS,EAAEiB,OADf;AAEI,sBAAW,MAFf;AAGI,sBAAYL,WAAW,GAAGC,WAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKQ;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKM,SAAL,CAAe,MAAf,CADL,CALR,EASSJ,SATT,EAUSC,UAVT,CADJ,CADJ;AAgBH,KAjBD,MAkBK;AACD,aACI,0CACI,oBAAC,aAAD;AACI,QAAA,EAAE,EAAE,KAAK/B,KAAL,CAAWC,UADnB;AAEI,QAAA,OAAO,EAAEc,IAAI,CAACvB,OAFlB;AAGI,QAAA,UAAU,EAAE;AACR2C,UAAAA,SAAS,EAAE,SADH;AAERC,UAAAA,IAAI,EAAE;AAFE,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI;AACI,QAAA,SAAS,EAAEJ,OADf;AAEI,sBAAYjB,IAAI,CAAC1B,KAFrB;AAGI,sBAAYsC,WAAW,GAAGC,WAH9B;AAII,QAAA,KAAK,EAAKb,IAAI,KAAK,KAAKhB,IAAhB,GAAyB;AAACsC,UAAAA,KAAK,EAAErB,IAAI,CAACQ,GAAL,CAAS,CAAT,EAAYG,WAAW,GAAG,CAA1B,IAA+B,EAA/B,GAAoC;AAA5C,SAAzB,GAA6E,IAJzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMQ;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKW,YAAL,CAAkBvB,IAAI,CAAC1B,KAAvB,CADL,EAEK,KAAK6C,SAAL,CAAenB,IAAI,CAAC1B,KAApB,CAFL,CANR,EAWSyC,SAXT,EAYSC,UAZT,EAcS,KAAKQ,iBAAL,CAAuBV,GAAvB,EAA4Bd,IAAI,CAACvB,OAAjC,CAdT,CARJ,CADJ,CADJ;AA+BH;AACJ;;AAED0C,EAAAA,SAAS,CAAC9C,GAAD,EAAM;AACX,WACI,0CACI;AAAK,MAAA,SAAS,EAAC,0BAAf;AAA0C,MAAA,KAAK,EAAC,4BAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,sBAAhB;AAAuC,MAAA,CAAC,EAAC,KAAzC;AAA+C,MAAA,CAAC,EAAC,KAAjD;AAAuD,MAAA,IAAI,EAAC,OAA5D;AAAoE,MAAA,UAAU,EAAC,QAA/E;AAAwF,MAAA,gBAAgB,EAAC,SAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,GADL,CADJ,EAII;AAAQ,MAAA,SAAS,EAAC,oBAAlB;AAAuC,MAAA,CAAC,EAAC,IAAzC;AAA8C,MAAA,EAAE,EAAC,IAAjD;AAAsD,MAAA,EAAE,EAAC,IAAzD;AAA8D,MAAA,MAAM,EAAC,OAArE;AAA6E,MAAA,IAAI,EAAC,MAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ,CADJ;AAUH;;AAEDkD,EAAAA,YAAY,CAAClD,GAAD,EAAM;AACd,WACI,0CACI;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAyB,MAAA,OAAO,EAAE,MAAM,KAAKoD,aAAL,CAAmBpD,GAAnB,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAKI;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAwB,MAAA,OAAO,EAAE,MAAM,KAAKqD,SAAL,CAAerD,GAAf,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CALJ,CADJ,CADJ;AAaH;;AAEDmD,EAAAA,iBAAiB,CAACV,GAAD,EAAMa,IAAN,EAAY;AACzB,QAAIb,GAAG,KAAK,MAAZ,EAAoB;AAChB,aACI,0CACI,oBAAC,aAAD;AACI,QAAA,EAAE,EAAE,KAAK7B,KAAL,CAAWC,UADnB;AAEI,QAAA,OAAO,EAAEyC,IAFb;AAGI,QAAA,UAAU,EAAE;AACRP,UAAAA,SAAS,EAAE,SADH;AAERC,UAAAA,IAAI,EAAE;AAFE,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAgC,QAAA,KAAK,EAAC,4BAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAuB,QAAA,EAAE,EAAC,GAA1B;AAA8B,QAAA,EAAE,EAAC,IAAjC;AAAsC,QAAA,EAAE,EAAC,MAAzC;AAAgD,QAAA,EAAE,EAAC,GAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CARJ,CADJ,CADJ;AAiBH,KAlBD,MAmBK,IAAIP,GAAG,KAAK,OAAZ,EAAqB;AACtB,aACI,0CACI,oBAAC,aAAD;AACI,QAAA,EAAE,EAAE,KAAK7B,KAAL,CAAWC,UADnB;AAEI,QAAA,OAAO,EAAEyC,IAFb;AAGI,QAAA,UAAU,EAAE;AACRP,UAAAA,SAAS,EAAE,SADH;AAERC,UAAAA,IAAI,EAAE;AAFE,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAgC,QAAA,KAAK,EAAC,4BAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAuB,QAAA,EAAE,EAAC,GAA1B;AAA8B,QAAA,EAAE,EAAC,GAAjC;AAAqC,QAAA,EAAE,EAAC,MAAxC;AAA+C,QAAA,EAAE,EAAC,IAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CARJ,CADJ,CADJ;AAiBH,KAlBI,MAmBA;AACD,aAAO,IAAP;AACH;AACJ;;AAEDO,EAAAA,mBAAmB,CAAC5B,IAAI,GAAG,KAAKhB,IAAb,EAAmB;AAClC,QAAIgB,IAAI,IAAI,IAAZ,EAAkB;AAClBA,IAAAA,IAAI,CAACvB,OAAL,GAAe,CAAf;AACA,SAAKoD,oBAAL,CAA0B7B,IAAI,CAACzB,IAA/B;AACA,SAAKsD,oBAAL,CAA0B7B,IAAI,CAACxB,KAA/B;AACH;;AAEDsD,EAAAA,sBAAsB,GAAG;AACrB,QAAIC,KAAK,GAAG,IAAI9D,KAAJ,EAAZ;AACA8D,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKhD,IAAhB;AAEA,QAAIP,OAAO,GAAG,GAAd;;AAEA,WAAQ,CAAEsD,KAAK,CAACE,KAAN,EAAV,EAA0B;AACtB,UAAIjC,IAAI,GAAG+B,KAAK,CAACG,KAAN,EAAX;;AAEA,UAAIlC,IAAJ,EAAU;AACN+B,QAAAA,KAAK,CAACC,IAAN,CAAWhC,IAAI,CAACzB,IAAhB;AACAwD,QAAAA,KAAK,CAACC,IAAN,CAAWhC,IAAI,CAACxB,KAAhB;AAEAwB,QAAAA,IAAI,CAACvB,OAAL,GAAeA,OAAf;AACAA,QAAAA,OAAO,IAAI,GAAX;AACH;AACJ;AACJ;;AAED0D,EAAAA,iBAAiB,GAAG,CAEnB;;AAEDC,EAAAA,qBAAqB,CAAC/D,GAAD,EAAM2B,IAAI,GAAG,KAAKhB,IAAlB,EAAwB;AACzC,QAAIgB,IAAI,KAAK,IAAb,EAAmB;AACf,UAAIA,IAAI,KAAK,KAAKhB,IAAlB,EAAwB;AACpB,eADoB,CACZ;AACX;;AACD;AACH;;AAED,QAAIgB,IAAI,CAAC1B,KAAL,GAAaD,GAAjB,EAAsB,CAErB;AACJ;;AAEDa,EAAAA,UAAU,GAAG;AACT,SAAKa,KAAL;AACA,SAAKN,iBAAL,CAAuB,EAAvB;AACA,SAAKqC,sBAAL;AACA,SAAKO,QAAL,CAAc;AAACnD,MAAAA,UAAU,EAAE;AAAb,KAAd;AACA,SAAKmD,QAAL,CAAc;AAACnD,MAAAA,UAAU,EAAE,CAAE,KAAKD,KAAL,CAAWC;AAA1B,KAAd,EALS,CAMT;AAEH;;AAEDC,EAAAA,UAAU,GAAG,CACT;AACA;AACH;;AAEDC,EAAAA,UAAU,GAAG;AACT;AACA,SAAKiD,QAAL,CAAc;AAACjD,MAAAA,UAAU,EAAE,CAAE,KAAKH,KAAL,CAAWG;AAA1B,KAAd;AACH;;AAEDC,EAAAA,UAAU,GAAG;AACT,SAAKgD,QAAL,CAAc;AAAChD,MAAAA,UAAU,EAAE,CAAE,KAAKJ,KAAL,CAAWI;AAA1B,KAAd;AACH;;AAEDiD,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKvD,KAAjB;AACA,WACI,0CACI;AAAQ,MAAA,OAAO,EAAI,KAAKC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAQ,MAAA,OAAO,EAAI,KAAKC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAGI;AAAQ,MAAA,OAAO,EAAI,KAAKC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,EAII;AAAQ,MAAA,OAAO,EAAI,KAAKC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,EAMM,QAAQ,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAI,KAAKJ,KAAL,CAAWwD,SAApC;AAA+C,MAAA,QAAQ,EAAI,KAAKnD,YAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR,GAA2F,IANjG,EAOM,QAAQ,oBAAC,YAAD;AAAc,MAAA,OAAO,EAAI,sBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR,GAA8D,IAPpE,EASI;AACI,MAAA,EAAE,EAAG,KAAKR,IADd;AAEI,MAAA,SAAS,EAAC,MAFd;AAGI,MAAA,KAAK,EAAG;AAAC4D,QAAAA,SAAS,EAAE,KAAKrC,cAAL;AAAZ,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKM,KAAKM,IAAL,EALN,CATJ,CADJ;AAoBH;AAED;;;;;;;;;;AAUA;;;;;;;;AArY0D","sourcesContent":["import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n        this.timeout = 0;\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.state = {\r\n            animation1: false,\r\n            animation2: false,\r\n            animation3: false,\r\n            animation4: false,\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n\r\n        this.animation1 = this.animation1.bind(this); // temporary\r\n        this.animation2 = this.animation2.bind(this); // temporary\r\n        this.animation3 = this.animation3.bind(this); // temporary\r\n        this.animation4 = this.animation4.bind(this); // temporary\r\n    }\r\n\r\n    componentDidMount() {\r\n        // call generate function\r\n    }\r\n\r\n    /*static getDerivedStateFromProps(newProps, state) {\r\n        //To-do: async calls and tooltips\r\n        console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n\r\n        const initialStateOperation = 'Initial';\r\n\r\n        if ( state.animating ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: state.operation, animating: false };\r\n            }\r\n            else {\r\n                return { operation: state.operation };\r\n            }\r\n        }\r\n        else if ( state.operation !== newProps.operation ) {\r\n            return { operation: newProps.operation, animating: true };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }*/\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node == null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node === null ) {\r\n            return node;\r\n        }\r\n        else if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    receiveInput(val) {\r\n        alert(val);\r\n    }\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node == null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className='node-value'>\r\n                                {this.getCricle('null')}\r\n                            </div>\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.animation1}\r\n                        timeout={node.timeout}\r\n                        classNames={{\r\n                            enterDone: 'visible',\r\n                            exit: 'visible'\r\n                        }}>\r\n\r\n                        <div\r\n                            className={classes}\r\n                            node-value={node.value}\r\n                            node-layer={tree_height - curr_height}\r\n                            style={ ( node === this.root ) ? {width: Math.pow(2, tree_height - 1) * 70 + 'px'} : null }>\r\n\r\n                                <div className='node-value'>\r\n                                    {this.getNodeHover(node.value)}\r\n                                    {this.getCricle(node.value)}\r\n                                </div>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n\r\n                                {this.getConnectingLine(pos, node.timeout)}\r\n\r\n                        </div>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(val) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {val}\r\n                    </text>\r\n                    <circle className='circle node-circle' r='24' cx='25' cy='25' stroke='black' fill='none' />\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <span className='node-hover'>\r\n                    <span className='search' onClick={() => this.searchForNode(val)}>\r\n                        <i className=\"fas fa-search\" />\r\n                    </span>\r\n\r\n                    <span className='trash' onClick={() => this.trashNode(val)}>\r\n                        <i className=\"fas fa-trash\" />\r\n                    </span>\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(pos, time) {\r\n        if (pos === 'left') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.animation1}\r\n                        timeout={time}\r\n                        classNames={{\r\n                            enterDone: 'visible',\r\n                            exit: 'visible'\r\n                        }}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                            <line className='line' x1='0' y1='50' x2='100%' y2='0'></line>\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else if (pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={this.state.animation1}\r\n                        timeout={time}\r\n                        classNames={{\r\n                            enterDone: 'visible',\r\n                            exit: 'visible'\r\n                        }}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n                            <line className='line' x1='0' y1='0' x2='100%' y2='50'></line>\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setDefaultAnimation(node = this.root) {\r\n        if (node == null) return;\r\n        node.timeout = 0;\r\n        this.setDefaultAnimations(node.left);\r\n        this.setDefaultAnimations(node.right);\r\n    }\r\n\r\n    setGenerationAnimation() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let timeout = 200;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                node.timeout = timeout;\r\n                timeout += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    setResetAnimation() {\r\n\r\n    }\r\n\r\n    setInsertionAnimation(val, node = this.root) {\r\n        if (node === null) {\r\n            if (node === this.root) {\r\n                return; // set show error flag?\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (node.value < val) {\r\n\r\n        }\r\n    }\r\n\r\n    animation1() {\r\n        this.reset();\r\n        this.insertNumElements(15);\r\n        this.setGenerationAnimation();\r\n        this.setState({animation1: false});\r\n        this.setState({animation1: ! this.state.animation1});\r\n        //this.setState({ operation: 'Generate' });\r\n        \r\n    }\r\n\r\n    animation2() {\r\n        //this.setResetAnimation();\r\n        //this.setState({animation2: ! this.state.animation2});\r\n    }\r\n\r\n    animation3() {\r\n        //this.setInsertionAnimation();\r\n        this.setState({animation3: ! this.state.animation3});\r\n    }\r\n\r\n    animation4() {\r\n        this.setState({animation4: ! this.state.animation4});\r\n    }\r\n\r\n    render() {\r\n        console.log(\"BST::render: \");\r\n        console.log(this.state);\r\n        return (\r\n            <>\r\n                <button onClick = {this.animation1}>animation1</button>\r\n                <button onClick = {this.animation2}>animation2</button>\r\n                <button onClick = {this.animation3}>animation3</button>\r\n                <button onClick = {this.animation4}>animation4</button>\r\n\r\n                { false ? <InputModal operation = {this.state.operation} callback = {this.receiveInput} /> : null }\r\n                { false ? <ErrorMessage message = {\"Error: Tree is empty\"} /> : null }\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n        if ( nextState.operation === this.initialStateOperation ) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }*/\r\n\r\n    /*componentDidUpdate() {\r\n        console.log(\"BST::componentDidUpdate: \" + this.state.operation);\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            this.setState({ operation: this.initialStateOperation });\r\n        }\r\n    }*/\r\n}"]},"metadata":{},"sourceType":"module"}