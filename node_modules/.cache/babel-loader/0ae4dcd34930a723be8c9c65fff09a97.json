{"ast":null,"code":"import Queue from './Queue.jsx';\n\nclass BinaryNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n  }\n\n}\n\nexport default class BinaryTree {\n  constructor() {\n    this.root = null;\n  }\n\n  insert(val) {\n    if (this.root == null) {\n      this.root = new BinaryNode(val);\n      return;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (val < curr.value) {\n        if (curr.left == null) {\n          curr.left = new BinaryNode(val);\n          return;\n        }\n\n        curr = curr.left;\n      } else {\n        if (curr.right == null) {\n          curr.right = new BinaryNode(val);\n          return;\n        }\n\n        curr = curr.right;\n      }\n    }\n  }\n\n  levelOrder() {\n    const array = [];\n    let queue = new Queue();\n    let layer_size = 1;\n    let layer_curr = 0;\n    let layer_temp = [];\n    queue.push(this.root);\n\n    while (!queue.empty()) {\n      let curr = queue.front();\n      layer_temp.push(curr);\n      layer_curr += 1;\n\n      if (layer_size === layer_curr) {\n        if (!validLayer(layer_temp)) {\n          console.log(layer_temp);\n          return array;\n        }\n\n        array.push(layer_temp);\n        layer_size *= 2;\n        layer_curr = 0;\n        layer_temp = [];\n      }\n\n      if (curr == null) {\n        queue.push(null);\n        queue.push(null);\n      } else {\n        queue.push(curr.left);\n        queue.push(curr.right);\n      }\n    }\n\n    return array;\n  }\n\n}\n\nfunction validLayer(layer) {\n  for (const val in layer) {\n    if (val != null) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/BinaryTree.jsx"],"names":["Queue","BinaryNode","constructor","val","value","left","right","BinaryTree","root","insert","curr","levelOrder","array","queue","layer_size","layer_curr","layer_temp","push","empty","front","validLayer","console","log","layer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKC,KAAL,GAAaD,GAAb;AACA,SAAKE,IAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,IAAb;AACH;;AALY;;AAQjB,eAAe,MAAMC,UAAN,CAAiB;AAC5BL,EAAAA,WAAW,GAAG;AACV,SAAKM,IAAL,GAAY,IAAZ;AACH;;AAEDC,EAAAA,MAAM,CAACN,GAAD,EAAM;AACR,QAAI,KAAKK,IAAL,IAAa,IAAjB,EAAuB;AACnB,WAAKA,IAAL,GAAY,IAAIP,UAAJ,CAAeE,GAAf,CAAZ;AACA;AACH;;AAED,QAAIO,IAAI,GAAG,KAAKF,IAAhB;;AAEA,WAAO,IAAP,EAAa;AACT,UAAIL,GAAG,GAAGO,IAAI,CAACN,KAAf,EAAsB;AAClB,YAAGM,IAAI,CAACL,IAAL,IAAa,IAAhB,EAAsB;AAClBK,UAAAA,IAAI,CAACL,IAAL,GAAY,IAAIJ,UAAJ,CAAeE,GAAf,CAAZ;AACA;AACH;;AACDO,QAAAA,IAAI,GAAGA,IAAI,CAACL,IAAZ;AACH,OAND,MAOK;AACD,YAAGK,IAAI,CAACJ,KAAL,IAAc,IAAjB,EAAuB;AACnBI,UAAAA,IAAI,CAACJ,KAAL,GAAa,IAAIL,UAAJ,CAAeE,GAAf,CAAb;AACA;AACH;;AACDO,QAAAA,IAAI,GAAGA,IAAI,CAACJ,KAAZ;AACH;AACJ;AACJ;;AAEDK,EAAAA,UAAU,GAAG;AACT,UAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,KAAK,GAAG,IAAIb,KAAJ,EAAZ;AAEA,QAAIc,UAAU,GAAG,CAAjB;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,UAAU,GAAG,EAAjB;AAEAH,IAAAA,KAAK,CAACI,IAAN,CAAW,KAAKT,IAAhB;;AAEA,WAAO,CAACK,KAAK,CAACK,KAAN,EAAR,EAAwB;AACpB,UAAIR,IAAI,GAAGG,KAAK,CAACM,KAAN,EAAX;AACAH,MAAAA,UAAU,CAACC,IAAX,CAAgBP,IAAhB;AACAK,MAAAA,UAAU,IAAI,CAAd;;AAEA,UAAKD,UAAU,KAAKC,UAApB,EAAiC;AAC7B,YAAK,CAACK,UAAU,CAACJ,UAAD,CAAhB,EAA+B;AAC3BK,UAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AACA,iBAAOJ,KAAP;AACH;;AAEDA,QAAAA,KAAK,CAACK,IAAN,CAAWD,UAAX;AACAF,QAAAA,UAAU,IAAI,CAAd;AACAC,QAAAA,UAAU,GAAG,CAAb;AACAC,QAAAA,UAAU,GAAG,EAAb;AACH;;AAED,UAAKN,IAAI,IAAI,IAAb,EAAoB;AAChBG,QAAAA,KAAK,CAACI,IAAN,CAAW,IAAX;AACAJ,QAAAA,KAAK,CAACI,IAAN,CAAW,IAAX;AACH,OAHD,MAIK;AACDJ,QAAAA,KAAK,CAACI,IAAN,CAAWP,IAAI,CAACL,IAAhB;AACAQ,QAAAA,KAAK,CAACI,IAAN,CAAWP,IAAI,CAACJ,KAAhB;AACH;AACJ;;AAED,WAAOM,KAAP;AACH;;AArE2B;;AAwEhC,SAASQ,UAAT,CAAoBG,KAApB,EAA2B;AACvB,OAAK,MAAMpB,GAAX,IAAkBoB,KAAlB,EAAyB;AACrB,QAAIpB,GAAG,IAAI,IAAX,EAAiB;AACb,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH","sourcesContent":["import Queue from './Queue.jsx'\r\n\r\nclass BinaryNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nexport default class BinaryTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root == null) {\r\n            this.root = new BinaryNode(val);\r\n            return;\r\n        }\r\n\r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (val < curr.value) {\r\n                if(curr.left == null) {\r\n                    curr.left = new BinaryNode(val);\r\n                    return;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n            else {\r\n                if(curr.right == null) {\r\n                    curr.right = new BinaryNode(val);\r\n                    return;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n        }\r\n    }\r\n\r\n    levelOrder() {\r\n        const array = [];\r\n        let queue = new Queue();\r\n\r\n        let layer_size = 1;\r\n        let layer_curr = 0;\r\n        let layer_temp = [];\r\n\r\n        queue.push(this.root);\r\n\r\n        while( !queue.empty() ) {\r\n            let curr = queue.front();\r\n            layer_temp.push(curr);\r\n            layer_curr += 1;\r\n\r\n            if ( layer_size === layer_curr ) {\r\n                if ( !validLayer(layer_temp) ) {\r\n                    console.log(layer_temp);\r\n                    return array;\r\n                }\r\n\r\n                array.push(layer_temp);\r\n                layer_size *= 2;\r\n                layer_curr = 0;\r\n                layer_temp = [];\r\n            }\r\n\r\n            if ( curr == null ) {\r\n                queue.push(null);\r\n                queue.push(null);\r\n            }\r\n            else {\r\n                queue.push(curr.left);\r\n                queue.push(curr.right);\r\n            }\r\n        }\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\nfunction validLayer(layer) {\r\n    for (const val in layer) {\r\n        if (val != null) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"]},"metadata":{},"sourceType":"module"}