{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport InputModal from '../../Additional/InputModal/InputModal.jsx';\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx';\nimport Queue from '../../Additional/Queue.js';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n    this.animations = {\n      initial: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      visited: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      success: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      removed: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      }\n    };\n    this.moveAnimations = {\n      active: false,\n      delay: 0,\n      css: {\n        entering: {},\n        entered: {},\n        exiting: {},\n        exited: {}\n      }\n    };\n  }\n\n}\n\nexport default class BinarySearchTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.visibleClasses = {\n      appearDone: 'visible',\n      enterDone: 'visible',\n      exit: 'visible'\n    };\n    this.operationSteps = {\n      Initial: ['Initial'],\n      Generate: ['Reset', 'Generate'],\n      Reset: ['Reset'],\n      Insert: [],\n      Remove: [],\n      Search: [],\n      Traversal: []\n    };\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.removeValue = null;\n    this.targetValue = null;\n    this.targetNode = null;\n    this.errorMessage = '';\n    this.timeout = 0;\n    this.state = {\n      operation: this.initialStateOperation,\n      step: 0,\n      input: false,\n      tooltips: false,\n      error: false,\n      initial: false\n    };\n    this.receiveInput = this.receiveInput.bind(this);\n    this.action1 = this.action1.bind(this); // temporary\n\n    this.action2 = this.action2.bind(this); // temporary\n\n    this.action3 = this.action3.bind(this); // temporary\n\n    this.action4 = this.action4.bind(this); // temporary\n\n    this.action5 = this.action5.bind(this); // temporary\n\n    this.action6 = this.action6.bind(this); // temporary\n\n    this.action7 = this.action7.bind(this); // temporary\n\n    this.action8 = this.action8.bind(this); // temporary\n\n    this.action9 = this.action9.bind(this); // temporary\n\n    this.action10 = this.action10.bind(this); // temporary\n\n    this.action11 = this.action11.bind(this); // temporary\n\n    this.action12 = this.action12.bind(this); // temporary\n\n    this.action13 = this.action13.bind(this); // temporary\n\n    this.action14 = this.action14.bind(this); // temporary\n  }\n\n  performOperationStep() {\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Reset':\n        this.ResetTree();\n        break;\n\n      case 'Generate':\n        this.GenerateTree();\n        break;\n\n      case 'Initial':\n      default:\n        break;\n    }\n  }\n\n  advanceOperationStep() {\n    if (this.state.operation !== this.initialStateOperation) {\n      if (this.state.step === this.operationSteps[this.state.operation].length - 1) {\n        this.setState({\n          operation: 'Initial',\n          step: 0\n        });\n      } else {\n        let _this = this;\n\n        setTimeout(function () {\n          _this.setState({\n            step: _this.state.step + 1\n          });\n        }, _this.timeout);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      operation: 'Generate',\n      step: 0\n    }); //call generate function\n  }\n  /*static getDerivedStateFromProps(newProps, state) {\r\n      //To-do: async calls and tooltips\r\n      console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n        const initialStateOperation = 'Initial';\r\n        if ( state.animating ) {\r\n          if ( state.operation === initialStateOperation ) {\r\n              return { operation: state.operation, animating: false };\r\n          }\r\n          else {\r\n              return { operation: state.operation };\r\n          }\r\n      }\r\n      else if ( state.operation !== newProps.operation ) {\r\n          return { operation: newProps.operation, animating: true };\r\n      }\r\n      else {\r\n          return null;\r\n      }\r\n  }*/\n\n  /*shouldComponentUpdate(nextProps, nextState) {\r\n      console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n      if ( nextState.operation === this.initialStateOperation ) {\r\n          return false;\r\n      }\r\n      else {\r\n          return true;\r\n      }\r\n  }*/\n\n\n  componentDidUpdate() {\n    this.advanceOperationStep();\n  }\n\n  ResetTree() {\n    if (this.root) {\n      this.setHideAnimations();\n      this.timeout = 1000;\n    } else {\n      this.timeout = 150;\n    }\n  }\n\n  GenerateTree() {\n    this.reset();\n    this.insertNumElements(15);\n    this.setGenerationAnimations();\n  }\n\n  action1() {\n    this.setState({\n      operation: 'Generate',\n      step: 0\n    });\n  }\n\n  action2() {\n    this.removeValue = null;\n    this.targetValue = null;\n    this.targetNode = null;\n    this.setState({\n      operation: 'Reset',\n      step: 0\n    });\n  }\n\n  action3() {\n    this.removeValue = null;\n    this.targetValue = null;\n    this.targetNode = null;\n    this.setHideTraversalAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action4() {\n    this.setDFSTraversalAnimations('In-order'); //this.setBFSTraversalAnimations();\n\n    this.setState({\n      initial: true\n    });\n  }\n\n  action5(val) {\n    //check if tree has element first..\n    if (!this.contains(val)) {//show error..tree doesn't contain val\n    } else {\n      this.targetValue = val;\n      this.setSearchAnimations();\n      this.setState({\n        initial: true\n      });\n    }\n  }\n\n  action6() {\n    //check if tree has element first..\n    let val = parseInt(prompt());\n\n    if (!this.contains(val)) {//show error..tree doesn't contain val\n    } else {\n      this.targetValue = val;\n      this.insert(this.targetValue);\n      this.setInsertAnimations();\n      this.setState({\n        initial: true\n      });\n    }\n  }\n\n  action7() {\n    this.setInsertionCompleteAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action8(val) {\n    //check if tree has element first..\n    if (!this.contains(val)) {//show error..tree doesn't contain val\n    } else {\n      this.removeValue = val;\n      this.targetValue = val;\n      this.targetNode = this.root;\n      this.action9();\n    }\n  }\n\n  action9() {\n    this.setRemoveAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action10() {\n    this.setMoveSubtreeAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action11() {\n    document.querySelector('.moved').classList.remove('moved');\n  }\n\n  action12() {\n    this.setHideMoveAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action13() {\n    document.querySelector('.root').classList.add('moved');\n    this.root = this.remove(this.removeValue);\n    this.setHideMoveAnimations();\n    this.setHideTraversalAnimations();\n    this.setState({\n      initial: true\n    });\n  }\n\n  action14() {\n    this.reset();\n  }\n\n  render() {\n    console.log(this.state);\n    this.performOperationStep();\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: this.action1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"Generate new tree\"), React.createElement(\"button\", {\n      onClick: this.action2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Hide Tree\"), React.createElement(\"button\", {\n      onClick: this.action3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"Hide traversals\"), React.createElement(\"button\", {\n      onClick: this.action4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Traversals\"), React.createElement(\"button\", {\n      onClick: this.action5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"Search\"), React.createElement(\"button\", {\n      onClick: this.action6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"Insert\"), React.createElement(\"button\", {\n      onClick: this.action7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"Insert complete\"), React.createElement(\"button\", {\n      onClick: this.action8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Pre-Remove (call once)\"), React.createElement(\"button\", {\n      onClick: this.action9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Remove step 1\"), React.createElement(\"button\", {\n      onClick: this.action10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"Remove step 2\"), React.createElement(\"button\", {\n      onClick: this.action11,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"Post remove final (call once)\"), React.createElement(\"button\", {\n      onClick: this.action12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Hide moves\"), React.createElement(\"button\", {\n      onClick: this.action13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"Remove final\"), React.createElement(\"button\", {\n      onClick: this.action14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"Reset\"), this.state.input ? React.createElement(InputModal, {\n      operation: this.state.operation,\n      callback: this.receiveInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }) : null, this.state.error ? React.createElement(ErrorMessage, {\n      message: this.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, this.Tree()));\n  }\n\n  insertNumElements(elements) {\n    for (let i = 0; i < elements; ++i) {\n      let val = randomIntFromInverval(1, 150);\n\n      if (this.insert(val)) {\n        if (this.height() > 5) {\n          this.root = this.remove(val);\n          --i;\n        }\n      } else {\n        --i;\n      }\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node === null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  contains(val, node = this.root) {\n    if (!node) return false;\n\n    if (val < node.value) {\n      return this.contains(val, node.left);\n    } else if (val > node.value) {\n      return this.contains(val, node.right);\n    } else {\n      return true;\n    }\n  }\n\n  insert(val) {\n    if (this.root === null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value === val) {\n        //tree contains key already\n        return false;\n      } else if (curr.value < val) {\n        if (curr.right === null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left === null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  remove(val, node = this.root) {\n    if (!val) return;\n    if (node === null) return node;\n\n    if (val < node.value) {\n      node.left = this.remove(val, node.left);\n    } else if (val > node.value) {\n      node.right = this.remove(val, node.right);\n    } else {\n      if (node.left === null) {\n        return node.right;\n      } else if (node.right === null) {\n        return node.left;\n      } else {\n        node.value = this.inOrderSuccessor(node.right);\n        node.right = this.remove(node.value, node.right);\n      }\n    }\n\n    return node;\n  }\n\n  inOrderSuccessor(node) {\n    if (node === null) {//error\n    } else if (node.left !== null) {\n      return this.inOrderSuccessor(node.left);\n    } else {\n      return node.value;\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left');\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n    const classes = ['node-wrapper', pos].join(' ');\n\n    if (node === null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }), leftChild, rightChild));\n    } else {\n      const rootWidth = {\n        width: node === this.root ? Math.pow(2, tree_height - 1) * 70 + 'px' : null\n      };\n      return React.createElement(React.Fragment, null, React.createElement(Transition, {\n        in: node.moveAnimations['active'],\n        timeout: node.moveAnimations['delay'],\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511\n        },\n        __self: this\n      }, state => React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: node === this.root ? rootWidth : node.moveAnimations['css'][state],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, React.createElement(CSSTransition, {\n        in: node.animations['initial']['node']['active'],\n        timeout: node.animations['initial']['node']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }, this.getNodeHover(node.value), this.getCricle(node))), leftChild, rightChild, this.getConnectingLine(node, pos))));\n    }\n  }\n\n  getCricle(node) {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"circle node-value-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle initial\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }), React.createElement(CSSTransition, {\n      in: node.animations['visited']['node']['active'],\n      timeout: node.animations['visited']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background visited\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle visited\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }))), React.createElement(CSSTransition, {\n      in: node.animations['success']['node']['active'],\n      timeout: node.animations['success']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background success\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle success\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }))), React.createElement(CSSTransition, {\n      in: node.animations['removed']['node']['active'],\n      timeout: node.animations['removed']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background removed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle removed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    }))), React.createElement(\"text\", {\n      className: \"text node-value-text\",\n      x: \"50%\",\n      y: \"50%\",\n      fill: \"black\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, node.value)));\n  }\n\n  getNodeHover(val) {\n    return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: \"node-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      onClick: () => this.searchNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }))), React.createElement(\"i\", {\n      className: \"fas fa-trash\",\n      onClick: () => this.deleteNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"trash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    })))));\n  }\n\n  getConnectingLine(node, pos) {\n    if (pos === 'left' || pos === 'right') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: node.animations['initial']['line']['active'],\n        timeout: node.animations['initial']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638\n        },\n        __self: this\n      }, this.getLine(pos, 'initial'), React.createElement(CSSTransition, {\n        in: node.animations['visited']['line']['active'],\n        timeout: node.animations['visited']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 642\n        },\n        __self: this\n      }, this.getLine(pos, 'visited')), React.createElement(CSSTransition, {\n        in: node.animations['success']['line']['active'],\n        timeout: node.animations['success']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 652\n        },\n        __self: this\n      }, this.getLine(pos, 'success')), React.createElement(CSSTransition, {\n        in: node.animations['removed']['line']['active'],\n        timeout: node.animations['removed']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662\n        },\n        __self: this\n      }, this.getLine(pos, 'removed')))));\n    } else {\n      return null;\n    }\n  }\n\n  getLine(pos, addClass) {\n    const classes = ['line', addClass].join(' ');\n    if (pos === 'left') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"50\",\n      x2: \"100%\",\n      y2: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    });else if (pos === 'right') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"100%\",\n      y2: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    });else return null;\n  }\n\n  receiveInput(val) {\n    alert(val);\n  }\n\n  searchNode(val) {\n    this.action5(val);\n  }\n\n  deleteNode(val) {\n    this.action8(val);\n  }\n\n  setGenerationAnimations() {\n    let queue = new Queue();\n    queue.push(this.root);\n    let delay = 150;\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        queue.push(node.left);\n        queue.push(node.right);\n\n        for (let key in node.animations['initial']) {\n          node.animations['initial'][key]['active'] = true;\n          node.animations['initial'][key]['delay'] = delay;\n        }\n\n        delay += 200;\n      }\n    }\n  }\n\n  setHideAnimations(node = this.root) {\n    if (node === null) return;\n\n    for (let state in node.animations) {\n      for (let element in node.animations[state]) {\n        node.animations[state][element]['active'] = false;\n        node.animations[state][element]['delay'] = 150;\n      }\n    }\n\n    this.setHideAnimations(node.left);\n    this.setHideAnimations(node.right);\n  }\n\n  setHideTraversalAnimations(node = this.root) {\n    if (node === null) return;\n\n    for (let state in node.animations) {\n      for (let element in node.animations[state]) {\n        if (state === 'initial') {\n          node.animations[state][element]['active'] = true;\n          node.animations[state][element]['delay'] = 0;\n        } else {\n          node.animations[state][element]['active'] = false;\n          node.animations[state][element]['delay'] = 150;\n        }\n      }\n    }\n\n    this.setHideTraversalAnimations(node.left);\n    this.setHideTraversalAnimations(node.right);\n  }\n\n  setHideMoveAnimations(node = this.root) {\n    if (node === null) return;\n    node.moveAnimations['active'] = false;\n    node.moveAnimations['delay'] = 0;\n    this.setHideMoveAnimations(node.left);\n    this.setHideMoveAnimations(node.right);\n  }\n\n  setDFSTraversalAnimations(order, node = this.root, delay = 150) {\n    if (node === null) return delay;\n\n    let _delay = node === this.root ? delay : delay + 1000;\n\n    node.animations['visited']['node']['active'] = true;\n    node.animations['visited']['node']['delay'] = _delay + 500;\n    node.animations['visited']['line']['active'] = true;\n    node.animations['visited']['line']['delay'] = _delay;\n\n    if (order === 'Pre-order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\n\n    if (order === 'In-order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\n\n    if (order === 'Post-order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    node.animations['success']['line']['active'] = true;\n    node.animations['success']['line']['delay'] = _delay;\n    return _delay;\n  }\n\n  setBFSTraversalAnimations() {\n    let queue = new Queue();\n    let delay = 150;\n\n    if (this.root) {\n      queue.push(this.root);\n      this.root.animations['visited']['node']['active'] = true;\n      this.root.animations['visited']['node']['delay'] = delay;\n    } else {//error..tree is empty\n    }\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        if (node.left) {\n          queue.push(node.left);\n          delay += 1000;\n\n          for (let element in node.left.animations['visited']) {\n            node.left.animations['visited'][element]['active'] = true;\n            node.left.animations['visited'][element]['delay'] = delay;\n          }\n        }\n\n        if (node.right) {\n          queue.push(node.right);\n          delay += 1000;\n\n          for (let element in node.right.animations['visited']) {\n            node.right.animations['visited'][element]['active'] = true;\n            node.right.animations['visited'][element]['delay'] = delay;\n          }\n        }\n\n        delay += 1000;\n\n        for (let element in node.animations['success']) {\n          node.animations['success'][element]['active'] = true;\n          node.animations['success'][element]['delay'] = delay;\n        }\n      }\n    }\n  }\n\n  setSearchAnimations(node = this.root, delay = 150) {\n    if (!this.targetValue) return;\n\n    if (node === null) {\n      if (node === this.root) {//show error..empty tree\n      }\n    } else {\n      if (this.targetValue === node.value) {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay + 1250;\n      } else if (this.targetValue < node.value) this.setSearchAnimations(node.left, delay + 1000);else this.setSearchAnimations(node.right, delay + 1000);\n\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n    }\n  }\n\n  setInsertAnimations(node = this.root, delay = 150) {\n    if (!this.targetValue || !node) return;else {\n      if (this.targetValue === node.value) {\n        this.targetNode = node;\n        return;\n      } else if (this.targetValue < node.value) this.setInsertAnimations(node.left, delay + 1000);else this.setInsertAnimations(node.right, delay + 1000);\n\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n    }\n  }\n\n  setInsertionCompleteAnimations() {\n    let node = this.targetNode;\n\n    if (node) {\n      node.animations['initial']['node']['active'] = true;\n      node.animations['initial']['node']['delay'] = 650;\n      node.animations['initial']['line']['active'] = true;\n      node.animations['initial']['line']['delay'] = 150;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = 1250;\n    }\n  }\n\n  setRemoveAnimations(node = this.targetNode, delay = 150) {\n    if (!this.targetValue) return;\n\n    if (node === null) {\n      if (node === this.root) {//show error..empty tree\n      }\n    } else {\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n\n      if (this.targetValue === node.value) {\n        node.animations['success']['node']['active'] = false;\n        node.animations['success']['node']['delay'] = delay;\n        node.animations['success']['line']['active'] = false;\n        node.animations['success']['line']['delay'] = delay;\n        node.animations['removed']['node']['active'] = true;\n        node.animations['removed']['node']['delay'] = delay + 1500;\n        node.animations['removed']['line']['active'] = true;\n        node.animations['removed']['line']['delay'] = delay + 1000;\n        node.animations['initial']['node']['active'] = false;\n        node.animations['initial']['node']['delay'] = delay + 1500;\n        node.animations['initial']['line']['active'] = false;\n        node.animations['initial']['line']['delay'] = delay + 1500;\n        this.targetNode = node;\n      } else if (this.targetValue < node.value) this.setRemoveAnimations(node.left, delay + 1000);else this.setRemoveAnimations(node.right, delay + 1000);\n    }\n  }\n\n  setMoveSubtreeAnimations() {\n    let node = this.targetNode;\n\n    if (node) {\n      if (node.left === null || node.right === null) {\n        node.animations['initial']['line']['active'] = true;\n        node.animations['initial']['line']['delay'] = 3000;\n        node.animations['visited']['node']['active'] = false;\n        node.animations['visited']['node']['delay'] = 150;\n        node.animations['visited']['line']['active'] = false;\n        node.animations['visited']['line']['delay'] = 150;\n        node.animations['removed']['node']['active'] = false;\n        node.animations['removed']['node']['delay'] = 150;\n        node.animations['removed']['line']['active'] = false;\n        node.animations['removed']['line']['delay'] = 150;\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = 3500;\n\n        if (node.left === null && node.right === null) {\n          node.animations['initial']['line']['active'] = false;\n          node.animations['initial']['line']['delay'] = 0;\n          node.animations['success']['line']['active'] = false;\n          node.animations['success']['line']['delay'] = 0;\n        } else if (node.left === null) {\n          node.right.animations['initial']['line']['active'] = false;\n          node.right.animations['initial']['line']['delay'] = 150;\n          node.right.moveAnimations['active'] = true;\n          node.right.moveAnimations['delay'] = 1000;\n          node.right.moveAnimations['css']['entered'] = {\n            'width': '100%',\n            'zIndex': '1000',\n            'transform': 'translate(-50%, -50px)'\n          };\n          this.setMoveSubtreeCompleteAnimations(node.right);\n        } else if (node.right === null) {\n          node.left.animations['initial']['line']['active'] = false;\n          node.left.animations['initial']['line']['delay'] = 150;\n          node.left.moveAnimations['active'] = true;\n          node.left.moveAnimations['delay'] = 1000;\n          node.left.moveAnimations['css']['entered'] = {\n            'width': '100%',\n            'zIndex': '1000',\n            'transform': 'translate(0, -50px)'\n          };\n          this.setMoveSubtreeCompleteAnimations(node.left);\n        }\n      } else {\n        let delay = this.setInOrderSuccessorAnimations(node.right);\n        delay += 1000;\n        node.animations['visited']['node']['active'] = false;\n        node.animations['visited']['node']['delay'] = delay;\n        node.animations['visited']['line']['active'] = false;\n        node.animations['visited']['line']['delay'] = delay;\n        node.animations['removed']['node']['active'] = false;\n        node.animations['removed']['node']['delay'] = delay;\n        node.animations['removed']['line']['active'] = false;\n        node.animations['removed']['line']['delay'] = delay;\n        delay += 1000;\n        node.animations['initial']['node']['active'] = true;\n        node.animations['initial']['node']['delay'] = delay;\n        node.animations['initial']['line']['active'] = true;\n        node.animations['initial']['line']['delay'] = delay + 500;\n        delay += 1000;\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay + 500;\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = delay;\n      }\n    }\n  }\n\n  setMoveSubtreeCompleteAnimations(node, delay = 4000, first = true) {\n    if (node) {\n      if (first) {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay;\n      } else {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay;\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = delay;\n      }\n\n      this.setMoveSubtreeCompleteAnimations(node.left, delay + 300, false);\n      this.setMoveSubtreeCompleteAnimations(node.right, delay + 300, false);\n    }\n  }\n\n  setInOrderSuccessorAnimations(node, delay = 150) {\n    node.animations['visited']['node']['active'] = true;\n    node.animations['visited']['node']['delay'] = delay + 500;\n    node.animations['visited']['line']['active'] = true;\n    node.animations['visited']['line']['delay'] = delay;\n\n    if (node.left) {\n      return this.setInOrderSuccessorAnimations(node.left, delay + 1000);\n    } else {\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = delay + 1500;\n      node.animations['success']['line']['active'] = true;\n      node.animations['success']['line']['delay'] = delay + 1000;\n      document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]>.node-value .node-value-text').textContent = node.value;\n      this.targetNode = node;\n      this.targetValue = node.value;\n      return delay + 1500;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","Transition","CSSTransition","InputModal","ErrorMessage","Queue","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","animations","initial","node","active","delay","line","visited","success","removed","moveAnimations","css","entering","entered","exiting","exited","BinarySearchTree","Component","props","initialStateOperation","visibleClasses","appearDone","enterDone","exit","operationSteps","Initial","Generate","Reset","Insert","Remove","Search","Traversal","name","key","root","removeValue","targetValue","targetNode","errorMessage","timeout","state","operation","step","input","tooltips","error","receiveInput","bind","action1","action2","action3","action4","action5","action6","action7","action8","action9","action10","action11","action12","action13","action14","performOperationStep","ResetTree","GenerateTree","advanceOperationStep","length","setState","_this","setTimeout","componentDidMount","componentDidUpdate","setHideAnimations","reset","insertNumElements","setGenerationAnimations","setHideTraversalAnimations","setDFSTraversalAnimations","contains","setSearchAnimations","parseInt","prompt","insert","setInsertAnimations","setInsertionCompleteAnimations","setRemoveAnimations","setMoveSubtreeAnimations","document","querySelector","classList","remove","setHideMoveAnimations","add","render","console","log","transform","getScaleFactor","Tree","elements","i","height","Math","max","curr","inOrderSuccessor","scale_factor","window","innerWidth","pow","tree_height","curr_height","pos","leftChild","rightChild","classes","join","rootWidth","width","getNodeHover","getCricle","getConnectingLine","searchNode","deleteNode","getLine","addClass","alert","queue","push","empty","front","element","order","_delay","setBFSTraversalAnimations","setMoveSubtreeCompleteAnimations","setInOrderSuccessorAnimations","first","textContent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport{ Transition, CSSTransition } from 'react-transition-group'\r\n\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n\r\n        this.animations = {\r\n            initial: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            },\r\n            visited: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            },\r\n            success: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            },\r\n            removed: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            }\r\n        };\r\n\r\n        this.moveAnimations = {\r\n            active: false,\r\n            delay: 0,\r\n            css: {\r\n                entering: {},\r\n                entered:  {},\r\n                exiting:  {},\r\n                exited:   {}\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.visibleClasses = {\r\n            appearDone: 'visible',\r\n            enterDone: 'visible',\r\n            exit: 'visible'\r\n        };\r\n\r\n        this.operationSteps = {\r\n            Initial: [\r\n                'Initial'\r\n            ],\r\n            Generate: [\r\n                'Reset',\r\n                'Generate'\r\n            ],\r\n            Reset: [\r\n                'Reset'\r\n            ],\r\n            Insert: [\r\n            ],\r\n            Remove: [\r\n            ],\r\n            Search: [\r\n            ],\r\n            Traversal: [\r\n            ]\r\n        };\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.errorMessage = '';\r\n        this.timeout = 0;\r\n\r\n        this.state = {\r\n            operation: this.initialStateOperation,\r\n            step: 0,\r\n            input: false,\r\n            tooltips: false,\r\n            error: false,\r\n            initial: false\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n\r\n        this.action1 = this.action1.bind(this); // temporary\r\n        this.action2 = this.action2.bind(this); // temporary\r\n        this.action3 = this.action3.bind(this); // temporary\r\n        this.action4 = this.action4.bind(this); // temporary\r\n        this.action5 = this.action5.bind(this); // temporary\r\n        this.action6 = this.action6.bind(this); // temporary\r\n        this.action7 = this.action7.bind(this); // temporary\r\n        this.action8 = this.action8.bind(this); // temporary\r\n        this.action9 = this.action9.bind(this); // temporary\r\n        this.action10 = this.action10.bind(this); // temporary\r\n        this.action11 = this.action11.bind(this); // temporary\r\n        this.action12 = this.action12.bind(this); // temporary\r\n        this.action13 = this.action13.bind(this); // temporary\r\n        this.action14 = this.action14.bind(this); // temporary\r\n    }\r\n\r\n    performOperationStep() {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Reset':\r\n                this.ResetTree();\r\n                break;\r\n            case 'Generate':\r\n                this.GenerateTree();\r\n                break;\r\n            case 'Initial':\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    advanceOperationStep() {\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            if ( this.state.step === this.operationSteps[ this.state.operation ].length - 1 ) {\r\n                this.setState({ operation: 'Initial', step: 0 });\r\n            }\r\n            else {\r\n                let _this = this;\r\n                setTimeout(function() {\r\n                    _this.setState({ step: _this.state.step + 1 })\r\n                }, _this.timeout);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ operation: 'Generate', step: 0 });\r\n        //call generate function\r\n    }\r\n\r\n    /*static getDerivedStateFromProps(newProps, state) {\r\n        //To-do: async calls and tooltips\r\n        console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n\r\n        const initialStateOperation = 'Initial';\r\n\r\n        if ( state.animating ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: state.operation, animating: false };\r\n            }\r\n            else {\r\n                return { operation: state.operation };\r\n            }\r\n        }\r\n        else if ( state.operation !== newProps.operation ) {\r\n            return { operation: newProps.operation, animating: true };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }*/\r\n\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n        if ( nextState.operation === this.initialStateOperation ) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }*/\r\n\r\n    componentDidUpdate() {\r\n        this.advanceOperationStep();\r\n    }\r\n\r\n    ResetTree() {\r\n        if (this.root) {\r\n            this.setHideAnimations();\r\n            this.timeout = 1000;\r\n        }\r\n        else {\r\n            this.timeout = 150;\r\n        }\r\n    }\r\n\r\n    GenerateTree() {\r\n        this.reset();\r\n        this.insertNumElements(15);\r\n        this.setGenerationAnimations();\r\n    }\r\n\r\n    action1() {\r\n        this.setState({ operation: 'Generate', step: 0 });\r\n    }\r\n\r\n    action2() {\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.setState({ operation: 'Reset', step: 0 });\r\n    }\r\n\r\n    action3() {\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.setHideTraversalAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action4() {\r\n        this.setDFSTraversalAnimations('In-order');\r\n        //this.setBFSTraversalAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action5(val) {\r\n        //check if tree has element first..\r\n        if ( ! this.contains(val) ) {\r\n            //show error..tree doesn't contain val\r\n        }\r\n        else {\r\n            this.targetValue = val;\r\n            this.setSearchAnimations();\r\n            this.setState({initial: true});\r\n        }\r\n    }\r\n\r\n    action6() {\r\n        //check if tree has element first..\r\n        let val = parseInt( prompt() );\r\n\r\n        if ( ! this.contains(val) ) {\r\n            //show error..tree doesn't contain val\r\n        }\r\n        else {\r\n            this.targetValue = val;\r\n            this.insert(this.targetValue);\r\n            this.setInsertAnimations();\r\n            this.setState({initial: true});\r\n        }\r\n    }\r\n\r\n    action7() {\r\n        this.setInsertionCompleteAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action8(val) {\r\n        //check if tree has element first..\r\n        if ( ! this.contains(val) ) {\r\n            //show error..tree doesn't contain val\r\n        }\r\n        else {\r\n            this.removeValue = val;\r\n            this.targetValue = val;\r\n            this.targetNode = this.root;\r\n            this.action9();\r\n        }\r\n    }\r\n\r\n    action9() {\r\n        this.setRemoveAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action10() {\r\n        this.setMoveSubtreeAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action11() {\r\n        document.querySelector('.moved').classList.remove('moved');\r\n    }\r\n\r\n    action12() {\r\n        this.setHideMoveAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action13() {\r\n        document.querySelector('.root').classList.add('moved');\r\n\r\n        this.root = this.remove(this.removeValue);\r\n        this.setHideMoveAnimations();\r\n        this.setHideTraversalAnimations();\r\n        this.setState({initial: true});\r\n    }\r\n\r\n    action14() {\r\n        this.reset();\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        this.performOperationStep();\r\n\r\n        return (\r\n            <>\r\n                <button onClick = {this.action1}>Generate new tree</button>\r\n                <button onClick = {this.action2}>Hide Tree</button>\r\n                <button onClick = {this.action3}>Hide traversals</button>\r\n                <button onClick = {this.action4}>Traversals</button>\r\n                <button onClick = {this.action5}>Search</button>\r\n                <button onClick = {this.action6}>Insert</button>\r\n                <button onClick = {this.action7}>Insert complete</button>\r\n                <button onClick = {this.action8}>Pre-Remove (call once)</button>\r\n                <button onClick = {this.action9}>Remove step 1</button>\r\n                <button onClick = {this.action10}>Remove step 2</button>\r\n                <button onClick = {this.action11}>Post remove final (call once)</button>\r\n                <button onClick = {this.action12}>Hide moves</button>\r\n                <button onClick = {this.action13}>Remove final</button>\r\n                <button onClick = {this.action14}>Reset</button>\r\n\r\n                { this.state.input ?\r\n                    <InputModal operation = {this.state.operation} callback = {this.receiveInput} />\r\n                : null }\r\n\r\n                { this.state.error ?\r\n                    <ErrorMessage message = {this.errorMessage} />\r\n                : null }\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n\r\n                {/* <Tooltips> */}\r\n            </>\r\n        );\r\n    }\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node === null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    contains(val, node = this.root) {\r\n        if ( ! node ) return false;\r\n\r\n        if (val < node.value) {\r\n            return this.contains(val, node.left);\r\n        }\r\n        else if (val > node.value) {\r\n            return this.contains(val, node.right);\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root === null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right === null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left === null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( ! val ) return;\r\n\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node === null ) {\r\n            //error\r\n        }\r\n        else if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node === null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className='node-value' />\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            const rootWidth = {\r\n                width: ( node === this.root ) ? Math.pow(2, tree_height - 1) * 70 + 'px' : null\r\n            };\r\n\r\n            return (\r\n                <>\r\n                    <Transition\r\n                        in={node.moveAnimations['active']}\r\n                        timeout={node.moveAnimations['delay']}\r\n                        appear={true}>\r\n\r\n                        {state => (\r\n\r\n                            <div\r\n                                className={classes}\r\n                                node-value={node.value}\r\n                                node-layer={tree_height - curr_height}\r\n                                style={( node === this.root ) ? rootWidth : node.moveAnimations['css'][state]}>\r\n\r\n                                <CSSTransition\r\n                                    in={node.animations['initial']['node']['active']}\r\n                                    timeout={node.animations['initial']['node']['delay']}\r\n                                    classNames={this.visibleClasses}\r\n                                    appear={true}>\r\n\r\n                                    <div className='node-value'>\r\n                                        {this.getNodeHover(node.value)}\r\n                                        {this.getCricle(node)}\r\n                                    </div>\r\n\r\n                                </CSSTransition>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n\r\n                                {this.getConnectingLine(node, pos)}\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                    </Transition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(node) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                    <circle className='circle node-circle initial' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['visited']['node']['active']}\r\n                        timeout={node.animations['visited']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background visited' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle visited' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['success']['node']['active']}\r\n                        timeout={node.animations['success']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background success' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle success' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['removed']['node']['active']}\r\n                        timeout={node.animations['removed']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background removed' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle removed' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                    \r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {node.value}\r\n                    </text>\r\n\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <span className='node-hover'>\r\n                    <i className='fas fa-search' onClick={() => this.searchNode(val)} />\r\n                    <span className='search'>\r\n                        <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n\r\n                    <i className='fas fa-trash' onClick={() => this.deleteNode(val)} />\r\n                    <span className='trash'>\r\n                        <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(node, pos) {\r\n        if (pos === 'left' || pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={node.animations['initial']['line']['active']}\r\n                        timeout={node.animations['initial']['line']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                            {this.getLine(pos, 'initial')}\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['visited']['line']['active']}\r\n                                timeout={node.animations['visited']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'visited')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['success']['line']['active']}\r\n                                timeout={node.animations['success']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'success')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['removed']['line']['active']}\r\n                                timeout={node.animations['removed']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'removed')}\r\n\r\n                            </CSSTransition>\r\n\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getLine(pos, addClass) {\r\n        const classes = ['line', addClass].join(' ');\r\n\r\n        if (pos === 'left')\r\n            return ( <line className={classes} x1='0' y1='50' x2='100%' y2='0' /> );\r\n        else if (pos === 'right')\r\n            return ( <line className={classes} x1='0' y1='0' x2='100%' y2='50' /> );\r\n        else\r\n            return null;\r\n    }\r\n\r\n    receiveInput(val) {\r\n        alert(val);\r\n    }\r\n\r\n    searchNode(val) {\r\n        this.action5(val);\r\n    }\r\n\r\n    deleteNode(val) {\r\n        this.action8(val);\r\n    }\r\n\r\n    setGenerationAnimations() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let delay = 150;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                for (let key in node.animations['initial']) {\r\n                    node.animations['initial'][key]['active'] = true;\r\n                    node.animations['initial'][key]['delay'] = delay;\r\n                }\r\n                \r\n                delay += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    setHideAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                node.animations[state][element]['active'] = false;\r\n                node.animations[state][element]['delay'] = 150;\r\n            }\r\n        }\r\n\r\n        this.setHideAnimations(node.left);\r\n        this.setHideAnimations(node.right);\r\n    }\r\n\r\n    setHideTraversalAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                if (state === 'initial') {\r\n                    node.animations[state][element]['active'] = true;\r\n                    node.animations[state][element]['delay'] = 0;\r\n                }\r\n                else {\r\n                    node.animations[state][element]['active'] = false;\r\n                    node.animations[state][element]['delay'] = 150;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setHideTraversalAnimations(node.left);\r\n        this.setHideTraversalAnimations(node.right);\r\n    }\r\n\r\n    setHideMoveAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        node.moveAnimations['active'] = false;\r\n        node.moveAnimations['delay'] = 0;\r\n\r\n        this.setHideMoveAnimations(node.left);\r\n        this.setHideMoveAnimations(node.right);\r\n    }\r\n\r\n    setDFSTraversalAnimations(order, node = this.root, delay = 150) {\r\n        if (node === null) return delay;\r\n\r\n        let _delay = node === this.root ? delay : delay + 1000;\r\n\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = _delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = _delay;\r\n\r\n        if (order === 'Pre-order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\r\n\r\n        if (order === 'In-order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\r\n\r\n        if (order === 'Post-order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        node.animations['success']['line']['active'] = true;\r\n        node.animations['success']['line']['delay'] = _delay;\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setBFSTraversalAnimations() {\r\n        let queue = new Queue();\r\n\r\n        let delay = 150;\r\n\r\n        if (this.root) {\r\n            queue.push(this.root);\r\n\r\n            this.root.animations['visited']['node']['active'] = true;\r\n            this.root.animations['visited']['node']['delay'] = delay;\r\n        }\r\n        else {\r\n            //error..tree is empty\r\n        }\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                if (node.left) {\r\n                    queue.push(node.left);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.left.animations['visited']) {\r\n                        node.left.animations['visited'][element]['active'] = true;\r\n                        node.left.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n\r\n                if (node.right) {\r\n                    queue.push(node.right);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.right.animations['visited']) {\r\n                        node.right.animations['visited'][element]['active'] = true;\r\n                        node.right.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n                \r\n                delay += 1000;\r\n                for (let element in node.animations['success']) {\r\n                    node.animations['success'][element]['active'] = true;\r\n                    node.animations['success'][element]['delay'] = delay;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setSearchAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue ) return;\r\n\r\n        if (node === null) {\r\n            if (node === this.root) {\r\n                //show error..empty tree\r\n            }\r\n        }\r\n        else {\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 1250;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                this.setSearchAnimations(node.left, delay + 1000);\r\n            else\r\n                this.setSearchAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n        }\r\n    }\r\n\r\n    setInsertAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return;\r\n        else {\r\n            if (this.targetValue === node.value) {\r\n                this.targetNode = node;\r\n                return;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                this.setInsertAnimations(node.left, delay + 1000);\r\n            else\r\n                this.setInsertAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n        }\r\n    }\r\n\r\n    setInsertionCompleteAnimations() {\r\n        let node = this.targetNode;\r\n\r\n        if ( node ) {\r\n            node.animations['initial']['node']['active'] = true;\r\n            node.animations['initial']['node']['delay'] = 650;\r\n            node.animations['initial']['line']['active'] = true;\r\n            node.animations['initial']['line']['delay'] = 150;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = 1250;\r\n        }\r\n    }\r\n\r\n    setRemoveAnimations(node = this.targetNode, delay = 150) {\r\n        if ( ! this.targetValue ) return;\r\n\r\n        if (node === null) {\r\n            if (node === this.root) {\r\n                //show error..empty tree\r\n            }\r\n        }\r\n        else {    \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = false;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = false;\r\n                node.animations['success']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = true;\r\n                node.animations['removed']['node']['delay'] = delay + 1500;\r\n                node.animations['removed']['line']['active'] = true;\r\n                node.animations['removed']['line']['delay'] = delay + 1000;\r\n\r\n                node.animations['initial']['node']['active'] = false;\r\n                node.animations['initial']['node']['delay'] = delay + 1500;\r\n                node.animations['initial']['line']['active'] = false;\r\n                node.animations['initial']['line']['delay'] = delay + 1500;\r\n\r\n                this.targetNode = node;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                this.setRemoveAnimations(node.left, delay + 1000);\r\n            else\r\n                this.setRemoveAnimations(node.right, delay + 1000);\r\n        }\r\n    }\r\n\r\n    setMoveSubtreeAnimations() {\r\n        let node = this.targetNode;\r\n\r\n        if ( node ) {\r\n            if ( node.left === null || node.right === null ) {\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = 3000;\r\n    \r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = 150;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = 150;\r\n    \r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = 150;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = 150;\r\n    \r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = 3500;\r\n\r\n                if ( node.left === null && node.right === null ) {\r\n                    node.animations['initial']['line']['active'] = false;\r\n                    node.animations['initial']['line']['delay'] = 0;\r\n\r\n                    node.animations['success']['line']['active'] = false;\r\n                    node.animations['success']['line']['delay'] = 0;\r\n                }\r\n                else if ( node.left === null ) {\r\n                    node.right.animations['initial']['line']['active'] = false;\r\n                    node.right.animations['initial']['line']['delay'] = 150;\r\n                    \r\n                    node.right.moveAnimations['active'] = true;\r\n                    node.right.moveAnimations['delay'] = 1000;\r\n                    node.right.moveAnimations['css']['entered'] = {\r\n                        'width': '100%',\r\n                        'zIndex': '1000',\r\n                        'transform': 'translate(-50%, -50px)'\r\n                    };\r\n    \r\n                    this.setMoveSubtreeCompleteAnimations(node.right);\r\n                }\r\n                else if ( node.right === null ) {\r\n                    node.left.animations['initial']['line']['active'] = false;\r\n                    node.left.animations['initial']['line']['delay'] = 150;\r\n                    \r\n                    node.left.moveAnimations['active'] = true;\r\n                    node.left.moveAnimations['delay'] = 1000;\r\n                    node.left.moveAnimations['css']['entered'] = {\r\n                        'width': '100%',\r\n                        'zIndex': '1000',\r\n                        'transform': 'translate(0, -50px)'\r\n                    };\r\n    \r\n                    this.setMoveSubtreeCompleteAnimations(node.left);\r\n                }\r\n            }\r\n            else {\r\n                let delay = this.setInOrderSuccessorAnimations(node.right);\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = delay;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = delay;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = delay;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['initial']['node']['active'] = true;\r\n                node.animations['initial']['node']['delay'] = delay;\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = delay + 500;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 500;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n            }\r\n        }\r\n    }\r\n\r\n    setMoveSubtreeCompleteAnimations(node, delay = 4000, first = true) {\r\n        if (node) {\r\n            if (first) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n            }\r\n            else {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n            }\r\n\r\n            this.setMoveSubtreeCompleteAnimations(node.left, delay + 300, false);\r\n            this.setMoveSubtreeCompleteAnimations(node.right, delay + 300, false);\r\n        }\r\n    }\r\n\r\n    setInOrderSuccessorAnimations(node, delay = 150) {\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = delay;\r\n\r\n        if ( node.left ) {\r\n            return this.setInOrderSuccessorAnimations(node.left, delay + 1000);\r\n        }\r\n        else {\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = delay + 1500;\r\n            node.animations['success']['line']['active'] = true;\r\n            node.animations['success']['line']['delay'] = delay + 1000;\r\n\r\n            document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]>.node-value .node-value-text').textContent = node.value;\r\n\r\n            this.targetNode = node;\r\n            this.targetValue = node.value;\r\n\r\n            return delay + 1500;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}