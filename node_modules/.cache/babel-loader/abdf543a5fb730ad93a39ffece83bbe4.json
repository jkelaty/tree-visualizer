{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\TreeVisualizer.jsx\";\nimport React from 'react';\nimport NavigationBar from './NavigationBar/NavigationBar.jsx';\nimport Tooltips from './Tooltips/Tooltips.jsx';\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx';\nimport './TreeVisualizer.scss';\nexport default class TreeVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.state = {\n      tree: 'BST',\n      menu_key: 'BST',\n      operation: this.initialStateOperation\n    };\n    this.performOperation = this.performOperation.bind(this);\n    this.toggleTooltips = this.toggleTooltips.bind(this);\n    this.changeTree = this.changeTree.bind(this);\n  }\n\n  performOperation(operation) {\n    this.setState({\n      operation: operation\n    });\n  }\n\n  toggleTooltips() {//To-Do\n  }\n\n  changeTree(tree_key) {\n    /* To-Do\r\n     * 1. reset tree\r\n     * 2. set operation to initial and change tree key\r\n     */\n  }\n\n  Tree() {\n    return React.createElement(React.Fragment, null, this.state.tree === 'BST' ? React.createElement(BinarySearchTree, {\n      operation: this.state.operation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }) : null);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(NavigationBar, {\n      visualizer: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), this.Tree(), React.createElement(Tooltips, {\n      active: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }));\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.tree !== this.state.tree) {\n      return true;\n    } else if (nextState.operation === this.initialStateOperation) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.operation !== this.initialStateOperation) {\n      this.setState({\n        operation: this.initialStateOperation\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/TreeVisualizer.jsx"],"names":["React","NavigationBar","Tooltips","BinarySearchTree","TreeVisualizer","Component","constructor","props","initialStateOperation","state","tree","menu_key","operation","performOperation","bind","toggleTooltips","changeTree","setState","tree_key","Tree","render","shouldComponentUpdate","nextProps","nextState","componentDidUpdate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,OAAOC,gBAAP,MAA6B,+CAA7B;AAEA,OAAO,uBAAP;AAGA,eAAe,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,qBAAL,GAA6B,SAA7B;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,KADG;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,SAAS,EAAE,KAAKJ;AAHP,KAAb;AAMA,SAAKK,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,cAAL,GAAwB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAxB;AACA,SAAKE,UAAL,GAAwB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAxB;AACH;;AAEDD,EAAAA,gBAAgB,CAACD,SAAD,EAAY;AACxB,SAAKK,QAAL,CAAc;AAAEL,MAAAA,SAAS,EAAEA;AAAb,KAAd;AACH;;AAEDG,EAAAA,cAAc,GAAG,CACb;AACH;;AAEDC,EAAAA,UAAU,CAACE,QAAD,EAAW;AACjB;;;;AAIH;;AAEDC,EAAAA,IAAI,GAAG;AACH,WACI,0CACM,KAAKV,KAAL,CAAWC,IAAX,KAAoB,KAApB,GACE,oBAAC,gBAAD;AAAkB,MAAA,SAAS,EAAI,KAAKD,KAAL,CAAWG,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAEA,IAHN,CADJ;AAOH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,WACI,0CACI,oBAAC,aAAD;AAAe,MAAA,UAAU,EAAI,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGM,KAAKD,IAAL,EAHN,EAKI,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAI,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AAEDE,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,QAAKA,SAAS,CAACb,IAAV,KAAmB,KAAKD,KAAL,CAAWC,IAAnC,EAA0C;AACtC,aAAO,IAAP;AACH,KAFD,MAGK,IAAKa,SAAS,CAACX,SAAV,KAAwB,KAAKJ,qBAAlC,EAA0D;AAC3D,aAAO,KAAP;AACH,KAFI,MAGA;AACD,aAAO,IAAP;AACH;AACJ;;AAEDgB,EAAAA,kBAAkB,GAAG;AACjB,QAAK,KAAKf,KAAL,CAAWG,SAAX,KAAyB,KAAKJ,qBAAnC,EAA2D;AACvD,WAAKS,QAAL,CAAc;AAAEL,QAAAA,SAAS,EAAE,KAAKJ;AAAlB,OAAd;AACH;AACJ;;AAtEuD","sourcesContent":["import React from 'react';\r\n\r\nimport NavigationBar from './NavigationBar/NavigationBar.jsx'\r\nimport Tooltips from './Tooltips/Tooltips.jsx'\r\n\r\nimport BinarySearchTree from './Trees/BinarySearchTree/BinarySearchTree.jsx'\r\n\r\nimport './TreeVisualizer.scss';\r\n\r\n\r\nexport default class TreeVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.state = {\r\n            tree: 'BST',\r\n            menu_key: 'BST',\r\n            operation: this.initialStateOperation\r\n        };\r\n\r\n        this.performOperation = this.performOperation.bind(this);\r\n        this.toggleTooltips   = this.toggleTooltips.bind(this);\r\n        this.changeTree       = this.changeTree.bind(this);\r\n    }\r\n\r\n    performOperation(operation) {\r\n        this.setState({ operation: operation });\r\n    }\r\n\r\n    toggleTooltips() {\r\n        //To-Do\r\n    }\r\n\r\n    changeTree(tree_key) {\r\n        /* To-Do\r\n         * 1. reset tree\r\n         * 2. set operation to initial and change tree key\r\n         */\r\n    }\r\n\r\n    Tree() {\r\n        return (\r\n            <>\r\n                { this.state.tree === 'BST' ?\r\n                    <BinarySearchTree operation = {this.state.operation} />\r\n                : null }\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <NavigationBar visualizer = {this} />\r\n                \r\n                { this.Tree() }\r\n\r\n                <Tooltips active = {false} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if ( nextState.tree !== this.state.tree ) {\r\n            return true;\r\n        }\r\n        else if ( nextState.operation === this.initialStateOperation ) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            this.setState({ operation: this.initialStateOperation });\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}