{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Kelaty\\\\Desktop\\\\TreeVisualizer\\\\tree-visualizer\\\\src\\\\TreeVisualizer\\\\Trees\\\\BinarySearchTree\\\\BinarySearchTree.jsx\";\nimport React from 'react';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport InputModal from '../../Additional/InputModal/InputModal.jsx';\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx';\nimport Queue from '../../Additional/Queue.js';\nimport { randomIntFromInverval } from '../../Additional/Helpers.js';\nimport './BinarySearchTree.scss';\n\nclass BinarySearchTreeNode {\n  constructor(val) {\n    this.value = val;\n    this.left = null;\n    this.right = null;\n    this.animations = {\n      initial: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      visited: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      success: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      },\n      removed: {\n        node: {\n          active: false,\n          delay: 0\n        },\n        line: {\n          active: false,\n          delay: 0\n        }\n      }\n    };\n    this.moveAnimations = {\n      active: false,\n      delay: 0,\n      css: {\n        entering: {},\n        entered: {},\n        exiting: {},\n        exited: {}\n      }\n    };\n  }\n\n}\n\nexport default class BinarySearchTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialStateOperation = 'Initial';\n    this.visibleClasses = {\n      appearDone: 'visible',\n      enterDone: 'visible',\n      exit: 'visible'\n    };\n    this.operationSteps = {\n      Initial: ['Initial'],\n      Generate: ['Reset', 'Generate'],\n      Reset: ['Hide', 'Reset'],\n      Insert: ['Input', 'Insert', 'Complete'],\n      Remove: ['Input', 'Remove 1', 'Remove 2', 'Remove 3', 'Remove 4', 'Complete'],\n      Search: ['Input', 'Search'],\n      Traversal: ['Traverse']\n    };\n    this.name = 'BinarySearchTree';\n    this.key = 'BST';\n    this.root = null;\n    this.removeValue = null;\n    this.targetValue = null;\n    this.targetNode = null;\n    this.traversal = null;\n    this.timeout = 0;\n    this.input = false;\n    this.state = {\n      operation: this.initialStateOperation,\n      step: 0,\n      tooltips: false\n    };\n    this.receiveInput = this.receiveInput.bind(this);\n    this.action1 = this.action1.bind(this); // temporary\n\n    this.action2 = this.action2.bind(this); // temporary\n\n    this.action3 = this.action3.bind(this); // temporary\n\n    this.action4 = this.action4.bind(this); // temporary\n\n    this.action5 = this.action5.bind(this); // temporary\n\n    this.action6 = this.action6.bind(this); // temporary\n  }\n\n  componentDidMount() {\n    this.setState({\n      operation: 'Generate',\n      step: 0\n    });\n  }\n  /*static getDerivedStateFromProps(newProps, state) {\r\n      //To-do: async calls and tooltips\r\n      console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n      console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n        const initialStateOperation = 'Initial';\r\n        if ( state.animating ) {\r\n          if ( state.operation === initialStateOperation ) {\r\n              return { operation: state.operation, animating: false };\r\n          }\r\n          else {\r\n              return { operation: state.operation };\r\n          }\r\n      }\r\n      else if ( state.operation !== newProps.operation ) {\r\n          return { operation: newProps.operation, animating: true };\r\n      }\r\n      else {\r\n          return null;\r\n      }\r\n  }*/\n\n  /*shouldComponentUpdate(nextProps, nextState) {\r\n      console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n      if ( nextState.operation === this.initialStateOperation ) {\r\n          return false;\r\n      }\r\n      else {\r\n          return true;\r\n      }\r\n  }*/\n\n\n  componentDidUpdate() {\n    this.advanceOperationStep();\n  }\n\n  performOperationStep() {\n    switch (this.state.operation) {\n      case 'Generate':\n        this.GenerateTree();\n        break;\n\n      case 'Reset':\n        this.ResetTree();\n        break;\n\n      case 'Insert':\n        this.InsertInTree();\n        break;\n\n      case 'Remove':\n        this.RemoveFromTree();\n        break;\n\n      case 'Search':\n        this.SearchTree();\n        break;\n\n      case 'Traversal':\n        this.TraverseTree();\n        break;\n\n      case 'Initial':\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  advanceOperationStep() {\n    if (this.state.operation !== this.initialStateOperation) {\n      if (this.state.step >= this.operationSteps[this.state.operation].length - 1) {\n        let _this = this;\n\n        setTimeout(function () {\n          _this.setState({\n            operation: 'Initial',\n            step: 0\n          });\n        }, _this.timeout);\n      } else {\n        switch (this.operationSteps[this.state.operation][this.state.step]) {\n          case 'Input':\n            return;\n\n          default:\n        }\n\n        let _this = this;\n\n        setTimeout(function () {\n          _this.setState({\n            step: _this.state.step + 1\n          });\n        }, _this.timeout);\n      }\n    }\n  }\n\n  InitialTree() {\n    this.removeValue = null;\n    this.targetValue = null;\n    this.targetNode = null;\n    this.traversal = null;\n    this.timeout = 0;\n    this.setHideTraversalAnimations();\n    this.setHideMoveAnimations();\n\n    if (document.querySelector('.moved')) {\n      document.querySelector('.moved').classList.remove('moved');\n    }\n  }\n\n  GenerateTree() {\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Reset':\n        if (this.root) {\n          this.setHideAnimations();\n          this.timeout = 1000;\n        } else {\n          this.timeout = 0;\n        }\n\n        break;\n\n      case 'Generate':\n        this.reset();\n        this.insertNumElements(15);\n        this.setGenerationAnimations();\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  ResetTree() {\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Hide':\n        if (this.root) {\n          this.setHideAnimations();\n          this.timeout = 1000;\n        } else {\n          this.timeout = 0;\n        }\n\n        break;\n\n      case 'Reset':\n        this.reset();\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  InsertInTree(val) {\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Input':\n        this.input = true;\n        break;\n\n      case 'Insert':\n        if (this.targetValue) {\n          if (!this.contains(this.targetValue)) {\n            this.insert(this.targetValue);\n            this.timeout = this.setInsertAnimations();\n          } else {//show error?... already contains element\n          }\n        } else {//show error?... invalid element (cancel)\n          }\n\n        break;\n\n      case 'Complete':\n        if (this.targetValue) {\n          this.setInsertionCompleteAnimations();\n          this.timeout = 5000;\n        }\n\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  RemoveFromTree() {\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Input':\n        if (this.root) {\n          this.input = true;\n        } else {//show error... tree is empty\n        }\n\n        break;\n\n      case 'Remove 1':\n        if (this.targetValue) {\n          this.timeout = this.setRemoveAnimations() + 3000;\n        } else {//show error?... invalid element (cancel)\n        }\n\n        break;\n\n      case 'Remove 2':\n        if (this.targetValue) {\n          this.timeout = this.setMoveSubtreeAnimations() + 3000;\n        }\n\n        break;\n\n      case 'Remove 3':\n        if (this.targetValue) {\n          if (this.targetNode) {\n            this.timeout = this.setRemoveAnimations() + 3000;\n          }\n        } else {\n          this.timeout = 0;\n        }\n\n        break;\n\n      case 'Remove 4':\n        if (this.targetValue) {\n          if (this.targetNode) {\n            this.timeout = this.setMoveSubtreeAnimations() + 3000;\n          }\n        }\n\n        break;\n\n      case 'Complete':\n        if (this.targetValue) {\n          this.root = this.remove(this.removeValue);\n          this.setHideMoveAnimations();\n          this.setHideTraversalAnimations();\n          document.querySelector('.root').classList.add('moved');\n          this.timeout = 10000;\n        }\n\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  SearchTree() {\n    switch (this.operationSteps[this.state.operation][this.state.step]) {\n      case 'Input':\n        if (this.root) {\n          this.input = true;\n        } else {//show error... tree is empty\n        }\n\n        break;\n\n      case 'Search':\n        if (this.targetValue) {\n          if (this.contains(this.targetValue)) {\n            this.timeout = this.setSearchAnimations() + 7000;\n          } else {//show error?... tree does not contain element (or maybe after animation)\n          }\n        } else {//show error?... invalid element (cancel)\n          }\n\n        break;\n\n      default:\n        this.InitialTree();\n        break;\n    }\n  }\n\n  TraverseTree() {\n    if (this.root) {\n      switch (this.traversal) {\n        case 'Pre-Order':\n        case 'In-Order':\n        case 'Post-Order':\n          this.timeout = this.setDFSTraversalAnimations(this.traversal) + 5000;\n          break;\n\n        case 'Level Order':\n          this.timeout = this.setBFSTraversalAnimations() + 5000;\n          break;\n\n        default:\n          this.InitialTree();\n          break;\n      }\n    } else {//show error... tree is empty\n    }\n  }\n\n  receiveInput(val) {\n    this.targetValue = val;\n    this.input = false;\n\n    if (this.state.operation === 'Remove') {\n      this.deleteNode(val);\n    } else {\n      this.setState({\n        step: this.state.step + 1\n      });\n    }\n  }\n\n  searchNode(val) {\n    this.targetValue = val;\n    this.setState({\n      operation: 'Search',\n      step: 1\n    });\n  }\n\n  deleteNode(val) {\n    this.targetValue = val;\n    this.removeValue = val;\n    this.targetNode = this.root;\n    this.setState({\n      operation: 'Remove',\n      step: 1\n    });\n  }\n\n  action1() {\n    this.setState({\n      operation: 'Generate',\n      step: 0\n    });\n  }\n\n  action2() {\n    this.setState({\n      operation: 'Reset',\n      step: 0\n    });\n  }\n\n  action3() {\n    this.setState({\n      operation: 'Insert',\n      step: 0\n    });\n  }\n\n  action4() {\n    this.traversal = 'Level Order';\n    this.setState({\n      operation: 'Traversal',\n      step: 0\n    });\n  }\n\n  action5(val) {\n    this.setState({\n      operation: 'Search',\n      step: 0\n    });\n  }\n\n  action6() {\n    this.setState({\n      operation: 'Remove',\n      step: 0\n    });\n  }\n\n  render() {\n    this.performOperationStep();\n    console.log(this.state);\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: this.action1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"Generate\"), React.createElement(\"button\", {\n      onClick: this.action2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"button\", {\n      onClick: this.action3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, \"Insert\"), React.createElement(\"button\", {\n      onClick: this.action4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"Traversal\"), React.createElement(\"button\", {\n      onClick: this.action5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"Search\"), React.createElement(\"button\", {\n      onClick: this.action6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, \"Remove\"), this.input ? React.createElement(InputModal, {\n      operation: this.state.operation,\n      callback: this.receiveInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }) : null, this.error ? React.createElement(ErrorMessage, {\n      message: this.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }) : null, React.createElement(\"div\", {\n      id: this.name,\n      className: \"tree\",\n      style: {\n        transform: this.getScaleFactor()\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, this.Tree()), this.state.tooltips ? {\n      /* <Tooltips /> */\n    } : null);\n  }\n\n  insertNumElements(elements) {\n    for (let i = 0; i < elements; ++i) {\n      let val = randomIntFromInverval(1, 150);\n\n      if (this.insert(val)) {\n        if (this.height() > 5) {\n          this.root = this.remove(val);\n          --i;\n        }\n      } else {\n        --i;\n      }\n    }\n  }\n\n  reset() {\n    this.root = null;\n  }\n\n  height(node = this.root) {\n    if (node === null) return 0;\n    return Math.max(this.height(node.left), this.height(node.right)) + 1;\n  }\n\n  contains(val, node = this.root) {\n    if (!node) return false;\n\n    if (val < node.value) {\n      return this.contains(val, node.left);\n    } else if (val > node.value) {\n      return this.contains(val, node.right);\n    } else {\n      return true;\n    }\n  }\n\n  insert(val) {\n    if (this.root === null) {\n      this.root = new BinarySearchTreeNode(val);\n      return true;\n    }\n\n    let curr = this.root;\n\n    while (true) {\n      if (curr.value === val) {\n        //tree contains key already\n        return false;\n      } else if (curr.value < val) {\n        if (curr.right === null) {\n          curr.right = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.right;\n      } else {\n        if (curr.left === null) {\n          curr.left = new BinarySearchTreeNode(val);\n          return true;\n        }\n\n        curr = curr.left;\n      }\n    }\n  }\n\n  remove(val, node = this.root) {\n    if (!val) return;\n    if (node === null) return node;\n\n    if (val < node.value) {\n      node.left = this.remove(val, node.left);\n    } else if (val > node.value) {\n      node.right = this.remove(val, node.right);\n    } else {\n      if (node.left === null) {\n        return node.right;\n      } else if (node.right === null) {\n        return node.left;\n      } else {\n        node.value = this.inOrderSuccessor(node.right);\n        node.right = this.remove(node.value, node.right);\n      }\n    }\n\n    return node;\n  }\n\n  inOrderSuccessor(node) {\n    if (node === null) {//error\n    } else if (node.left !== null) {\n      return this.inOrderSuccessor(node.left);\n    } else {\n      return node.value;\n    }\n  }\n\n  getScaleFactor() {\n    let scale_factor = (window.innerWidth - 20) / (Math.pow(2, this.height() - 1) * 70);\n    return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\n  }\n\n  Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\n    if (curr_height === tree_height) return null;\n    const leftChild = this.Tree(node ? node.left : null, tree_height, curr_height + 1, 'left');\n    const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\n    const classes = ['node-wrapper', pos].join(' ');\n\n    if (node === null) {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": \"null\",\n        \"node-layer\": tree_height - curr_height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622\n        },\n        __self: this\n      }), leftChild, rightChild));\n    } else {\n      const rootWidth = {\n        width: node === this.root ? Math.pow(2, tree_height - 1) * 70 + 'px' : null\n      };\n      return React.createElement(React.Fragment, null, React.createElement(Transition, {\n        in: node.moveAnimations['active'],\n        timeout: node.moveAnimations['delay'],\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      }, state => React.createElement(\"div\", {\n        className: classes,\n        \"node-value\": node.value,\n        \"node-layer\": tree_height - curr_height,\n        style: node === this.root ? rootWidth : node.moveAnimations['css'][state],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644\n        },\n        __self: this\n      }, React.createElement(CSSTransition, {\n        in: node.animations['initial']['node']['active'],\n        timeout: node.animations['initial']['node']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"node-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656\n        },\n        __self: this\n      }, this.getNodeHover(node.value), this.getCricle(node))), leftChild, rightChild, this.getConnectingLine(node, pos))));\n    }\n  }\n\n  getCricle(node) {\n    return React.createElement(React.Fragment, null, React.createElement(\"svg\", {\n      className: \"circle node-value-circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle initial\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }), React.createElement(CSSTransition, {\n      in: node.animations['visited']['node']['active'],\n      timeout: node.animations['visited']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background visited\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle visited\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }))), React.createElement(CSSTransition, {\n      in: node.animations['success']['node']['active'],\n      timeout: node.animations['success']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background success\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle success\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }))), React.createElement(CSSTransition, {\n      in: node.animations['removed']['node']['active'],\n      timeout: node.animations['removed']['node']['delay'],\n      classNames: this.visibleClasses,\n      appear: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle node-circle-traversal\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-circle-background removed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle node-circle removed\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }))), React.createElement(\"text\", {\n      className: \"text node-value-text\",\n      x: \"50%\",\n      y: \"50%\",\n      fill: \"black\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723\n      },\n      __self: this\n    }, node.value)));\n  }\n\n  getNodeHover(val) {\n    return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: \"node-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      onClick: () => this.searchNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }))), React.createElement(\"i\", {\n      className: \"fas fa-trash\",\n      onClick: () => this.deleteNode(val),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"trash\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      className: \"circle\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle node-hover-circle\",\n      r: \"24\",\n      cx: \"25\",\n      cy: \"25\",\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    })))));\n  }\n\n  getConnectingLine(node, pos) {\n    if (pos === 'left' || pos === 'right') {\n      return React.createElement(React.Fragment, null, React.createElement(CSSTransition, {\n        in: node.animations['initial']['line']['active'],\n        timeout: node.animations['initial']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 758\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        className: \"line node-line\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 764\n        },\n        __self: this\n      }, this.getLine(pos, 'initial'), React.createElement(CSSTransition, {\n        in: node.animations['visited']['line']['active'],\n        timeout: node.animations['visited']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 768\n        },\n        __self: this\n      }, this.getLine(pos, 'visited')), React.createElement(CSSTransition, {\n        in: node.animations['success']['line']['active'],\n        timeout: node.animations['success']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778\n        },\n        __self: this\n      }, this.getLine(pos, 'success')), React.createElement(CSSTransition, {\n        in: node.animations['removed']['line']['active'],\n        timeout: node.animations['removed']['line']['delay'],\n        classNames: this.visibleClasses,\n        appear: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 788\n        },\n        __self: this\n      }, this.getLine(pos, 'removed')))));\n    } else {\n      return null;\n    }\n  }\n\n  getLine(pos, addClass) {\n    const classes = ['line', addClass].join(' ');\n    if (pos === 'left') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"50\",\n      x2: \"100%\",\n      y2: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    });else if (pos === 'right') return React.createElement(\"line\", {\n      className: classes,\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"100%\",\n      y2: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    });else return null;\n  }\n\n  setGenerationAnimations() {\n    let queue = new Queue();\n    queue.push(this.root);\n    let delay = 150;\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        queue.push(node.left);\n        queue.push(node.right);\n\n        for (let key in node.animations['initial']) {\n          node.animations['initial'][key]['active'] = true;\n          node.animations['initial'][key]['delay'] = delay;\n        }\n\n        delay += 200;\n      }\n    }\n  }\n\n  setHideAnimations(node = this.root) {\n    if (node === null) return;\n\n    for (let state in node.animations) {\n      for (let element in node.animations[state]) {\n        node.animations[state][element]['active'] = false;\n        node.animations[state][element]['delay'] = 150;\n      }\n    }\n\n    this.setHideAnimations(node.left);\n    this.setHideAnimations(node.right);\n  }\n\n  setHideTraversalAnimations(node = this.root) {\n    if (node === null) return;\n\n    for (let state in node.animations) {\n      for (let element in node.animations[state]) {\n        if (state === 'initial') {\n          node.animations[state][element]['active'] = true;\n          node.animations[state][element]['delay'] = 0;\n        } else {\n          node.animations[state][element]['active'] = false;\n          node.animations[state][element]['delay'] = 150;\n        }\n      }\n    }\n\n    this.setHideTraversalAnimations(node.left);\n    this.setHideTraversalAnimations(node.right);\n  }\n\n  setHideMoveAnimations(node = this.root) {\n    if (node === null) return;\n    node.moveAnimations['active'] = false;\n    node.moveAnimations['delay'] = 0;\n    this.setHideMoveAnimations(node.left);\n    this.setHideMoveAnimations(node.right);\n  }\n\n  setDFSTraversalAnimations(order, node = this.root, delay = 150) {\n    if (node === null) return delay;\n\n    let _delay = node === this.root ? delay : delay + 1000;\n\n    node.animations['visited']['node']['active'] = true;\n    node.animations['visited']['node']['delay'] = _delay + 500;\n    node.animations['visited']['line']['active'] = true;\n    node.animations['visited']['line']['delay'] = _delay;\n\n    if (order === 'Pre-Order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\n\n    if (order === 'In-Order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\n\n    if (order === 'Post-Order') {\n      _delay += 1000;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = _delay;\n    }\n\n    node.animations['success']['line']['active'] = true;\n    node.animations['success']['line']['delay'] = _delay;\n    return _delay;\n  }\n\n  setBFSTraversalAnimations() {\n    let queue = new Queue();\n    let delay = 150;\n\n    if (this.root) {\n      queue.push(this.root);\n      this.root.animations['visited']['node']['active'] = true;\n      this.root.animations['visited']['node']['delay'] = delay;\n    } else {//error..tree is empty\n    }\n\n    while (!queue.empty()) {\n      let node = queue.front();\n\n      if (node) {\n        if (node.left) {\n          queue.push(node.left);\n          delay += 1000;\n\n          for (let element in node.left.animations['visited']) {\n            node.left.animations['visited'][element]['active'] = true;\n            node.left.animations['visited'][element]['delay'] = delay;\n          }\n        }\n\n        if (node.right) {\n          queue.push(node.right);\n          delay += 1000;\n\n          for (let element in node.right.animations['visited']) {\n            node.right.animations['visited'][element]['active'] = true;\n            node.right.animations['visited'][element]['delay'] = delay;\n          }\n        }\n\n        delay += 1000;\n\n        for (let element in node.animations['success']) {\n          node.animations['success'][element]['active'] = true;\n          node.animations['success'][element]['delay'] = delay;\n        }\n      }\n    }\n\n    return delay;\n  }\n\n  setSearchAnimations(node = this.root, delay = 150) {\n    if (!this.targetValue || !node) return delay;else {\n      let _delay = delay;\n\n      if (this.targetValue === node.value) {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay + 1250;\n      } else if (this.targetValue < node.value) _delay = this.setSearchAnimations(node.left, delay + 1000);else _delay = this.setSearchAnimations(node.right, delay + 1000);\n\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n      return _delay;\n    }\n  }\n\n  setInsertAnimations(node = this.root, delay = 150) {\n    if (!this.targetValue || !node) return delay;else {\n      let _delay = delay;\n\n      if (this.targetValue === node.value) {\n        this.targetNode = node;\n        return _delay;\n      } else if (this.targetValue < node.value) _delay = this.setInsertAnimations(node.left, delay + 1000);else _delay = this.setInsertAnimations(node.right, delay + 1000);\n\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n      return _delay;\n    }\n  }\n\n  setInsertionCompleteAnimations() {\n    let node = this.targetNode;\n\n    if (node) {\n      node.animations['initial']['node']['active'] = true;\n      node.animations['initial']['node']['delay'] = 650;\n      node.animations['initial']['line']['active'] = true;\n      node.animations['initial']['line']['delay'] = 150;\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = 1250;\n    }\n  }\n\n  setRemoveAnimations(node = this.targetNode, delay = 150) {\n    if (!this.targetValue || !node) return delay;else {\n      node.animations['visited']['node']['active'] = true;\n      node.animations['visited']['node']['delay'] = delay + 500;\n      node.animations['visited']['line']['active'] = true;\n      node.animations['visited']['line']['delay'] = delay;\n\n      if (this.targetValue === node.value) {\n        node.animations['success']['node']['active'] = false;\n        node.animations['success']['node']['delay'] = delay;\n        node.animations['success']['line']['active'] = false;\n        node.animations['success']['line']['delay'] = delay;\n        node.animations['removed']['node']['active'] = true;\n        node.animations['removed']['node']['delay'] = delay + 1500;\n        node.animations['removed']['line']['active'] = true;\n        node.animations['removed']['line']['delay'] = delay + 1000;\n        node.animations['initial']['node']['active'] = false;\n        node.animations['initial']['node']['delay'] = delay + 1500;\n        node.animations['initial']['line']['active'] = false;\n        node.animations['initial']['line']['delay'] = delay + 1500;\n        this.targetNode = node;\n      } else if (this.targetValue < node.value) return this.setRemoveAnimations(node.left, delay + 1000);else return this.setRemoveAnimations(node.right, delay + 1000);\n\n      return delay;\n    }\n  }\n\n  setMoveSubtreeAnimations() {\n    let node = this.targetNode;\n    let _delay = 0;\n\n    if (node) {\n      if (node.left === null || node.right === null) {\n        node.animations['initial']['line']['active'] = true;\n        node.animations['initial']['line']['delay'] = 3000;\n        node.animations['visited']['node']['active'] = false;\n        node.animations['visited']['node']['delay'] = 150;\n        node.animations['visited']['line']['active'] = false;\n        node.animations['visited']['line']['delay'] = 150;\n        node.animations['removed']['node']['active'] = false;\n        node.animations['removed']['node']['delay'] = 150;\n        node.animations['removed']['line']['active'] = false;\n        node.animations['removed']['line']['delay'] = 150;\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = 3500;\n\n        if (node.left === null && node.right === null) {\n          node.animations['initial']['line']['active'] = false;\n          node.animations['initial']['line']['delay'] = 0;\n          node.animations['success']['line']['active'] = false;\n          node.animations['success']['line']['delay'] = 0;\n        } else if (node.left === null) {\n          node.right.animations['initial']['line']['active'] = false;\n          node.right.animations['initial']['line']['delay'] = 150;\n          node.right.moveAnimations['active'] = true;\n          node.right.moveAnimations['delay'] = 1000;\n          node.right.moveAnimations['css']['entered'] = {\n            'width': '100%',\n            'zIndex': '1000',\n            'transform': 'translate(-50%, -50px)'\n          };\n          _delay = this.setMoveSubtreeCompleteAnimations(node.right);\n        } else if (node.right === null) {\n          node.left.animations['initial']['line']['active'] = false;\n          node.left.animations['initial']['line']['delay'] = 150;\n          node.left.moveAnimations['active'] = true;\n          node.left.moveAnimations['delay'] = 1000;\n          node.left.moveAnimations['css']['entered'] = {\n            'width': '100%',\n            'zIndex': '1000',\n            'transform': 'translate(0, -50px)'\n          };\n          _delay = this.setMoveSubtreeCompleteAnimations(node.left);\n        }\n\n        this.targetNode = null;\n      } else {\n        let delay = this.setInOrderSuccessorAnimations(node.right);\n        delay += 1000;\n        node.animations['visited']['node']['active'] = false;\n        node.animations['visited']['node']['delay'] = delay;\n        node.animations['visited']['line']['active'] = false;\n        node.animations['visited']['line']['delay'] = delay;\n        node.animations['removed']['node']['active'] = false;\n        node.animations['removed']['node']['delay'] = delay;\n        node.animations['removed']['line']['active'] = false;\n        node.animations['removed']['line']['delay'] = delay;\n        delay += 1000;\n        node.animations['initial']['node']['active'] = true;\n        node.animations['initial']['node']['delay'] = delay;\n        node.animations['initial']['line']['active'] = true;\n        node.animations['initial']['line']['delay'] = delay + 500;\n        delay += 1000;\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay + 500;\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = delay;\n        _delay = delay;\n      }\n    }\n\n    return _delay;\n  }\n\n  setMoveSubtreeCompleteAnimations(node, delay = 4000, first = true) {\n    let _delay = delay;\n\n    if (node) {\n      if (first) {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay;\n      } else {\n        node.animations['success']['node']['active'] = true;\n        node.animations['success']['node']['delay'] = delay;\n        node.animations['success']['line']['active'] = true;\n        node.animations['success']['line']['delay'] = delay;\n      }\n\n      _delay = Math.max(this.setMoveSubtreeCompleteAnimations(node.left, delay + 300, false), this.setMoveSubtreeCompleteAnimations(node.right, delay + 300, false));\n    }\n\n    return _delay;\n  }\n\n  setInOrderSuccessorAnimations(node, delay = 150) {\n    node.animations['visited']['node']['active'] = true;\n    node.animations['visited']['node']['delay'] = delay + 500;\n    node.animations['visited']['line']['active'] = true;\n    node.animations['visited']['line']['delay'] = delay;\n\n    if (node.left) {\n      return this.setInOrderSuccessorAnimations(node.left, delay + 1000);\n    } else {\n      node.animations['success']['node']['active'] = true;\n      node.animations['success']['node']['delay'] = delay + 1500;\n      node.animations['success']['line']['active'] = true;\n      node.animations['success']['line']['delay'] = delay + 1000;\n      document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]>.node-value .node-value-text').textContent = node.value;\n      this.targetNode = node;\n      this.targetValue = node.value;\n      return delay + 1500;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Jonathan Kelaty/Desktop/TreeVisualizer/tree-visualizer/src/TreeVisualizer/Trees/BinarySearchTree/BinarySearchTree.jsx"],"names":["React","Transition","CSSTransition","InputModal","ErrorMessage","Queue","randomIntFromInverval","BinarySearchTreeNode","constructor","val","value","left","right","animations","initial","node","active","delay","line","visited","success","removed","moveAnimations","css","entering","entered","exiting","exited","BinarySearchTree","Component","props","initialStateOperation","visibleClasses","appearDone","enterDone","exit","operationSteps","Initial","Generate","Reset","Insert","Remove","Search","Traversal","name","key","root","removeValue","targetValue","targetNode","traversal","timeout","input","state","operation","step","tooltips","receiveInput","bind","action1","action2","action3","action4","action5","action6","componentDidMount","setState","componentDidUpdate","advanceOperationStep","performOperationStep","GenerateTree","ResetTree","InsertInTree","RemoveFromTree","SearchTree","TraverseTree","InitialTree","length","_this","setTimeout","setHideTraversalAnimations","setHideMoveAnimations","document","querySelector","classList","remove","setHideAnimations","reset","insertNumElements","setGenerationAnimations","contains","insert","setInsertAnimations","setInsertionCompleteAnimations","setRemoveAnimations","setMoveSubtreeAnimations","add","setSearchAnimations","setDFSTraversalAnimations","setBFSTraversalAnimations","deleteNode","searchNode","render","console","log","error","errorMessage","transform","getScaleFactor","Tree","elements","i","height","Math","max","curr","inOrderSuccessor","scale_factor","window","innerWidth","pow","tree_height","curr_height","pos","leftChild","rightChild","classes","join","rootWidth","width","getNodeHover","getCricle","getConnectingLine","getLine","addClass","queue","push","empty","front","element","order","_delay","setMoveSubtreeCompleteAnimations","setInOrderSuccessorAnimations","first","textContent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport{ Transition, CSSTransition } from 'react-transition-group'\r\n\r\nimport InputModal from '../../Additional/InputModal/InputModal.jsx'\r\nimport ErrorMessage from '../../Additional/ErrorMessage/ErrorMessage.jsx'\r\n\r\nimport Queue from '../../Additional/Queue.js'\r\nimport { randomIntFromInverval } from '../../Additional/Helpers.js'\r\n\r\nimport './BinarySearchTree.scss'\r\n\r\nclass BinarySearchTreeNode {\r\n    constructor(val) {\r\n        this.value = val;\r\n        this.left  = null;\r\n        this.right = null;\r\n\r\n        this.animations = {\r\n            initial: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            },\r\n            visited: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            },\r\n            success: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            },\r\n            removed: {\r\n                node: {\r\n                    active: false, delay: 0\r\n                },\r\n                line: {\r\n                    active: false,  delay: 0\r\n                }\r\n            }\r\n        };\r\n\r\n        this.moveAnimations = {\r\n            active: false,\r\n            delay: 0,\r\n            css: {\r\n                entering: {},\r\n                entered:  {},\r\n                exiting:  {},\r\n                exited:   {}\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport default class BinarySearchTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialStateOperation = 'Initial';\r\n\r\n        this.visibleClasses = {\r\n            appearDone: 'visible',\r\n            enterDone: 'visible',\r\n            exit: 'visible'\r\n        };\r\n\r\n        this.operationSteps = {\r\n            Initial: [\r\n                'Initial'\r\n            ],\r\n            Generate: [\r\n                'Reset',\r\n                'Generate'\r\n            ],\r\n            Reset: [\r\n                'Hide',\r\n                'Reset'\r\n            ],\r\n            Insert: [\r\n                'Input',\r\n                'Insert',\r\n                'Complete'\r\n            ],\r\n            Remove: [\r\n                'Input',\r\n                'Remove 1',\r\n                'Remove 2',\r\n                'Remove 3',\r\n                'Remove 4',\r\n                'Complete'\r\n            ],\r\n            Search: [\r\n                'Input',\r\n                'Search'\r\n            ],\r\n            Traversal: [\r\n                'Traverse'\r\n            ]\r\n        };\r\n\r\n        this.name = 'BinarySearchTree';\r\n        this.key  = 'BST';\r\n        this.root = null;\r\n\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.traversal = null;\r\n        this.timeout = 0;\r\n        this.input = false;\r\n\r\n        this.state = {\r\n            operation: this.initialStateOperation,\r\n            step: 0,\r\n            tooltips: false\r\n        };\r\n\r\n        this.receiveInput = this.receiveInput.bind(this);\r\n\r\n        this.action1 = this.action1.bind(this); // temporary\r\n        this.action2 = this.action2.bind(this); // temporary\r\n        this.action3 = this.action3.bind(this); // temporary\r\n        this.action4 = this.action4.bind(this); // temporary\r\n        this.action5 = this.action5.bind(this); // temporary\r\n        this.action6 = this.action6.bind(this); // temporary\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ operation: 'Generate', step: 0 });\r\n    }\r\n\r\n    /*static getDerivedStateFromProps(newProps, state) {\r\n        //To-do: async calls and tooltips\r\n        console.log(\"BST::getDerivedStateFromProps::newProps \"  + newProps.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.operation \" + state.operation);\r\n        console.log(\"BST::getDerivedStateFromProps::state.animating \" + state.animating);\r\n\r\n        const initialStateOperation = 'Initial';\r\n\r\n        if ( state.animating ) {\r\n            if ( state.operation === initialStateOperation ) {\r\n                return { operation: state.operation, animating: false };\r\n            }\r\n            else {\r\n                return { operation: state.operation };\r\n            }\r\n        }\r\n        else if ( state.operation !== newProps.operation ) {\r\n            return { operation: newProps.operation, animating: true };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }*/\r\n\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        console.log(\"BST::shouldComponentUpdate: \" + nextState.operation);\r\n        if ( nextState.operation === this.initialStateOperation ) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }*/\r\n\r\n    componentDidUpdate() {\r\n        this.advanceOperationStep();\r\n    }\r\n\r\n    performOperationStep() {\r\n        switch( this.state.operation ) {\r\n            case 'Generate':  this.GenerateTree();   break;\r\n            case 'Reset':     this.ResetTree();      break;\r\n            case 'Insert':    this.InsertInTree();   break;\r\n            case 'Remove':    this.RemoveFromTree(); break; \r\n            case 'Search':    this.SearchTree();     break;\r\n            case 'Traversal': this.TraverseTree();   break;\r\n            case 'Initial':\r\n            default:          this.InitialTree();    break;\r\n        }\r\n    }\r\n    \r\n    advanceOperationStep() {\r\n        if ( this.state.operation !== this.initialStateOperation ) {\r\n            if ( this.state.step >= this.operationSteps[ this.state.operation ].length - 1 ) {\r\n                let _this = this;\r\n                setTimeout(function() {\r\n                    _this.setState({ operation: 'Initial', step: 0 });\r\n                }, _this.timeout);\r\n            }\r\n            else {\r\n                switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n                    case 'Input': return;\r\n                    default:\r\n                }\r\n\r\n                let _this = this;\r\n                setTimeout(function() {\r\n                    _this.setState({ step: _this.state.step + 1 })\r\n                }, _this.timeout);\r\n            }\r\n        }\r\n    }\r\n\r\n    InitialTree() {\r\n        this.removeValue = null;\r\n        this.targetValue = null;\r\n        this.targetNode = null;\r\n        this.traversal = null;\r\n        this.timeout = 0;\r\n        this.setHideTraversalAnimations();\r\n        this.setHideMoveAnimations();\r\n\r\n        if ( document.querySelector('.moved') ) {\r\n            document.querySelector('.moved').classList.remove('moved');\r\n        }\r\n    }\r\n\r\n    GenerateTree() {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Reset':\r\n                if (this.root) {\r\n                    this.setHideAnimations();\r\n                    this.timeout = 1000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Generate':\r\n                this.reset();\r\n                this.insertNumElements(15);\r\n                this.setGenerationAnimations();\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    ResetTree() {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Hide':\r\n                if (this.root) {\r\n                    this.setHideAnimations();\r\n                    this.timeout = 1000;\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Reset':\r\n                this.reset();\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    InsertInTree(val) {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                this.input = true;\r\n                break;\r\n            case 'Insert':\r\n                if ( this.targetValue ) {\r\n                    if ( ! this.contains(this.targetValue) ) {\r\n                        this.insert(this.targetValue);\r\n                        this.timeout = this.setInsertAnimations();\r\n                    }\r\n                    else {\r\n                        //show error?... already contains element\r\n                    }\r\n                }\r\n                else {\r\n                    //show error?... invalid element (cancel)\r\n                }\r\n                break;\r\n            case 'Complete':\r\n                if ( this.targetValue ) {\r\n                    this.setInsertionCompleteAnimations();\r\n                    this.timeout = 5000;\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    RemoveFromTree() {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                if ( this.root ) {\r\n                    this.input = true;\r\n                }\r\n                else {\r\n                    //show error... tree is empty\r\n                }\r\n                break;\r\n            case 'Remove 1':\r\n                if ( this.targetValue ) {\r\n                    this.timeout = this.setRemoveAnimations() + 3000;\r\n                }\r\n                else {\r\n                    //show error?... invalid element (cancel)\r\n                }\r\n                break;\r\n            case 'Remove 2':\r\n                if ( this.targetValue ) {\r\n                    this.timeout = this.setMoveSubtreeAnimations() + 3000;\r\n                }\r\n                break;\r\n            case 'Remove 3':\r\n                if ( this.targetValue ) {\r\n                    if ( this.targetNode ) {\r\n                        this.timeout = this.setRemoveAnimations() + 3000;\r\n                    }\r\n                }\r\n                else {\r\n                    this.timeout = 0;\r\n                }\r\n                break;\r\n            case 'Remove 4':\r\n                if ( this.targetValue ) {\r\n                    if ( this.targetNode ) {\r\n                        this.timeout = this.setMoveSubtreeAnimations() + 3000;\r\n                    }\r\n                }\r\n                break;\r\n            case 'Complete':\r\n                if ( this.targetValue ) {\r\n                    this.root = this.remove(this.removeValue);\r\n                    this.setHideMoveAnimations();\r\n                    this.setHideTraversalAnimations();\r\n                    document.querySelector('.root').classList.add('moved');\r\n                    this.timeout = 10000;\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    SearchTree() {\r\n        switch( this.operationSteps[ this.state.operation ][ this.state.step ] ) {\r\n            case 'Input':\r\n                if ( this.root ) {\r\n                    this.input = true;\r\n                }\r\n                else {\r\n                    //show error... tree is empty\r\n                }\r\n                break;\r\n            case 'Search':\r\n                if ( this.targetValue ) {\r\n                    if ( this.contains(this.targetValue) ) {\r\n                        this.timeout = this.setSearchAnimations() + 7000;\r\n                    }\r\n                    else {\r\n                        //show error?... tree does not contain element (or maybe after animation)\r\n                    }\r\n                }\r\n                else {\r\n                    //show error?... invalid element (cancel)\r\n                }\r\n                break;\r\n            default:\r\n                this.InitialTree();\r\n                break;\r\n        }\r\n    }\r\n\r\n    TraverseTree() {\r\n        if ( this.root ) {\r\n            switch( this.traversal ) {\r\n                case 'Pre-Order':\r\n                case 'In-Order':\r\n                case 'Post-Order':\r\n                    this.timeout = this.setDFSTraversalAnimations( this.traversal ) + 5000;\r\n                    break;\r\n                case 'Level Order':\r\n                    this.timeout = this.setBFSTraversalAnimations() + 5000;\r\n                    break;\r\n                default:\r\n                    this.InitialTree();\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            //show error... tree is empty\r\n        }\r\n    }\r\n\r\n    receiveInput(val) {\r\n        this.targetValue = val;\r\n        this.input = false;\r\n\r\n        if ( this.state.operation === 'Remove' ){\r\n            this.deleteNode(val);\r\n        }\r\n        else {\r\n            this.setState({ step: this.state.step + 1 });\r\n        }\r\n    }\r\n\r\n    searchNode(val) {\r\n        this.targetValue = val;\r\n        this.setState({ operation: 'Search', step: 1 });\r\n    }\r\n\r\n    deleteNode(val) {\r\n        this.targetValue = val;\r\n        this.removeValue = val;\r\n        this.targetNode = this.root;\r\n        this.setState({ operation: 'Remove', step: 1 });\r\n    }\r\n    \r\n    action1() {\r\n        this.setState({ operation: 'Generate', step: 0 });\r\n    }\r\n\r\n    action2() {\r\n        this.setState({ operation: 'Reset', step: 0 });\r\n    }\r\n\r\n    action3() {\r\n        this.setState({ operation: 'Insert', step: 0 });\r\n    }\r\n\r\n    action4() {\r\n        this.traversal = 'Level Order';\r\n        this.setState({ operation: 'Traversal', step: 0 });\r\n    }\r\n\r\n    action5(val) {\r\n        this.setState({ operation: 'Search', step: 0 });\r\n    }\r\n\r\n    action6() {\r\n        this.setState({ operation: 'Remove', step: 0 });\r\n    }\r\n\r\n    render() {\r\n        this.performOperationStep();\r\n        console.log(this.state);\r\n\r\n        return (\r\n            <>\r\n                <button onClick = {this.action1}>Generate</button>\r\n                <button onClick = {this.action2}>Reset</button>\r\n                <button onClick = {this.action3}>Insert</button>\r\n                <button onClick = {this.action4}>Traversal</button>\r\n                <button onClick = {this.action5}>Search</button>\r\n                <button onClick = {this.action6}>Remove</button>\r\n\r\n                { this.input ?\r\n                    <InputModal operation = {this.state.operation} callback = {this.receiveInput} />\r\n                : null }\r\n\r\n                { this.error ?\r\n                    <ErrorMessage message = {this.errorMessage} />\r\n                : null }\r\n\r\n                <div\r\n                    id={ this.name }\r\n                    className='tree'\r\n                    style={ {transform: this.getScaleFactor()} }>\r\n\r\n                    { this.Tree() }\r\n\r\n                </div>\r\n\r\n                { this.state.tooltips ?\r\n                    {/* <Tooltips /> */}\r\n                : null }\r\n            </>\r\n        );\r\n    }\r\n\r\n    insertNumElements(elements) {\r\n        for (let i = 0; i < elements; ++i) {\r\n            let val = randomIntFromInverval(1, 150);\r\n            if ( this.insert( val ) ) {\r\n                if ( this.height() > 5 ) {\r\n                    this.root = this.remove( val );\r\n                    --i;\r\n                }\r\n            }\r\n            else {\r\n                --i;\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.root = null;\r\n    }\r\n\r\n    height(node = this.root) {\r\n        if (node === null) return 0;\r\n        return Math.max( this.height(node.left), this.height(node.right) ) + 1;\r\n    }\r\n\r\n    contains(val, node = this.root) {\r\n        if ( ! node ) return false;\r\n\r\n        if (val < node.value) {\r\n            return this.contains(val, node.left);\r\n        }\r\n        else if (val > node.value) {\r\n            return this.contains(val, node.right);\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    insert(val) {\r\n        if (this.root === null) {\r\n            this.root = new BinarySearchTreeNode(val);\r\n            return true;\r\n        }\r\n        \r\n        let curr = this.root;\r\n\r\n        while (true) {\r\n            if (curr.value === val) {\r\n                //tree contains key already\r\n                return false;\r\n            }\r\n            else if (curr.value < val) {\r\n                if(curr.right === null) {\r\n                    curr.right = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.right;\r\n            }\r\n            else {\r\n                if(curr.left === null) {\r\n                    curr.left = new BinarySearchTreeNode(val);\r\n                    return true;\r\n                }\r\n                curr = curr.left;\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(val, node = this.root) {\r\n        if ( ! val ) return;\r\n\r\n        if ( node === null ) return node;\r\n\r\n        if ( val < node.value ) {\r\n            node.left = this.remove(val, node.left);\r\n        }\r\n        else if ( val > node.value ) {\r\n            node.right = this.remove(val, node.right);\r\n        }\r\n        else {\r\n            if ( node.left === null ) {\r\n                return node.right;\r\n            }\r\n            else if ( node.right === null ) {\r\n                return node.left;\r\n            }\r\n            else {\r\n                node.value = this.inOrderSuccessor(node.right);\r\n                node.right = this.remove(node.value, node.right);\r\n            }\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    inOrderSuccessor(node) {\r\n        if ( node === null ) {\r\n            //error\r\n        }\r\n        else if ( node.left !== null ) {\r\n            return this.inOrderSuccessor(node.left);\r\n        }\r\n        else {\r\n            return node.value;\r\n        }\r\n    }\r\n\r\n    getScaleFactor() {\r\n        let scale_factor = (window.innerWidth - 20) / ( Math.pow(2, this.height() - 1) * 70 );\r\n        return 'scale(' + (scale_factor > 1 ? 1 : scale_factor) + ')';\r\n    }\r\n\r\n    Tree(node = this.root, tree_height = this.height(), curr_height = 0, pos = 'root') {\r\n        if (curr_height === tree_height) return null;\r\n\r\n        const leftChild  = this.Tree(node ? node.left  : null, tree_height, curr_height + 1, 'left');\r\n        const rightChild = this.Tree(node ? node.right : null, tree_height, curr_height + 1, 'right');\r\n        \r\n        const classes = ['node-wrapper', pos].join(' ');\r\n\r\n        if ( node === null ) {\r\n            return (\r\n                <>\r\n                    <div\r\n                        className={classes}\r\n                        node-value='null'\r\n                        node-layer={tree_height - curr_height}>\r\n\r\n                            <div className='node-value' />\r\n\r\n                            {leftChild}\r\n                            {rightChild}\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            const rootWidth = {\r\n                width: ( node === this.root ) ? Math.pow(2, tree_height - 1) * 70 + 'px' : null\r\n            };\r\n\r\n            return (\r\n                <>\r\n                    <Transition\r\n                        in={node.moveAnimations['active']}\r\n                        timeout={node.moveAnimations['delay']}\r\n                        appear={true}>\r\n\r\n                        {state => (\r\n\r\n                            <div\r\n                                className={classes}\r\n                                node-value={node.value}\r\n                                node-layer={tree_height - curr_height}\r\n                                style={( node === this.root ) ? rootWidth : node.moveAnimations['css'][state]}>\r\n\r\n                                <CSSTransition\r\n                                    in={node.animations['initial']['node']['active']}\r\n                                    timeout={node.animations['initial']['node']['delay']}\r\n                                    classNames={this.visibleClasses}\r\n                                    appear={true}>\r\n\r\n                                    <div className='node-value'>\r\n                                        {this.getNodeHover(node.value)}\r\n                                        {this.getCricle(node)}\r\n                                    </div>\r\n\r\n                                </CSSTransition>\r\n\r\n                                {leftChild}\r\n                                {rightChild}\r\n\r\n                                {this.getConnectingLine(node, pos)}\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                    </Transition>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    getCricle(node) {\r\n        return (\r\n            <>\r\n                <svg className='circle node-value-circle' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                    <circle className='circle node-circle initial' r='24' cx='25' cy='25' fill='none' />\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['visited']['node']['active']}\r\n                        timeout={node.animations['visited']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background visited' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle visited' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['success']['node']['active']}\r\n                        timeout={node.animations['success']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background success' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle success' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n\r\n                    <CSSTransition\r\n                        in={node.animations['removed']['node']['active']}\r\n                        timeout={node.animations['removed']['node']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='circle node-circle-traversal' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-circle-background removed' r='24' cx='25' cy='25' fill='none' />\r\n                            <circle className='circle node-circle removed' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                    \r\n                    <text className='text node-value-text' x='50%' y='50%' fill='black' textAnchor='middle' dominantBaseline='central'>\r\n                        {node.value}\r\n                    </text>\r\n\r\n                </svg>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getNodeHover(val) {\r\n        return (\r\n            <>\r\n                <span className='node-hover'>\r\n                    <i className='fas fa-search' onClick={() => this.searchNode(val)} />\r\n                    <span className='search'>\r\n                        <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n\r\n                    <i className='fas fa-trash' onClick={() => this.deleteNode(val)} />\r\n                    <span className='trash'>\r\n                        <svg className='circle' xmlns='http://www.w3.org/2000/svg'>\r\n                            <circle className='circle node-hover-circle' r='24' cx='25' cy='25' fill='none' />\r\n                        </svg>\r\n                    </span>\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    getConnectingLine(node, pos) {\r\n        if (pos === 'left' || pos === 'right') {\r\n            return (\r\n                <>\r\n                    <CSSTransition\r\n                        in={node.animations['initial']['line']['active']}\r\n                        timeout={node.animations['initial']['line']['delay']}\r\n                        classNames={this.visibleClasses}\r\n                        appear={true}>\r\n\r\n                        <svg className='line node-line' xmlns='http://www.w3.org/2000/svg'>\r\n\r\n                            {this.getLine(pos, 'initial')}\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['visited']['line']['active']}\r\n                                timeout={node.animations['visited']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'visited')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['success']['line']['active']}\r\n                                timeout={node.animations['success']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'success')}\r\n\r\n                            </CSSTransition>\r\n\r\n                            <CSSTransition\r\n                                in={node.animations['removed']['line']['active']}\r\n                                timeout={node.animations['removed']['line']['delay']}\r\n                                classNames={this.visibleClasses}\r\n                                appear={true}>\r\n\r\n                                {this.getLine(pos, 'removed')}\r\n\r\n                            </CSSTransition>\r\n\r\n                        </svg>\r\n\r\n                    </CSSTransition>\r\n                </>\r\n            );\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getLine(pos, addClass) {\r\n        const classes = ['line', addClass].join(' ');\r\n\r\n        if (pos === 'left')\r\n            return ( <line className={classes} x1='0' y1='50' x2='100%' y2='0' /> );\r\n        else if (pos === 'right')\r\n            return ( <line className={classes} x1='0' y1='0' x2='100%' y2='50' /> );\r\n        else\r\n            return null;\r\n    }\r\n\r\n    setGenerationAnimations() {\r\n        let queue = new Queue();\r\n        queue.push(this.root);\r\n\r\n        let delay = 150;\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                queue.push(node.left);\r\n                queue.push(node.right);\r\n\r\n                for (let key in node.animations['initial']) {\r\n                    node.animations['initial'][key]['active'] = true;\r\n                    node.animations['initial'][key]['delay'] = delay;\r\n                }\r\n                \r\n                delay += 200;\r\n            }\r\n        }\r\n    }\r\n\r\n    setHideAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                node.animations[state][element]['active'] = false;\r\n                node.animations[state][element]['delay'] = 150;\r\n            }\r\n        }\r\n\r\n        this.setHideAnimations(node.left);\r\n        this.setHideAnimations(node.right);\r\n    }\r\n\r\n    setHideTraversalAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        for (let state in node.animations) {\r\n            for (let element in node.animations[state]) {\r\n                if (state === 'initial') {\r\n                    node.animations[state][element]['active'] = true;\r\n                    node.animations[state][element]['delay'] = 0;\r\n                }\r\n                else {\r\n                    node.animations[state][element]['active'] = false;\r\n                    node.animations[state][element]['delay'] = 150;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setHideTraversalAnimations(node.left);\r\n        this.setHideTraversalAnimations(node.right);\r\n    }\r\n\r\n    setHideMoveAnimations(node = this.root) {\r\n        if (node === null) return;\r\n\r\n        node.moveAnimations['active'] = false;\r\n        node.moveAnimations['delay'] = 0;\r\n\r\n        this.setHideMoveAnimations(node.left);\r\n        this.setHideMoveAnimations(node.right);\r\n    }\r\n\r\n    setDFSTraversalAnimations(order, node = this.root, delay = 150) {\r\n        if (node === null) return delay;\r\n\r\n        let _delay = node === this.root ? delay : delay + 1000;\r\n\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = _delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = _delay;\r\n\r\n        if (order === 'Pre-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.left, _delay);\r\n\r\n        if (order === 'In-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        _delay = this.setDFSTraversalAnimations(order, node.right, _delay);\r\n\r\n        if (order === 'Post-Order') {\r\n            _delay += 1000;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = _delay;\r\n        }\r\n\r\n        node.animations['success']['line']['active'] = true;\r\n        node.animations['success']['line']['delay'] = _delay;\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setBFSTraversalAnimations() {\r\n        let queue = new Queue();\r\n\r\n        let delay = 150;\r\n\r\n        if (this.root) {\r\n            queue.push(this.root);\r\n\r\n            this.root.animations['visited']['node']['active'] = true;\r\n            this.root.animations['visited']['node']['delay'] = delay;\r\n        }\r\n        else {\r\n            //error..tree is empty\r\n        }\r\n\r\n        while ( ! queue.empty() ) {\r\n            let node = queue.front();\r\n\r\n            if (node) {\r\n                if (node.left) {\r\n                    queue.push(node.left);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.left.animations['visited']) {\r\n                        node.left.animations['visited'][element]['active'] = true;\r\n                        node.left.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n\r\n                if (node.right) {\r\n                    queue.push(node.right);\r\n\r\n                    delay += 1000;\r\n                    for (let element in node.right.animations['visited']) {\r\n                        node.right.animations['visited'][element]['active'] = true;\r\n                        node.right.animations['visited'][element]['delay'] = delay;\r\n                    }\r\n                }\r\n                \r\n                delay += 1000;\r\n                for (let element in node.animations['success']) {\r\n                    node.animations['success'][element]['active'] = true;\r\n                    node.animations['success'][element]['delay'] = delay;\r\n                }\r\n            }\r\n        }\r\n\r\n        return delay;\r\n    }\r\n\r\n    setSearchAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {\r\n            let _delay = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 1250;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                _delay = this.setSearchAnimations(node.left, delay + 1000);\r\n            else\r\n                _delay = this.setSearchAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            return _delay;\r\n        }\r\n    }\r\n\r\n    setInsertAnimations(node = this.root, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {\r\n            let _delay = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                this.targetNode = node;\r\n                return _delay;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                _delay = this.setInsertAnimations(node.left, delay + 1000);\r\n            else\r\n                _delay = this.setInsertAnimations(node.right, delay + 1000);\r\n                \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            return _delay;\r\n        }\r\n    }\r\n\r\n    setInsertionCompleteAnimations() {\r\n        let node = this.targetNode;\r\n\r\n        if ( node ) {\r\n            node.animations['initial']['node']['active'] = true;\r\n            node.animations['initial']['node']['delay'] = 650;\r\n            node.animations['initial']['line']['active'] = true;\r\n            node.animations['initial']['line']['delay'] = 150;\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = 1250;\r\n        }\r\n    }\r\n\r\n    setRemoveAnimations(node = this.targetNode, delay = 150) {\r\n        if ( ! this.targetValue || ! node ) return delay;\r\n        else {    \r\n            node.animations['visited']['node']['active'] = true;\r\n            node.animations['visited']['node']['delay'] = delay + 500;\r\n            node.animations['visited']['line']['active'] = true;\r\n            node.animations['visited']['line']['delay'] = delay;\r\n\r\n            if (this.targetValue === node.value) {\r\n                node.animations['success']['node']['active'] = false;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = false;\r\n                node.animations['success']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = true;\r\n                node.animations['removed']['node']['delay'] = delay + 1500;\r\n                node.animations['removed']['line']['active'] = true;\r\n                node.animations['removed']['line']['delay'] = delay + 1000;\r\n\r\n                node.animations['initial']['node']['active'] = false;\r\n                node.animations['initial']['node']['delay'] = delay + 1500;\r\n                node.animations['initial']['line']['active'] = false;\r\n                node.animations['initial']['line']['delay'] = delay + 1500;\r\n\r\n                this.targetNode = node;\r\n            }\r\n            else if (this.targetValue < node.value)\r\n                return this.setRemoveAnimations(node.left, delay + 1000);\r\n            else\r\n                return this.setRemoveAnimations(node.right, delay + 1000);\r\n\r\n            return delay;\r\n        }\r\n    }\r\n\r\n    setMoveSubtreeAnimations() {\r\n        let node = this.targetNode;\r\n        let _delay = 0;\r\n\r\n        if ( node ) {\r\n            if ( node.left === null || node.right === null ) {\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = 3000;\r\n    \r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = 150;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = 150;\r\n    \r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = 150;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = 150;\r\n    \r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = 3500;\r\n\r\n                if ( node.left === null && node.right === null ) {\r\n                    node.animations['initial']['line']['active'] = false;\r\n                    node.animations['initial']['line']['delay'] = 0;\r\n\r\n                    node.animations['success']['line']['active'] = false;\r\n                    node.animations['success']['line']['delay'] = 0;\r\n                }\r\n                else if ( node.left === null ) {\r\n                    node.right.animations['initial']['line']['active'] = false;\r\n                    node.right.animations['initial']['line']['delay'] = 150;\r\n                    \r\n                    node.right.moveAnimations['active'] = true;\r\n                    node.right.moveAnimations['delay'] = 1000;\r\n                    node.right.moveAnimations['css']['entered'] = {\r\n                        'width': '100%',\r\n                        'zIndex': '1000',\r\n                        'transform': 'translate(-50%, -50px)'\r\n                    };\r\n    \r\n                    _delay = this.setMoveSubtreeCompleteAnimations(node.right);\r\n                }\r\n                else if ( node.right === null ) {\r\n                    node.left.animations['initial']['line']['active'] = false;\r\n                    node.left.animations['initial']['line']['delay'] = 150;\r\n                    \r\n                    node.left.moveAnimations['active'] = true;\r\n                    node.left.moveAnimations['delay'] = 1000;\r\n                    node.left.moveAnimations['css']['entered'] = {\r\n                        'width': '100%',\r\n                        'zIndex': '1000',\r\n                        'transform': 'translate(0, -50px)'\r\n                    };\r\n    \r\n                    _delay = this.setMoveSubtreeCompleteAnimations(node.left);\r\n                }\r\n\r\n                this.targetNode = null;\r\n            }\r\n            else {\r\n                let delay = this.setInOrderSuccessorAnimations(node.right);\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['visited']['node']['active'] = false;\r\n                node.animations['visited']['node']['delay'] = delay;\r\n                node.animations['visited']['line']['active'] = false;\r\n                node.animations['visited']['line']['delay'] = delay;\r\n\r\n                node.animations['removed']['node']['active'] = false;\r\n                node.animations['removed']['node']['delay'] = delay;\r\n                node.animations['removed']['line']['active'] = false;\r\n                node.animations['removed']['line']['delay'] = delay;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['initial']['node']['active'] = true;\r\n                node.animations['initial']['node']['delay'] = delay;\r\n                node.animations['initial']['line']['active'] = true;\r\n                node.animations['initial']['line']['delay'] = delay + 500;\r\n\r\n                delay += 1000;\r\n\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay + 500;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n\r\n                _delay = delay;\r\n            }\r\n        }\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setMoveSubtreeCompleteAnimations(node, delay = 4000, first = true) {\r\n        let _delay = delay;\r\n\r\n        if (node) {\r\n            if (first) {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n            }\r\n            else {\r\n                node.animations['success']['node']['active'] = true;\r\n                node.animations['success']['node']['delay'] = delay;\r\n                node.animations['success']['line']['active'] = true;\r\n                node.animations['success']['line']['delay'] = delay;\r\n            }\r\n\r\n            _delay = Math.max(\r\n                this.setMoveSubtreeCompleteAnimations(node.left, delay + 300, false), \r\n                this.setMoveSubtreeCompleteAnimations(node.right, delay + 300, false)\r\n            );\r\n        }\r\n\r\n        return _delay;\r\n    }\r\n\r\n    setInOrderSuccessorAnimations(node, delay = 150) {\r\n        node.animations['visited']['node']['active'] = true;\r\n        node.animations['visited']['node']['delay'] = delay + 500;\r\n        node.animations['visited']['line']['active'] = true;\r\n        node.animations['visited']['line']['delay'] = delay;\r\n\r\n        if ( node.left ) {\r\n            return this.setInOrderSuccessorAnimations(node.left, delay + 1000);\r\n        }\r\n        else {\r\n            node.animations['success']['node']['active'] = true;\r\n            node.animations['success']['node']['delay'] = delay + 1500;\r\n            node.animations['success']['line']['active'] = true;\r\n            node.animations['success']['line']['delay'] = delay + 1000;\r\n\r\n            document.querySelector('.node-wrapper[node-value=\"' + this.targetValue + '\"]>.node-value .node-value-text').textContent = node.value;\r\n\r\n            this.targetNode = node;\r\n            this.targetValue = node.value;\r\n\r\n            return delay + 1500;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}